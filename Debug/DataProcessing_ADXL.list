
DataProcessing_ADXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002bc8  08002bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf0  08002bf0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf0  08002bf0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf0  08002bf0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004970  20000008  08002c00  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004978  08002c00  00024978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f65  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001766  00000000  00000000  00029fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068e  00000000  00000000  0002bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e9fd  00000000  00000000  0002c66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c48  00000000  00000000  0003b06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005fa44  00000000  00000000  00043cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023a0  00000000  00000000  000a36f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000a5a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002bb0 	.word	0x08002bb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	08002bb0 	.word	0x08002bb0

080001e0 <main>:

void Task1(void *pvParameters);
void Task2(void *pvParameters);

int main()
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af02      	add	r7, sp, #8

	xTaskCreate(Task1, "Demo1", 100, NULL, 1, NULL);
 80001e6:	2300      	movs	r3, #0
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2301      	movs	r3, #1
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2300      	movs	r3, #0
 80001f0:	2264      	movs	r2, #100	; 0x64
 80001f2:	4908      	ldr	r1, [pc, #32]	; (8000214 <main+0x34>)
 80001f4:	4808      	ldr	r0, [pc, #32]	; (8000218 <main+0x38>)
 80001f6:	f000 feaa 	bl	8000f4e <xTaskCreate>
	xTaskCreate(Task2, "Demo2", 100, NULL, 1, NULL);
 80001fa:	2300      	movs	r3, #0
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2301      	movs	r3, #1
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2264      	movs	r2, #100	; 0x64
 8000206:	4905      	ldr	r1, [pc, #20]	; (800021c <main+0x3c>)
 8000208:	4805      	ldr	r0, [pc, #20]	; (8000220 <main+0x40>)
 800020a:	f000 fea0 	bl	8000f4e <xTaskCreate>

	vTaskStartScheduler();
 800020e:	f000 ffe3 	bl	80011d8 <vTaskStartScheduler>

	while(1)
 8000212:	e7fe      	b.n	8000212 <main+0x32>
 8000214:	08002bc8 	.word	0x08002bc8
 8000218:	08000225 	.word	0x08000225
 800021c:	08002bd0 	.word	0x08002bd0
 8000220:	0800023d 	.word	0x0800023d

08000224 <Task1>:

	}
}

void Task1(void *pvParameters)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		count1++;
 800022c:	4b02      	ldr	r3, [pc, #8]	; (8000238 <Task1+0x14>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	4a01      	ldr	r2, [pc, #4]	; (8000238 <Task1+0x14>)
 8000234:	6013      	str	r3, [r2, #0]
 8000236:	e7f9      	b.n	800022c <Task1+0x8>
 8000238:	20000024 	.word	0x20000024

0800023c <Task2>:
	}
}

void Task2(void *pvParameters)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]

	while(1)
	{
		count2++;
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <Task2+0x14>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	3301      	adds	r3, #1
 800024a:	4a01      	ldr	r2, [pc, #4]	; (8000250 <Task2+0x14>)
 800024c:	6013      	str	r3, [r2, #0]
 800024e:	e7f9      	b.n	8000244 <Task2+0x8>
 8000250:	20000028 	.word	0x20000028

08000254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <SystemInit+0x20>)
 800025a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800025e:	4a05      	ldr	r2, [pc, #20]	; (8000274 <SystemInit+0x20>)
 8000260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800027c:	f7ff ffea 	bl	8000254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	; (80002b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	; (80002c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80002a6:	f002 fc51 	bl	8002b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002aa:	f7ff ff99 	bl	80001e0 <main>
  bx  lr    
 80002ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80002bc:	08002bf8 	.word	0x08002bf8
  ldr r2, =_sbss
 80002c0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80002c4:	20004978 	.word	0x20004978

080002c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC_IRQHandler>
	...

080002cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <SysTick_Handler+0x1c>)
 80002d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80002d4:	f001 fbc8 	bl	8001a68 <xTaskGetSchedulerState>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d001      	beq.n	80002e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80002de:	f002 f9b3 	bl	8002648 <xPortSysTickHandler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	e000e010 	.word	0xe000e010

080002ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <vApplicationGetIdleTaskMemory+0x2c>)
 80002fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	4a06      	ldr	r2, [pc, #24]	; (800031c <vApplicationGetIdleTaskMemory+0x30>)
 8000302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2280      	movs	r2, #128	; 0x80
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	3714      	adds	r7, #20
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	2000002c 	.word	0x2000002c
 800031c:	20000088 	.word	0x20000088

08000320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	4a07      	ldr	r2, [pc, #28]	; (800034c <vApplicationGetTimerTaskMemory+0x2c>)
 8000330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	4a06      	ldr	r2, [pc, #24]	; (8000350 <vApplicationGetTimerTaskMemory+0x30>)
 8000336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	20000288 	.word	0x20000288
 8000350:	200002e4 	.word	0x200002e4

08000354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f103 0208 	add.w	r2, r3, #8
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f04f 32ff 	mov.w	r2, #4294967295
 800036c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f103 0208 	add.w	r2, r3, #8
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f103 0208 	add.w	r2, r3, #8
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80003ae:	b480      	push	{r7}
 80003b0:	b085      	sub	sp, #20
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	689a      	ldr	r2, [r3, #8]
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	683a      	ldr	r2, [r7, #0]
 80003d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	1c5a      	adds	r2, r3, #1
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80003f6:	b480      	push	{r7}
 80003f8:	b085      	sub	sp, #20
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800040c:	d103      	bne.n	8000416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	691b      	ldr	r3, [r3, #16]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e00c      	b.n	8000430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3308      	adds	r3, #8
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e002      	b.n	8000424 <vListInsert+0x2e>
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	429a      	cmp	r2, r3
 800042e:	d2f6      	bcs.n	800041e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	685a      	ldr	r2, [r3, #4]
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	683a      	ldr	r2, [r7, #0]
 800043e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	683a      	ldr	r2, [r7, #0]
 800044a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	601a      	str	r2, [r3, #0]
}
 800045c:	bf00      	nop
 800045e:	3714      	adds	r7, #20
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	691b      	ldr	r3, [r3, #16]
 8000474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	6892      	ldr	r2, [r2, #8]
 800047e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	6852      	ldr	r2, [r2, #4]
 8000488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	429a      	cmp	r2, r3
 8000492:	d103      	bne.n	800049c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d10a      	bne.n	80004e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80004d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004d4:	f383 8811 	msr	BASEPRI, r3
 80004d8:	f3bf 8f6f 	isb	sy
 80004dc:	f3bf 8f4f 	dsb	sy
 80004e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80004e2:	bf00      	nop
 80004e4:	e7fe      	b.n	80004e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80004e6:	f002 f81d 	bl	8002524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f2:	68f9      	ldr	r1, [r7, #12]
 80004f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80004f6:	fb01 f303 	mul.w	r3, r1, r3
 80004fa:	441a      	add	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	3b01      	subs	r3, #1
 8000518:	68f9      	ldr	r1, [r7, #12]
 800051a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800051c:	fb01 f303 	mul.w	r3, r1, r3
 8000520:	441a      	add	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	22ff      	movs	r2, #255	; 0xff
 800052a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	22ff      	movs	r2, #255	; 0xff
 8000532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d114      	bne.n	8000566 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d01a      	beq.n	800057a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	3310      	adds	r3, #16
 8000548:	4618      	mov	r0, r3
 800054a:	f001 f8cf 	bl	80016ec <xTaskRemoveFromEventList>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d012      	beq.n	800057a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <xQueueGenericReset+0xcc>)
 8000556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	f3bf 8f4f 	dsb	sy
 8000560:	f3bf 8f6f 	isb	sy
 8000564:	e009      	b.n	800057a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3310      	adds	r3, #16
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff fef2 	bl	8000354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3324      	adds	r3, #36	; 0x24
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff feed 	bl	8000354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800057a:	f002 f803 	bl	8002584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	e000ed04 	.word	0xe000ed04

0800058c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08e      	sub	sp, #56	; 0x38
 8000590:	af02      	add	r7, sp, #8
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d10a      	bne.n	80005b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10a      	bne.n	80005d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80005ce:	bf00      	nop
 80005d0:	e7fe      	b.n	80005d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <xQueueGenericCreateStatic+0x52>
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <xQueueGenericCreateStatic+0x56>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <xQueueGenericCreateStatic+0x58>
 80005e2:	2300      	movs	r3, #0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10a      	bne.n	80005fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80005e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ec:	f383 8811 	msr	BASEPRI, r3
 80005f0:	f3bf 8f6f 	isb	sy
 80005f4:	f3bf 8f4f 	dsb	sy
 80005f8:	623b      	str	r3, [r7, #32]
}
 80005fa:	bf00      	nop
 80005fc:	e7fe      	b.n	80005fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <xQueueGenericCreateStatic+0x7e>
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <xQueueGenericCreateStatic+0x82>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <xQueueGenericCreateStatic+0x84>
 800060e:	2300      	movs	r3, #0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10a      	bne.n	800062a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	61fb      	str	r3, [r7, #28]
}
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800062a:	2350      	movs	r3, #80	; 0x50
 800062c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2b50      	cmp	r3, #80	; 0x50
 8000632:	d00a      	beq.n	800064a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000638:	f383 8811 	msr	BASEPRI, r3
 800063c:	f3bf 8f6f 	isb	sy
 8000640:	f3bf 8f4f 	dsb	sy
 8000644:	61bb      	str	r3, [r7, #24]
}
 8000646:	bf00      	nop
 8000648:	e7fe      	b.n	8000648 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800064a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000652:	2b00      	cmp	r3, #0
 8000654:	d00d      	beq.n	8000672 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800065e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	4613      	mov	r3, r2
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f000 f805 	bl	800067c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000674:	4618      	mov	r0, r3
 8000676:	3730      	adds	r7, #48	; 0x30
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	69ba      	ldr	r2, [r7, #24]
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	e002      	b.n	800069e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80006aa:	2101      	movs	r1, #1
 80006ac:	69b8      	ldr	r0, [r7, #24]
 80006ae:	f7ff ff05 	bl	80004bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	78fa      	ldrb	r2, [r7, #3]
 80006b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	; 0x38
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80006d2:	2300      	movs	r3, #0
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80006da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d10a      	bne.n	80006f6 <xQueueGenericSend+0x32>
	__asm volatile
 80006e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e4:	f383 8811 	msr	BASEPRI, r3
 80006e8:	f3bf 8f6f 	isb	sy
 80006ec:	f3bf 8f4f 	dsb	sy
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80006f2:	bf00      	nop
 80006f4:	e7fe      	b.n	80006f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d103      	bne.n	8000704 <xQueueGenericSend+0x40>
 80006fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <xQueueGenericSend+0x44>
 8000704:	2301      	movs	r3, #1
 8000706:	e000      	b.n	800070a <xQueueGenericSend+0x46>
 8000708:	2300      	movs	r3, #0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10a      	bne.n	8000724 <xQueueGenericSend+0x60>
	__asm volatile
 800070e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000712:	f383 8811 	msr	BASEPRI, r3
 8000716:	f3bf 8f6f 	isb	sy
 800071a:	f3bf 8f4f 	dsb	sy
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000720:	bf00      	nop
 8000722:	e7fe      	b.n	8000722 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d103      	bne.n	8000732 <xQueueGenericSend+0x6e>
 800072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800072e:	2b01      	cmp	r3, #1
 8000730:	d101      	bne.n	8000736 <xQueueGenericSend+0x72>
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <xQueueGenericSend+0x74>
 8000736:	2300      	movs	r3, #0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d10a      	bne.n	8000752 <xQueueGenericSend+0x8e>
	__asm volatile
 800073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000740:	f383 8811 	msr	BASEPRI, r3
 8000744:	f3bf 8f6f 	isb	sy
 8000748:	f3bf 8f4f 	dsb	sy
 800074c:	623b      	str	r3, [r7, #32]
}
 800074e:	bf00      	nop
 8000750:	e7fe      	b.n	8000750 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000752:	f001 f989 	bl	8001a68 <xTaskGetSchedulerState>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <xQueueGenericSend+0x9e>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <xQueueGenericSend+0xa2>
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <xQueueGenericSend+0xa4>
 8000766:	2300      	movs	r3, #0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10a      	bne.n	8000782 <xQueueGenericSend+0xbe>
	__asm volatile
 800076c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000770:	f383 8811 	msr	BASEPRI, r3
 8000774:	f3bf 8f6f 	isb	sy
 8000778:	f3bf 8f4f 	dsb	sy
 800077c:	61fb      	str	r3, [r7, #28]
}
 800077e:	bf00      	nop
 8000780:	e7fe      	b.n	8000780 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000782:	f001 fecf 	bl	8002524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800078e:	429a      	cmp	r2, r3
 8000790:	d302      	bcc.n	8000798 <xQueueGenericSend+0xd4>
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d129      	bne.n	80007ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800079e:	f000 fa0b 	bl	8000bb8 <prvCopyDataToQueue>
 80007a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d010      	beq.n	80007ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ae:	3324      	adds	r3, #36	; 0x24
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 ff9b 	bl	80016ec <xTaskRemoveFromEventList>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d013      	beq.n	80007e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80007bc:	4b3f      	ldr	r3, [pc, #252]	; (80008bc <xQueueGenericSend+0x1f8>)
 80007be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	f3bf 8f6f 	isb	sy
 80007cc:	e00a      	b.n	80007e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d007      	beq.n	80007e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <xQueueGenericSend+0x1f8>)
 80007d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80007e4:	f001 fece 	bl	8002584 <vPortExitCritical>
				return pdPASS;
 80007e8:	2301      	movs	r3, #1
 80007ea:	e063      	b.n	80008b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d103      	bne.n	80007fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80007f2:	f001 fec7 	bl	8002584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e05c      	b.n	80008b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80007fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d106      	bne.n	800080e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4618      	mov	r0, r3
 8000806:	f000 ffd5 	bl	80017b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800080a:	2301      	movs	r3, #1
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800080e:	f001 feb9 	bl	8002584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000812:	f000 fd47 	bl	80012a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000816:	f001 fe85 	bl	8002524 <vPortEnterCritical>
 800081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800081c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000820:	b25b      	sxtb	r3, r3
 8000822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000826:	d103      	bne.n	8000830 <xQueueGenericSend+0x16c>
 8000828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000836:	b25b      	sxtb	r3, r3
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d103      	bne.n	8000846 <xQueueGenericSend+0x182>
 800083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000846:	f001 fe9d 	bl	8002584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800084a:	1d3a      	adds	r2, r7, #4
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f000 ffc4 	bl	80017e0 <xTaskCheckForTimeOut>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d124      	bne.n	80008a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800085e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000860:	f000 faa2 	bl	8000da8 <prvIsQueueFull>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d018      	beq.n	800089c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086c:	3310      	adds	r3, #16
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 feea 	bl	800164c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800087a:	f000 fa2d 	bl	8000cd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800087e:	f000 fd1f 	bl	80012c0 <xTaskResumeAll>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	f47f af7c 	bne.w	8000782 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <xQueueGenericSend+0x1f8>)
 800088c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	f3bf 8f4f 	dsb	sy
 8000896:	f3bf 8f6f 	isb	sy
 800089a:	e772      	b.n	8000782 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800089c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800089e:	f000 fa1b 	bl	8000cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80008a2:	f000 fd0d 	bl	80012c0 <xTaskResumeAll>
 80008a6:	e76c      	b.n	8000782 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80008a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008aa:	f000 fa15 	bl	8000cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80008ae:	f000 fd07 	bl	80012c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80008b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3738      	adds	r7, #56	; 0x38
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	e000ed04 	.word	0xe000ed04

080008c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b090      	sub	sp, #64	; 0x40
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80008d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d10a      	bne.n	80008ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80008d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008dc:	f383 8811 	msr	BASEPRI, r3
 80008e0:	f3bf 8f6f 	isb	sy
 80008e4:	f3bf 8f4f 	dsb	sy
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80008ea:	bf00      	nop
 80008ec:	e7fe      	b.n	80008ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d103      	bne.n	80008fc <xQueueGenericSendFromISR+0x3c>
 80008f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <xQueueGenericSendFromISR+0x40>
 80008fc:	2301      	movs	r3, #1
 80008fe:	e000      	b.n	8000902 <xQueueGenericSendFromISR+0x42>
 8000900:	2300      	movs	r3, #0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10a      	bne.n	800091c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090a:	f383 8811 	msr	BASEPRI, r3
 800090e:	f3bf 8f6f 	isb	sy
 8000912:	f3bf 8f4f 	dsb	sy
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000918:	bf00      	nop
 800091a:	e7fe      	b.n	800091a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d103      	bne.n	800092a <xQueueGenericSendFromISR+0x6a>
 8000922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000926:	2b01      	cmp	r3, #1
 8000928:	d101      	bne.n	800092e <xQueueGenericSendFromISR+0x6e>
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <xQueueGenericSendFromISR+0x70>
 800092e:	2300      	movs	r3, #0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10a      	bne.n	800094a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000938:	f383 8811 	msr	BASEPRI, r3
 800093c:	f3bf 8f6f 	isb	sy
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	623b      	str	r3, [r7, #32]
}
 8000946:	bf00      	nop
 8000948:	e7fe      	b.n	8000948 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800094a:	f001 fecd 	bl	80026e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800094e:	f3ef 8211 	mrs	r2, BASEPRI
 8000952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000956:	f383 8811 	msr	BASEPRI, r3
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	61fa      	str	r2, [r7, #28]
 8000964:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000966:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800096a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800096c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800096e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000972:	429a      	cmp	r2, r3
 8000974:	d302      	bcc.n	800097c <xQueueGenericSendFromISR+0xbc>
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d12f      	bne.n	80009dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800097c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800097e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	68b9      	ldr	r1, [r7, #8]
 8000990:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000992:	f000 f911 	bl	8000bb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000996:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800099a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099e:	d112      	bne.n	80009c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d016      	beq.n	80009d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009aa:	3324      	adds	r3, #36	; 0x24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fe9d 	bl	80016ec <xTaskRemoveFromEventList>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00e      	beq.n	80009d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00b      	beq.n	80009d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	e007      	b.n	80009d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80009c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ca:	3301      	adds	r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	b25a      	sxtb	r2, r3
 80009d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80009d6:	2301      	movs	r3, #1
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80009da:	e001      	b.n	80009e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80009ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80009ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3740      	adds	r7, #64	; 0x40
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10a      	bne.n	8000a28 <xQueueReceive+0x30>
	__asm volatile
 8000a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a16:	f383 8811 	msr	BASEPRI, r3
 8000a1a:	f3bf 8f6f 	isb	sy
 8000a1e:	f3bf 8f4f 	dsb	sy
 8000a22:	623b      	str	r3, [r7, #32]
}
 8000a24:	bf00      	nop
 8000a26:	e7fe      	b.n	8000a26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <xQueueReceive+0x3e>
 8000a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <xQueueReceive+0x42>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <xQueueReceive+0x44>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10a      	bne.n	8000a56 <xQueueReceive+0x5e>
	__asm volatile
 8000a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a44:	f383 8811 	msr	BASEPRI, r3
 8000a48:	f3bf 8f6f 	isb	sy
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	61fb      	str	r3, [r7, #28]
}
 8000a52:	bf00      	nop
 8000a54:	e7fe      	b.n	8000a54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a56:	f001 f807 	bl	8001a68 <xTaskGetSchedulerState>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <xQueueReceive+0x6e>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <xQueueReceive+0x72>
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <xQueueReceive+0x74>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10a      	bne.n	8000a86 <xQueueReceive+0x8e>
	__asm volatile
 8000a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a74:	f383 8811 	msr	BASEPRI, r3
 8000a78:	f3bf 8f6f 	isb	sy
 8000a7c:	f3bf 8f4f 	dsb	sy
 8000a80:	61bb      	str	r3, [r7, #24]
}
 8000a82:	bf00      	nop
 8000a84:	e7fe      	b.n	8000a84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a86:	f001 fd4d 	bl	8002524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d01f      	beq.n	8000ad6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000a96:	68b9      	ldr	r1, [r7, #8]
 8000a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a9a:	f000 f8f7 	bl	8000c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	1e5a      	subs	r2, r3, #1
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d00f      	beq.n	8000ace <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab0:	3310      	adds	r3, #16
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fe1a 	bl	80016ec <xTaskRemoveFromEventList>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d007      	beq.n	8000ace <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000abe:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <xQueueReceive+0x1bc>)
 8000ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	f3bf 8f4f 	dsb	sy
 8000aca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000ace:	f001 fd59 	bl	8002584 <vPortExitCritical>
				return pdPASS;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e069      	b.n	8000baa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d103      	bne.n	8000ae4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000adc:	f001 fd52 	bl	8002584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e062      	b.n	8000baa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d106      	bne.n	8000af8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fe60 	bl	80017b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000af8:	f001 fd44 	bl	8002584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000afc:	f000 fbd2 	bl	80012a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000b00:	f001 fd10 	bl	8002524 <vPortEnterCritical>
 8000b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d103      	bne.n	8000b1a <xQueueReceive+0x122>
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b26:	d103      	bne.n	8000b30 <xQueueReceive+0x138>
 8000b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b30:	f001 fd28 	bl	8002584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b34:	1d3a      	adds	r2, r7, #4
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fe4f 	bl	80017e0 <xTaskCheckForTimeOut>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d123      	bne.n	8000b90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b4a:	f000 f917 	bl	8000d7c <prvIsQueueEmpty>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d017      	beq.n	8000b84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	3324      	adds	r3, #36	; 0x24
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fd75 	bl	800164c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b64:	f000 f8b8 	bl	8000cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000b68:	f000 fbaa 	bl	80012c0 <xTaskResumeAll>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d189      	bne.n	8000a86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <xQueueReceive+0x1bc>)
 8000b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	f3bf 8f4f 	dsb	sy
 8000b7e:	f3bf 8f6f 	isb	sy
 8000b82:	e780      	b.n	8000a86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b86:	f000 f8a7 	bl	8000cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b8a:	f000 fb99 	bl	80012c0 <xTaskResumeAll>
 8000b8e:	e77a      	b.n	8000a86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b92:	f000 f8a1 	bl	8000cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b96:	f000 fb93 	bl	80012c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b9c:	f000 f8ee 	bl	8000d7c <prvIsQueueEmpty>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f43f af6f 	beq.w	8000a86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000ba8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3730      	adds	r7, #48	; 0x30
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000ed04 	.word	0xe000ed04

08000bb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10d      	bne.n	8000bf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 ff5e 	bl	8001aa4 <xTaskPriorityDisinherit>
 8000be8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	e043      	b.n	8000c7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d119      	bne.n	8000c2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6858      	ldr	r0, [r3, #4]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	461a      	mov	r2, r3
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	f001 ffc6 	bl	8002b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	441a      	add	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d32b      	bcc.n	8000c7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	e026      	b.n	8000c7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	68d8      	ldr	r0, [r3, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	461a      	mov	r2, r3
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	f001 ffac 	bl	8002b94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	425b      	negs	r3, r3
 8000c46:	441a      	add	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	425b      	negs	r3, r3
 8000c62:	441a      	add	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d105      	bne.n	8000c7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000c82:	697b      	ldr	r3, [r7, #20]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d018      	beq.n	8000cd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	441a      	add	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d303      	bcc.n	8000cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68d9      	ldr	r1, [r3, #12]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	461a      	mov	r2, r3
 8000cca:	6838      	ldr	r0, [r7, #0]
 8000ccc:	f001 ff62 	bl	8002b94 <memcpy>
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000ce0:	f001 fc20 	bl	8002524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000cec:	e011      	b.n	8000d12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d012      	beq.n	8000d1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3324      	adds	r3, #36	; 0x24
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fcf6 	bl	80016ec <xTaskRemoveFromEventList>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000d06:	f000 fdcd 	bl	80018a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	dce9      	bgt.n	8000cee <prvUnlockQueue+0x16>
 8000d1a:	e000      	b.n	8000d1e <prvUnlockQueue+0x46>
					break;
 8000d1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	22ff      	movs	r2, #255	; 0xff
 8000d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000d26:	f001 fc2d 	bl	8002584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000d2a:	f001 fbfb 	bl	8002524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d36:	e011      	b.n	8000d5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d012      	beq.n	8000d66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3310      	adds	r3, #16
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fcd1 	bl	80016ec <xTaskRemoveFromEventList>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000d50:	f000 fda8 	bl	80018a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	dce9      	bgt.n	8000d38 <prvUnlockQueue+0x60>
 8000d64:	e000      	b.n	8000d68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000d66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	22ff      	movs	r2, #255	; 0xff
 8000d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000d70:	f001 fc08 	bl	8002584 <vPortExitCritical>
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000d84:	f001 fbce 	bl	8002524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e001      	b.n	8000d9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000d9a:	f001 fbf3 	bl	8002584 <vPortExitCritical>

	return xReturn;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000db0:	f001 fbb8 	bl	8002524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d102      	bne.n	8000dc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e001      	b.n	8000dca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000dca:	f001 fbdb 	bl	8002584 <vPortExitCritical>

	return xReturn;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e014      	b.n	8000e12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000de8:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <vQueueAddToRegistry+0x50>)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10b      	bne.n	8000e0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <vQueueAddToRegistry+0x50>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <vQueueAddToRegistry+0x50>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4413      	add	r3, r2
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8000e0a:	e006      	b.n	8000e1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	d9e7      	bls.n	8000de8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200006e4 	.word	0x200006e4

08000e2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000e3c:	f001 fb72 	bl	8002524 <vPortEnterCritical>
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d103      	bne.n	8000e56 <vQueueWaitForMessageRestricted+0x2a>
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e62:	d103      	bne.n	8000e6c <vQueueWaitForMessageRestricted+0x40>
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e6c:	f001 fb8a 	bl	8002584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d106      	bne.n	8000e86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3324      	adds	r3, #36	; 0x24
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	68b9      	ldr	r1, [r7, #8]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fc07 	bl	8001694 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff26 	bl	8000cd8 <prvUnlockQueue>
	}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08e      	sub	sp, #56	; 0x38
 8000e98:	af04      	add	r7, sp, #16
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8000ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10a      	bne.n	8000ebe <xTaskCreateStatic+0x2a>
	__asm volatile
 8000ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eac:	f383 8811 	msr	BASEPRI, r3
 8000eb0:	f3bf 8f6f 	isb	sy
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	623b      	str	r3, [r7, #32]
}
 8000eba:	bf00      	nop
 8000ebc:	e7fe      	b.n	8000ebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8000ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10a      	bne.n	8000eda <xTaskCreateStatic+0x46>
	__asm volatile
 8000ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec8:	f383 8811 	msr	BASEPRI, r3
 8000ecc:	f3bf 8f6f 	isb	sy
 8000ed0:	f3bf 8f4f 	dsb	sy
 8000ed4:	61fb      	str	r3, [r7, #28]
}
 8000ed6:	bf00      	nop
 8000ed8:	e7fe      	b.n	8000ed8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8000eda:	235c      	movs	r3, #92	; 0x5c
 8000edc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	2b5c      	cmp	r3, #92	; 0x5c
 8000ee2:	d00a      	beq.n	8000efa <xTaskCreateStatic+0x66>
	__asm volatile
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	61bb      	str	r3, [r7, #24]
}
 8000ef6:	bf00      	nop
 8000ef8:	e7fe      	b.n	8000ef8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8000efa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8000efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d01e      	beq.n	8000f40 <xTaskCreateStatic+0xac>
 8000f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d01b      	beq.n	8000f40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	2202      	movs	r2, #2
 8000f16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9303      	str	r3, [sp, #12]
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f000 f850 	bl	8000fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f3a:	f000 f8dd 	bl	80010f8 <prvAddNewTaskToReadyList>
 8000f3e:	e001      	b.n	8000f44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8000f44:	697b      	ldr	r3, [r7, #20]
	}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3728      	adds	r7, #40	; 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b08c      	sub	sp, #48	; 0x30
 8000f52:	af04      	add	r7, sp, #16
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fc00 	bl	8002768 <pvPortMalloc>
 8000f68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00e      	beq.n	8000f8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000f70:	205c      	movs	r0, #92	; 0x5c
 8000f72:	f001 fbf9 	bl	8002768 <pvPortMalloc>
 8000f76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
 8000f84:	e005      	b.n	8000f92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f001 fcba 	bl	8002900 <vPortFree>
 8000f8c:	e001      	b.n	8000f92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d017      	beq.n	8000fc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9303      	str	r3, [sp, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f80e 	bl	8000fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000fbc:	69f8      	ldr	r0, [r7, #28]
 8000fbe:	f000 f89b 	bl	80010f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	e002      	b.n	8000fce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000fce:	69bb      	ldr	r3, [r7, #24]
	}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	21a5      	movs	r1, #165	; 0xa5
 8000ff2:	f001 fda3 	bl	8002b3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001000:	3b01      	subs	r3, #1
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	f023 0307 	bic.w	r3, r3, #7
 800100e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00a      	beq.n	8001030 <prvInitialiseNewTask+0x58>
	__asm volatile
 800101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101e:	f383 8811 	msr	BASEPRI, r3
 8001022:	f3bf 8f6f 	isb	sy
 8001026:	f3bf 8f4f 	dsb	sy
 800102a:	617b      	str	r3, [r7, #20]
}
 800102c:	bf00      	nop
 800102e:	e7fe      	b.n	800102e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d01f      	beq.n	8001076 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e012      	b.n	8001062 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	4413      	add	r3, r2
 8001042:	7819      	ldrb	r1, [r3, #0]
 8001044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	4413      	add	r3, r2
 800104a:	3334      	adds	r3, #52	; 0x34
 800104c:	460a      	mov	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	3301      	adds	r3, #1
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d9e9      	bls.n	800103c <prvInitialiseNewTask+0x64>
 8001068:	e000      	b.n	800106c <prvInitialiseNewTask+0x94>
			{
				break;
 800106a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001074:	e003      	b.n	800107e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	2b37      	cmp	r3, #55	; 0x37
 8001082:	d901      	bls.n	8001088 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001084:	2337      	movs	r3, #55	; 0x37
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	2200      	movs	r2, #0
 8001098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109c:	3304      	adds	r3, #4
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f978 	bl	8000394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80010a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a6:	3318      	adds	r3, #24
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f973 	bl	8000394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80010be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	2200      	movs	r2, #0
 80010c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80010ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	69b8      	ldr	r0, [r7, #24]
 80010d8:	f001 f8f4 	bl	80022c4 <pxPortInitialiseStack>
 80010dc:	4602      	mov	r2, r0
 80010de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001100:	f001 fa10 	bl	8002524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <prvAddNewTaskToReadyList+0xc4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <prvAddNewTaskToReadyList+0xc4>)
 800110c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <prvAddNewTaskToReadyList+0xc8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001116:	4a2a      	ldr	r2, [pc, #168]	; (80011c0 <prvAddNewTaskToReadyList+0xc8>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <prvAddNewTaskToReadyList+0xc4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d110      	bne.n	8001146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001124:	f000 fbe2 	bl	80018ec <prvInitialiseTaskLists>
 8001128:	e00d      	b.n	8001146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <prvAddNewTaskToReadyList+0xcc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <prvAddNewTaskToReadyList+0xc8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	429a      	cmp	r2, r3
 800113e:	d802      	bhi.n	8001146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001140:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <prvAddNewTaskToReadyList+0xc8>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <prvAddNewTaskToReadyList+0xd0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <prvAddNewTaskToReadyList+0xd0>)
 800114e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <prvAddNewTaskToReadyList+0xd0>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <prvAddNewTaskToReadyList+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d903      	bls.n	800116c <prvAddNewTaskToReadyList+0x74>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	4a18      	ldr	r2, [pc, #96]	; (80011cc <prvAddNewTaskToReadyList+0xd4>)
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <prvAddNewTaskToReadyList+0xd8>)
 800117a:	441a      	add	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3304      	adds	r3, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f7ff f913 	bl	80003ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001188:	f001 f9fc 	bl	8002584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <prvAddNewTaskToReadyList+0xcc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00e      	beq.n	80011b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <prvAddNewTaskToReadyList+0xc8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	429a      	cmp	r2, r3
 80011a0:	d207      	bcs.n	80011b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <prvAddNewTaskToReadyList+0xdc>)
 80011a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	f3bf 8f4f 	dsb	sy
 80011ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000bf8 	.word	0x20000bf8
 80011c0:	20000724 	.word	0x20000724
 80011c4:	20000c04 	.word	0x20000c04
 80011c8:	20000c14 	.word	0x20000c14
 80011cc:	20000c00 	.word	0x20000c00
 80011d0:	20000728 	.word	0x20000728
 80011d4:	e000ed04 	.word	0xe000ed04

080011d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80011e6:	463a      	mov	r2, r7
 80011e8:	1d39      	adds	r1, r7, #4
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f87c 	bl	80002ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80011f4:	6839      	ldr	r1, [r7, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	9202      	str	r2, [sp, #8]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	460a      	mov	r2, r1
 8001206:	4921      	ldr	r1, [pc, #132]	; (800128c <vTaskStartScheduler+0xb4>)
 8001208:	4821      	ldr	r0, [pc, #132]	; (8001290 <vTaskStartScheduler+0xb8>)
 800120a:	f7ff fe43 	bl	8000e94 <xTaskCreateStatic>
 800120e:	4603      	mov	r3, r0
 8001210:	4a20      	ldr	r2, [pc, #128]	; (8001294 <vTaskStartScheduler+0xbc>)
 8001212:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <vTaskStartScheduler+0xbc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800121c:	2301      	movs	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e001      	b.n	8001226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d102      	bne.n	8001232 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800122c:	f000 fcfc 	bl	8001c28 <xTimerCreateTimerTask>
 8001230:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d116      	bne.n	8001266 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123c:	f383 8811 	msr	BASEPRI, r3
 8001240:	f3bf 8f6f 	isb	sy
 8001244:	f3bf 8f4f 	dsb	sy
 8001248:	613b      	str	r3, [r7, #16]
}
 800124a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <vTaskStartScheduler+0xc0>)
 800124e:	f04f 32ff 	mov.w	r2, #4294967295
 8001252:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <vTaskStartScheduler+0xc4>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <vTaskStartScheduler+0xc8>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001260:	f001 f8be 	bl	80023e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001264:	e00e      	b.n	8001284 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d10a      	bne.n	8001284 <vTaskStartScheduler+0xac>
	__asm volatile
 800126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001272:	f383 8811 	msr	BASEPRI, r3
 8001276:	f3bf 8f6f 	isb	sy
 800127a:	f3bf 8f4f 	dsb	sy
 800127e:	60fb      	str	r3, [r7, #12]
}
 8001280:	bf00      	nop
 8001282:	e7fe      	b.n	8001282 <vTaskStartScheduler+0xaa>
}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08002bd8 	.word	0x08002bd8
 8001290:	080018bd 	.word	0x080018bd
 8001294:	20000c1c 	.word	0x20000c1c
 8001298:	20000c18 	.word	0x20000c18
 800129c:	20000c04 	.word	0x20000c04
 80012a0:	20000bfc 	.word	0x20000bfc

080012a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <vTaskSuspendAll+0x18>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a03      	ldr	r2, [pc, #12]	; (80012bc <vTaskSuspendAll+0x18>)
 80012b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	20000c20 	.word	0x20000c20

080012c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80012ce:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <xTaskResumeAll+0x118>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10a      	bne.n	80012ec <xTaskResumeAll+0x2c>
	__asm volatile
 80012d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012da:	f383 8811 	msr	BASEPRI, r3
 80012de:	f3bf 8f6f 	isb	sy
 80012e2:	f3bf 8f4f 	dsb	sy
 80012e6:	603b      	str	r3, [r7, #0]
}
 80012e8:	bf00      	nop
 80012ea:	e7fe      	b.n	80012ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80012ec:	f001 f91a 	bl	8002524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <xTaskResumeAll+0x118>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <xTaskResumeAll+0x118>)
 80012f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <xTaskResumeAll+0x118>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d162      	bne.n	80013c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <xTaskResumeAll+0x11c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d05e      	beq.n	80013c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800130a:	e02f      	b.n	800136c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <xTaskResumeAll+0x120>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3318      	adds	r3, #24
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f8a5 	bl	8000468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3304      	adds	r3, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8a0 	bl	8000468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <xTaskResumeAll+0x124>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d903      	bls.n	800133c <xTaskResumeAll+0x7c>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <xTaskResumeAll+0x124>)
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <xTaskResumeAll+0x128>)
 800134a:	441a      	add	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3304      	adds	r3, #4
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7ff f82b 	bl	80003ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <xTaskResumeAll+0x12c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	429a      	cmp	r2, r3
 8001364:	d302      	bcc.n	800136c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <xTaskResumeAll+0x130>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <xTaskResumeAll+0x120>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1cb      	bne.n	800130c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800137a:	f000 fb55 	bl	8001a28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <xTaskResumeAll+0x134>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d010      	beq.n	80013ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800138a:	f000 f847 	bl	800141c <xTaskIncrementTick>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <xTaskResumeAll+0x130>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3b01      	subs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f1      	bne.n	800138a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <xTaskResumeAll+0x134>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <xTaskResumeAll+0x130>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <xTaskResumeAll+0x138>)
 80013ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	f3bf 8f4f 	dsb	sy
 80013c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80013c8:	f001 f8dc 	bl	8002584 <vPortExitCritical>

	return xAlreadyYielded;
 80013cc:	68bb      	ldr	r3, [r7, #8]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000c20 	.word	0x20000c20
 80013dc:	20000bf8 	.word	0x20000bf8
 80013e0:	20000bb8 	.word	0x20000bb8
 80013e4:	20000c00 	.word	0x20000c00
 80013e8:	20000728 	.word	0x20000728
 80013ec:	20000724 	.word	0x20000724
 80013f0:	20000c0c 	.word	0x20000c0c
 80013f4:	20000c08 	.word	0x20000c08
 80013f8:	e000ed04 	.word	0xe000ed04

080013fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <xTaskGetTickCount+0x1c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000bfc 	.word	0x20000bfc

0800141c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001426:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <xTaskIncrementTick+0x148>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 808f 	bne.w	800154e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001430:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <xTaskIncrementTick+0x14c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <xTaskIncrementTick+0x14c>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d120      	bne.n	8001486 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001444:	4b49      	ldr	r3, [pc, #292]	; (800156c <xTaskIncrementTick+0x150>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00a      	beq.n	8001464 <xTaskIncrementTick+0x48>
	__asm volatile
 800144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001452:	f383 8811 	msr	BASEPRI, r3
 8001456:	f3bf 8f6f 	isb	sy
 800145a:	f3bf 8f4f 	dsb	sy
 800145e:	603b      	str	r3, [r7, #0]
}
 8001460:	bf00      	nop
 8001462:	e7fe      	b.n	8001462 <xTaskIncrementTick+0x46>
 8001464:	4b41      	ldr	r3, [pc, #260]	; (800156c <xTaskIncrementTick+0x150>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <xTaskIncrementTick+0x154>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a3f      	ldr	r2, [pc, #252]	; (800156c <xTaskIncrementTick+0x150>)
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <xTaskIncrementTick+0x154>)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <xTaskIncrementTick+0x158>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <xTaskIncrementTick+0x158>)
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	f000 fad1 	bl	8001a28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001486:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <xTaskIncrementTick+0x15c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d349      	bcc.n	8001524 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <xTaskIncrementTick+0x150>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <xTaskIncrementTick+0x15c>)
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	601a      	str	r2, [r3, #0]
					break;
 80014a2:	e03f      	b.n	8001524 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <xTaskIncrementTick+0x150>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d203      	bcs.n	80014c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80014bc:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <xTaskIncrementTick+0x15c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80014c2:	e02f      	b.n	8001524 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	3304      	adds	r3, #4
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe ffcd 	bl	8000468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d004      	beq.n	80014e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3318      	adds	r3, #24
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe ffc4 	bl	8000468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <xTaskIncrementTick+0x160>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d903      	bls.n	80014f4 <xTaskIncrementTick+0xd8>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	4a22      	ldr	r2, [pc, #136]	; (800157c <xTaskIncrementTick+0x160>)
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <xTaskIncrementTick+0x164>)
 8001502:	441a      	add	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3304      	adds	r3, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f7fe ff4f 	bl	80003ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <xTaskIncrementTick+0x168>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	429a      	cmp	r2, r3
 800151c:	d3b8      	bcc.n	8001490 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001522:	e7b5      	b.n	8001490 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <xTaskIncrementTick+0x168>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152a:	4915      	ldr	r1, [pc, #84]	; (8001580 <xTaskIncrementTick+0x164>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d901      	bls.n	8001540 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <xTaskIncrementTick+0x16c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e004      	b.n	8001558 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <xTaskIncrementTick+0x170>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <xTaskIncrementTick+0x170>)
 8001556:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001558:	697b      	ldr	r3, [r7, #20]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000c20 	.word	0x20000c20
 8001568:	20000bfc 	.word	0x20000bfc
 800156c:	20000bb0 	.word	0x20000bb0
 8001570:	20000bb4 	.word	0x20000bb4
 8001574:	20000c10 	.word	0x20000c10
 8001578:	20000c18 	.word	0x20000c18
 800157c:	20000c00 	.word	0x20000c00
 8001580:	20000728 	.word	0x20000728
 8001584:	20000724 	.word	0x20000724
 8001588:	20000c0c 	.word	0x20000c0c
 800158c:	20000c08 	.word	0x20000c08

08001590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <vTaskSwitchContext+0xa8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <vTaskSwitchContext+0xac>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80015a4:	e041      	b.n	800162a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <vTaskSwitchContext+0xac>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <vTaskSwitchContext+0xb0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e010      	b.n	80015d6 <vTaskSwitchContext+0x46>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10a      	bne.n	80015d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80015ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015be:	f383 8811 	msr	BASEPRI, r3
 80015c2:	f3bf 8f6f 	isb	sy
 80015c6:	f3bf 8f4f 	dsb	sy
 80015ca:	607b      	str	r3, [r7, #4]
}
 80015cc:	bf00      	nop
 80015ce:	e7fe      	b.n	80015ce <vTaskSwitchContext+0x3e>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	491b      	ldr	r1, [pc, #108]	; (8001644 <vTaskSwitchContext+0xb4>)
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0e4      	beq.n	80015b4 <vTaskSwitchContext+0x24>
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4a13      	ldr	r2, [pc, #76]	; (8001644 <vTaskSwitchContext+0xb4>)
 80015f6:	4413      	add	r3, r2
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3308      	adds	r3, #8
 800160c:	429a      	cmp	r2, r3
 800160e:	d104      	bne.n	800161a <vTaskSwitchContext+0x8a>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <vTaskSwitchContext+0xb8>)
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <vTaskSwitchContext+0xb0>)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6013      	str	r3, [r2, #0]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000c20 	.word	0x20000c20
 800163c:	20000c0c 	.word	0x20000c0c
 8001640:	20000c00 	.word	0x20000c00
 8001644:	20000728 	.word	0x20000728
 8001648:	20000724 	.word	0x20000724

0800164c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10a      	bne.n	8001672 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001660:	f383 8811 	msr	BASEPRI, r3
 8001664:	f3bf 8f6f 	isb	sy
 8001668:	f3bf 8f4f 	dsb	sy
 800166c:	60fb      	str	r3, [r7, #12]
}
 800166e:	bf00      	nop
 8001670:	e7fe      	b.n	8001670 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <vTaskPlaceOnEventList+0x44>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3318      	adds	r3, #24
 8001678:	4619      	mov	r1, r3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe febb 	bl	80003f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001680:	2101      	movs	r1, #1
 8001682:	6838      	ldr	r0, [r7, #0]
 8001684:	f000 fa7c 	bl	8001b80 <prvAddCurrentTaskToDelayedList>
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000724 	.word	0x20000724

08001694 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10a      	bne.n	80016bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80016a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016aa:	f383 8811 	msr	BASEPRI, r3
 80016ae:	f3bf 8f6f 	isb	sy
 80016b2:	f3bf 8f4f 	dsb	sy
 80016b6:	617b      	str	r3, [r7, #20]
}
 80016b8:	bf00      	nop
 80016ba:	e7fe      	b.n	80016ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3318      	adds	r3, #24
 80016c2:	4619      	mov	r1, r3
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7fe fe72 	bl	80003ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	68b8      	ldr	r0, [r7, #8]
 80016da:	f000 fa51 	bl	8001b80 <prvAddCurrentTaskToDelayedList>
	}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000724 	.word	0x20000724

080016ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	60fb      	str	r3, [r7, #12]
}
 8001714:	bf00      	nop
 8001716:	e7fe      	b.n	8001716 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	3318      	adds	r3, #24
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fea3 	bl	8000468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <xTaskRemoveFromEventList+0xb0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d11d      	bne.n	8001766 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3304      	adds	r3, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fe9a 	bl	8000468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <xTaskRemoveFromEventList+0xb4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d903      	bls.n	8001748 <xTaskRemoveFromEventList+0x5c>
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <xTaskRemoveFromEventList+0xb4>)
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <xTaskRemoveFromEventList+0xb8>)
 8001756:	441a      	add	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	3304      	adds	r3, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f7fe fe25 	bl	80003ae <vListInsertEnd>
 8001764:	e005      	b.n	8001772 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	3318      	adds	r3, #24
 800176a:	4619      	mov	r1, r3
 800176c:	480e      	ldr	r0, [pc, #56]	; (80017a8 <xTaskRemoveFromEventList+0xbc>)
 800176e:	f7fe fe1e 	bl	80003ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <xTaskRemoveFromEventList+0xc0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	429a      	cmp	r2, r3
 800177e:	d905      	bls.n	800178c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001780:	2301      	movs	r3, #1
 8001782:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <xTaskRemoveFromEventList+0xc4>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e001      	b.n	8001790 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001790:	697b      	ldr	r3, [r7, #20]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000c20 	.word	0x20000c20
 80017a0:	20000c00 	.word	0x20000c00
 80017a4:	20000728 	.word	0x20000728
 80017a8:	20000bb8 	.word	0x20000bb8
 80017ac:	20000724 	.word	0x20000724
 80017b0:	20000c0c 	.word	0x20000c0c

080017b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <vTaskInternalSetTimeOutState+0x24>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <vTaskInternalSetTimeOutState+0x28>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	605a      	str	r2, [r3, #4]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20000c10 	.word	0x20000c10
 80017dc:	20000bfc 	.word	0x20000bfc

080017e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10a      	bne.n	8001806 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80017f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	613b      	str	r3, [r7, #16]
}
 8001802:	bf00      	nop
 8001804:	e7fe      	b.n	8001804 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800180c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	60fb      	str	r3, [r7, #12]
}
 800181e:	bf00      	nop
 8001820:	e7fe      	b.n	8001820 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001822:	f000 fe7f 	bl	8002524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <xTaskCheckForTimeOut+0xbc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183e:	d102      	bne.n	8001846 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	e023      	b.n	800188e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <xTaskCheckForTimeOut+0xc0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d007      	beq.n	8001862 <xTaskCheckForTimeOut+0x82>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	429a      	cmp	r2, r3
 800185a:	d302      	bcc.n	8001862 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800185c:	2301      	movs	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	e015      	b.n	800188e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	d20b      	bcs.n	8001884 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	1ad2      	subs	r2, r2, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff9b 	bl	80017b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e004      	b.n	800188e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800188a:	2301      	movs	r3, #1
 800188c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800188e:	f000 fe79 	bl	8002584 <vPortExitCritical>

	return xReturn;
 8001892:	69fb      	ldr	r3, [r7, #28]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000bfc 	.word	0x20000bfc
 80018a0:	20000c10 	.word	0x20000c10

080018a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <vTaskMissedYield+0x14>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	20000c0c 	.word	0x20000c0c

080018bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80018c4:	f000 f852 	bl	800196c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <prvIdleTask+0x28>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d9f9      	bls.n	80018c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <prvIdleTask+0x2c>)
 80018d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	f3bf 8f4f 	dsb	sy
 80018dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80018e0:	e7f0      	b.n	80018c4 <prvIdleTask+0x8>
 80018e2:	bf00      	nop
 80018e4:	20000728 	.word	0x20000728
 80018e8:	e000ed04 	.word	0xe000ed04

080018ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	e00c      	b.n	8001912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <prvInitialiseTaskLists+0x60>)
 8001904:	4413      	add	r3, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fd24 	bl	8000354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3301      	adds	r3, #1
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b37      	cmp	r3, #55	; 0x37
 8001916:	d9ef      	bls.n	80018f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <prvInitialiseTaskLists+0x64>)
 800191a:	f7fe fd1b 	bl	8000354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <prvInitialiseTaskLists+0x68>)
 8001920:	f7fe fd18 	bl	8000354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <prvInitialiseTaskLists+0x6c>)
 8001926:	f7fe fd15 	bl	8000354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800192a:	480c      	ldr	r0, [pc, #48]	; (800195c <prvInitialiseTaskLists+0x70>)
 800192c:	f7fe fd12 	bl	8000354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001930:	480b      	ldr	r0, [pc, #44]	; (8001960 <prvInitialiseTaskLists+0x74>)
 8001932:	f7fe fd0f 	bl	8000354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <prvInitialiseTaskLists+0x78>)
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <prvInitialiseTaskLists+0x64>)
 800193a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <prvInitialiseTaskLists+0x7c>)
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <prvInitialiseTaskLists+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000728 	.word	0x20000728
 8001950:	20000b88 	.word	0x20000b88
 8001954:	20000b9c 	.word	0x20000b9c
 8001958:	20000bb8 	.word	0x20000bb8
 800195c:	20000bcc 	.word	0x20000bcc
 8001960:	20000be4 	.word	0x20000be4
 8001964:	20000bb0 	.word	0x20000bb0
 8001968:	20000bb4 	.word	0x20000bb4

0800196c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001972:	e019      	b.n	80019a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001974:	f000 fdd6 	bl	8002524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <prvCheckTasksWaitingTermination+0x50>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd6f 	bl	8000468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <prvCheckTasksWaitingTermination+0x54>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3b01      	subs	r3, #1
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <prvCheckTasksWaitingTermination+0x54>)
 8001992:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <prvCheckTasksWaitingTermination+0x58>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3b01      	subs	r3, #1
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <prvCheckTasksWaitingTermination+0x58>)
 800199c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800199e:	f000 fdf1 	bl	8002584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f810 	bl	80019c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <prvCheckTasksWaitingTermination+0x58>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e1      	bne.n	8001974 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000bcc 	.word	0x20000bcc
 80019c0:	20000bf8 	.word	0x20000bf8
 80019c4:	20000be0 	.word	0x20000be0

080019c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d108      	bne.n	80019ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 ff8e 	bl	8002900 <vPortFree>
				vPortFree( pxTCB );
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 ff8b 	bl	8002900 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80019ea:	e018      	b.n	8001a1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d103      	bne.n	80019fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 ff82 	bl	8002900 <vPortFree>
	}
 80019fc:	e00f      	b.n	8001a1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d00a      	beq.n	8001a1e <prvDeleteTCB+0x56>
	__asm volatile
 8001a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0c:	f383 8811 	msr	BASEPRI, r3
 8001a10:	f3bf 8f6f 	isb	sy
 8001a14:	f3bf 8f4f 	dsb	sy
 8001a18:	60fb      	str	r3, [r7, #12]
}
 8001a1a:	bf00      	nop
 8001a1c:	e7fe      	b.n	8001a1c <prvDeleteTCB+0x54>
	}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <prvResetNextTaskUnblockTime+0x38>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <prvResetNextTaskUnblockTime+0x3c>)
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001a40:	e008      	b.n	8001a54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <prvResetNextTaskUnblockTime+0x38>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <prvResetNextTaskUnblockTime+0x3c>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	20000bb0 	.word	0x20000bb0
 8001a64:	20000c18 	.word	0x20000c18

08001a68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <xTaskGetSchedulerState+0x34>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001a76:	2301      	movs	r3, #1
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	e008      	b.n	8001a8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <xTaskGetSchedulerState+0x38>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001a84:	2302      	movs	r3, #2
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	e001      	b.n	8001a8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001a8e:	687b      	ldr	r3, [r7, #4]
	}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	20000c04 	.word	0x20000c04
 8001aa0:	20000c20 	.word	0x20000c20

08001aa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d056      	beq.n	8001b68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <xTaskPriorityDisinherit+0xd0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d00a      	beq.n	8001ada <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8001ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac8:	f383 8811 	msr	BASEPRI, r3
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	f3bf 8f4f 	dsb	sy
 8001ad4:	60fb      	str	r3, [r7, #12]
}
 8001ad6:	bf00      	nop
 8001ad8:	e7fe      	b.n	8001ad8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8001ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae6:	f383 8811 	msr	BASEPRI, r3
 8001aea:	f3bf 8f6f 	isb	sy
 8001aee:	f3bf 8f4f 	dsb	sy
 8001af2:	60bb      	str	r3, [r7, #8]
}
 8001af4:	bf00      	nop
 8001af6:	e7fe      	b.n	8001af6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afc:	1e5a      	subs	r2, r3, #1
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d02c      	beq.n	8001b68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d128      	bne.n	8001b68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fca4 	bl	8000468 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <xTaskPriorityDisinherit+0xd4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d903      	bls.n	8001b48 <xTaskPriorityDisinherit+0xa4>
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <xTaskPriorityDisinherit+0xd4>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <xTaskPriorityDisinherit+0xd8>)
 8001b56:	441a      	add	r2, r3
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f7fe fc25 	bl	80003ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001b64:	2301      	movs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001b68:	697b      	ldr	r3, [r7, #20]
	}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000724 	.word	0x20000724
 8001b78:	20000c00 	.word	0x20000c00
 8001b7c:	20000728 	.word	0x20000728

08001b80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <prvAddCurrentTaskToDelayedList+0x90>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3304      	adds	r3, #4
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc66 	bl	8000468 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d10a      	bne.n	8001bba <prvAddCurrentTaskToDelayedList+0x3a>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4819      	ldr	r0, [pc, #100]	; (8001c18 <prvAddCurrentTaskToDelayedList+0x98>)
 8001bb4:	f7fe fbfb 	bl	80003ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001bb8:	e026      	b.n	8001c08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d209      	bcs.n	8001be6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f7fe fc09 	bl	80003f6 <vListInsert>
}
 8001be4:	e010      	b.n	8001c08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f7fe fbff 	bl	80003f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d202      	bcs.n	8001c08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000bfc 	.word	0x20000bfc
 8001c14:	20000724 	.word	0x20000724
 8001c18:	20000be4 	.word	0x20000be4
 8001c1c:	20000bb4 	.word	0x20000bb4
 8001c20:	20000bb0 	.word	0x20000bb0
 8001c24:	20000c18 	.word	0x20000c18

08001c28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001c32:	f000 fb07 	bl	8002244 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <xTimerCreateTimerTask+0x80>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d021      	beq.n	8001c82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001c46:	1d3a      	adds	r2, r7, #4
 8001c48:	f107 0108 	add.w	r1, r7, #8
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fb65 	bl	8000320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	9202      	str	r2, [sp, #8]
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	2302      	movs	r3, #2
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	460a      	mov	r2, r1
 8001c68:	4910      	ldr	r1, [pc, #64]	; (8001cac <xTimerCreateTimerTask+0x84>)
 8001c6a:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <xTimerCreateTimerTask+0x88>)
 8001c6c:	f7ff f912 	bl	8000e94 <xTaskCreateStatic>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <xTimerCreateTimerTask+0x8c>)
 8001c74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <xTimerCreateTimerTask+0x8c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8001c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8c:	f383 8811 	msr	BASEPRI, r3
 8001c90:	f3bf 8f6f 	isb	sy
 8001c94:	f3bf 8f4f 	dsb	sy
 8001c98:	613b      	str	r3, [r7, #16]
}
 8001c9a:	bf00      	nop
 8001c9c:	e7fe      	b.n	8001c9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8001c9e:	697b      	ldr	r3, [r7, #20]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000c54 	.word	0x20000c54
 8001cac:	08002be0 	.word	0x08002be0
 8001cb0:	08001ded 	.word	0x08001ded
 8001cb4:	20000c58 	.word	0x20000c58

08001cb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8001cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	623b      	str	r3, [r7, #32]
}
 8001ce2:	bf00      	nop
 8001ce4:	e7fe      	b.n	8001ce4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <xTimerGenericCommand+0x98>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d02a      	beq.n	8001d44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	dc18      	bgt.n	8001d32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001d00:	f7ff feb2 	bl	8001a68 <xTaskGetSchedulerState>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d109      	bne.n	8001d1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <xTimerGenericCommand+0x98>)
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	f107 0110 	add.w	r1, r7, #16
 8001d12:	2300      	movs	r3, #0
 8001d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d16:	f7fe fcd5 	bl	80006c4 <xQueueGenericSend>
 8001d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8001d1c:	e012      	b.n	8001d44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <xTimerGenericCommand+0x98>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f107 0110 	add.w	r1, r7, #16
 8001d26:	2300      	movs	r3, #0
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f7fe fccb 	bl	80006c4 <xQueueGenericSend>
 8001d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8001d30:	e008      	b.n	8001d44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <xTimerGenericCommand+0x98>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	f107 0110 	add.w	r1, r7, #16
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	f7fe fdbf 	bl	80008c0 <xQueueGenericSendFromISR>
 8001d42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000c54 	.word	0x20000c54

08001d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d5e:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <prvProcessExpiredTimer+0x94>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fb7b 	bl	8000468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d022      	beq.n	8001dc6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	18d1      	adds	r1, r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	6978      	ldr	r0, [r7, #20]
 8001d8e:	f000 f8d1 	bl	8001f34 <prvInsertTimerInActiveList>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01f      	beq.n	8001dd8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	2100      	movs	r1, #0
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff88 	bl	8001cb8 <xTimerGenericCommand>
 8001da8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d113      	bne.n	8001dd8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	60fb      	str	r3, [r7, #12]
}
 8001dc2:	bf00      	nop
 8001dc4:	e7fe      	b.n	8001dc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	6978      	ldr	r0, [r7, #20]
 8001dde:	4798      	blx	r3
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000c4c 	.word	0x20000c4c

08001dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f857 	bl	8001eac <prvGetNextExpireTime>
 8001dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4619      	mov	r1, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f803 	bl	8001e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8001e0a:	f000 f8d5 	bl	8001fb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e0e:	e7f1      	b.n	8001df4 <prvTimerTask+0x8>

08001e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001e1a:	f7ff fa43 	bl	80012a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f866 	bl	8001ef4 <prvSampleTimeNow>
 8001e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d130      	bne.n	8001e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <prvProcessTimerOrBlockTask+0x3c>
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d806      	bhi.n	8001e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8001e3e:	f7ff fa3f 	bl	80012c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff85 	bl	8001d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8001e4a:	e024      	b.n	8001e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <prvProcessTimerOrBlockTask+0x90>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <prvProcessTimerOrBlockTask+0x50>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <prvProcessTimerOrBlockTask+0x52>
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <prvProcessTimerOrBlockTask+0x94>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f7fe ffdb 	bl	8000e2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001e76:	f7ff fa23 	bl	80012c0 <xTaskResumeAll>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <prvProcessTimerOrBlockTask+0x98>)
 8001e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	f3bf 8f6f 	isb	sy
}
 8001e90:	e001      	b.n	8001e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8001e92:	f7ff fa15 	bl	80012c0 <xTaskResumeAll>
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000c50 	.word	0x20000c50
 8001ea4:	20000c54 	.word	0x20000c54
 8001ea8:	e000ed04 	.word	0xe000ed04

08001eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <prvGetNextExpireTime+0x44>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <prvGetNextExpireTime+0x16>
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	e000      	b.n	8001ec4 <prvGetNextExpireTime+0x18>
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <prvGetNextExpireTime+0x44>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e001      	b.n	8001ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000c4c 	.word	0x20000c4c

08001ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8001efc:	f7ff fa7e 	bl	80013fc <xTaskGetTickCount>
 8001f00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <prvSampleTimeNow+0x3c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d205      	bcs.n	8001f18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8001f0c:	f000 f936 	bl	800217c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e002      	b.n	8001f1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <prvSampleTimeNow+0x3c>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8001f24:	68fb      	ldr	r3, [r7, #12]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000c5c 	.word	0x20000c5c

08001f34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d812      	bhi.n	8001f80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d302      	bcc.n	8001f6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e01b      	b.n	8001fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <prvInsertTimerInActiveList+0x7c>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3304      	adds	r3, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f7fe fa3c 	bl	80003f6 <vListInsert>
 8001f7e:	e012      	b.n	8001fa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d206      	bcs.n	8001f96 <prvInsertTimerInActiveList+0x62>
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d302      	bcc.n	8001f96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e007      	b.n	8001fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <prvInsertTimerInActiveList+0x80>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f7fe fa28 	bl	80003f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8001fa6:	697b      	ldr	r3, [r7, #20]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000c50 	.word	0x20000c50
 8001fb4:	20000c4c 	.word	0x20000c4c

08001fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08e      	sub	sp, #56	; 0x38
 8001fbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001fbe:	e0ca      	b.n	8002156 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	da18      	bge.n	8001ff8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	3304      	adds	r3, #4
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8001fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10a      	bne.n	8001fe8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	61fb      	str	r3, [r7, #28]
}
 8001fe4:	bf00      	nop
 8001fe6:	e7fe      	b.n	8001fe6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fee:	6850      	ldr	r0, [r2, #4]
 8001ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ff2:	6892      	ldr	r2, [r2, #8]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f2c0 80ab 	blt.w	8002156 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	3304      	adds	r3, #4
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa29 	bl	8000468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002016:	463b      	mov	r3, r7
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff6b 	bl	8001ef4 <prvSampleTimeNow>
 800201e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b09      	cmp	r3, #9
 8002024:	f200 8096 	bhi.w	8002154 <prvProcessReceivedCommands+0x19c>
 8002028:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <prvProcessReceivedCommands+0x78>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	08002059 	.word	0x08002059
 8002034:	08002059 	.word	0x08002059
 8002038:	08002059 	.word	0x08002059
 800203c:	080020cd 	.word	0x080020cd
 8002040:	080020e1 	.word	0x080020e1
 8002044:	0800212b 	.word	0x0800212b
 8002048:	08002059 	.word	0x08002059
 800204c:	08002059 	.word	0x08002059
 8002050:	080020cd 	.word	0x080020cd
 8002054:	080020e1 	.word	0x080020e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	18d1      	adds	r1, r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002078:	f7ff ff5c 	bl	8001f34 <prvInsertTimerInActiveList>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d069      	beq.n	8002156 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002088:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d05e      	beq.n	8002156 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	441a      	add	r2, r3
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2300      	movs	r3, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020aa:	f7ff fe05 	bl	8001cb8 <xTimerGenericCommand>
 80020ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d14f      	bne.n	8002156 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	61bb      	str	r3, [r7, #24]
}
 80020c8:	bf00      	nop
 80020ca:	e7fe      	b.n	80020ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80020de:	e03a      	b.n	8002156 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	617b      	str	r3, [r7, #20]
}
 8002112:	bf00      	nop
 8002114:	e7fe      	b.n	8002114 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	18d1      	adds	r1, r2, r3
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002124:	f7ff ff06 	bl	8001f34 <prvInsertTimerInActiveList>
					break;
 8002128:	e015      	b.n	8002156 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d103      	bne.n	8002140 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800213a:	f000 fbe1 	bl	8002900 <vPortFree>
 800213e:	e00a      	b.n	8002156 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	b2da      	uxtb	r2, r3
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002152:	e000      	b.n	8002156 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8002154:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <prvProcessReceivedCommands+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1d39      	adds	r1, r7, #4
 800215c:	2200      	movs	r2, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fc4a 	bl	80009f8 <xQueueReceive>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	f47f af2a 	bne.w	8001fc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3730      	adds	r7, #48	; 0x30
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000c54 	.word	0x20000c54

0800217c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002182:	e048      	b.n	8002216 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <prvSwitchTimerLists+0xc0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800218e:	4b2b      	ldr	r3, [pc, #172]	; (800223c <prvSwitchTimerLists+0xc0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3304      	adds	r3, #4
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f963 	bl	8000468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d02e      	beq.n	8002216 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d90e      	bls.n	80021e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <prvSwitchTimerLists+0xc0>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3304      	adds	r3, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fe f908 	bl	80003f6 <vListInsert>
 80021e6:	e016      	b.n	8002216 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80021e8:	2300      	movs	r3, #0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	2300      	movs	r3, #0
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	2100      	movs	r1, #0
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff fd60 	bl	8001cb8 <xTimerGenericCommand>
 80021f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	603b      	str	r3, [r7, #0]
}
 8002212:	bf00      	nop
 8002214:	e7fe      	b.n	8002214 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <prvSwitchTimerLists+0xc0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1b1      	bne.n	8002184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <prvSwitchTimerLists+0xc0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <prvSwitchTimerLists+0xc4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <prvSwitchTimerLists+0xc0>)
 800222c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <prvSwitchTimerLists+0xc4>)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000c4c 	.word	0x20000c4c
 8002240:	20000c50 	.word	0x20000c50

08002244 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800224a:	f000 f96b 	bl	8002524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <prvCheckForValidListAndQueue+0x60>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d120      	bne.n	8002298 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002256:	4814      	ldr	r0, [pc, #80]	; (80022a8 <prvCheckForValidListAndQueue+0x64>)
 8002258:	f7fe f87c 	bl	8000354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800225c:	4813      	ldr	r0, [pc, #76]	; (80022ac <prvCheckForValidListAndQueue+0x68>)
 800225e:	f7fe f879 	bl	8000354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <prvCheckForValidListAndQueue+0x6c>)
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <prvCheckForValidListAndQueue+0x64>)
 8002266:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <prvCheckForValidListAndQueue+0x70>)
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <prvCheckForValidListAndQueue+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800226e:	2300      	movs	r3, #0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <prvCheckForValidListAndQueue+0x74>)
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <prvCheckForValidListAndQueue+0x78>)
 8002276:	2110      	movs	r1, #16
 8002278:	200a      	movs	r0, #10
 800227a:	f7fe f987 	bl	800058c <xQueueGenericCreateStatic>
 800227e:	4603      	mov	r3, r0
 8002280:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <prvCheckForValidListAndQueue+0x60>)
 8002282:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <prvCheckForValidListAndQueue+0x60>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <prvCheckForValidListAndQueue+0x60>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	490b      	ldr	r1, [pc, #44]	; (80022c0 <prvCheckForValidListAndQueue+0x7c>)
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fda0 	bl	8000dd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002298:	f000 f974 	bl	8002584 <vPortExitCritical>
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000c54 	.word	0x20000c54
 80022a8:	20000c24 	.word	0x20000c24
 80022ac:	20000c38 	.word	0x20000c38
 80022b0:	20000c4c 	.word	0x20000c4c
 80022b4:	20000c50 	.word	0x20000c50
 80022b8:	20000d00 	.word	0x20000d00
 80022bc:	20000c60 	.word	0x20000c60
 80022c0:	08002be8 	.word	0x08002be8

080022c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3b04      	subs	r3, #4
 80022d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3b04      	subs	r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f023 0201 	bic.w	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3b04      	subs	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80022f4:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <pxPortInitialiseStack+0x64>)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3b14      	subs	r3, #20
 80022fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3b04      	subs	r3, #4
 800230a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f06f 0202 	mvn.w	r2, #2
 8002312:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3b20      	subs	r3, #32
 8002318:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	0800232d 	.word	0x0800232d

0800232c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <prvTaskExitError+0x54>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d00a      	beq.n	8002356 <prvTaskExitError+0x2a>
	__asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	60fb      	str	r3, [r7, #12]
}
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <prvTaskExitError+0x28>
	__asm volatile
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	60bb      	str	r3, [r7, #8]
}
 8002368:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800236a:	bf00      	nop
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0fc      	beq.n	800236c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	20000004 	.word	0x20000004
	...

08002390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <pxCurrentTCBConst2>)
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	6808      	ldr	r0, [r1, #0]
 8002396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800239a:	f380 8809 	msr	PSP, r0
 800239e:	f3bf 8f6f 	isb	sy
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f380 8811 	msr	BASEPRI, r0
 80023aa:	4770      	bx	lr
 80023ac:	f3af 8000 	nop.w

080023b0 <pxCurrentTCBConst2>:
 80023b0:	20000724 	.word	0x20000724
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop

080023b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80023b8:	4808      	ldr	r0, [pc, #32]	; (80023dc <prvPortStartFirstTask+0x24>)
 80023ba:	6800      	ldr	r0, [r0, #0]
 80023bc:	6800      	ldr	r0, [r0, #0]
 80023be:	f380 8808 	msr	MSP, r0
 80023c2:	f04f 0000 	mov.w	r0, #0
 80023c6:	f380 8814 	msr	CONTROL, r0
 80023ca:	b662      	cpsie	i
 80023cc:	b661      	cpsie	f
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	df00      	svc	0
 80023d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80023da:	bf00      	nop
 80023dc:	e000ed08 	.word	0xe000ed08

080023e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <xPortStartScheduler+0x120>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a46      	ldr	r2, [pc, #280]	; (8002504 <xPortStartScheduler+0x124>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10a      	bne.n	8002406 <xPortStartScheduler+0x26>
	__asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	613b      	str	r3, [r7, #16]
}
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <xPortStartScheduler+0x120>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a3f      	ldr	r2, [pc, #252]	; (8002508 <xPortStartScheduler+0x128>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10a      	bne.n	8002426 <xPortStartScheduler+0x46>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	60fb      	str	r3, [r7, #12]
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002426:	4b39      	ldr	r3, [pc, #228]	; (800250c <xPortStartScheduler+0x12c>)
 8002428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	22ff      	movs	r2, #255	; 0xff
 8002436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <xPortStartScheduler+0x130>)
 800244c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <xPortStartScheduler+0x134>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002454:	e009      	b.n	800246a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002456:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <xPortStartScheduler+0x134>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3b01      	subs	r3, #1
 800245c:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <xPortStartScheduler+0x134>)
 800245e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	2b80      	cmp	r3, #128	; 0x80
 8002474:	d0ef      	beq.n	8002456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <xPortStartScheduler+0x134>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	d00a      	beq.n	8002498 <xPortStartScheduler+0xb8>
	__asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	60bb      	str	r3, [r7, #8]
}
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <xPortStartScheduler+0x134>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <xPortStartScheduler+0x134>)
 80024a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <xPortStartScheduler+0x134>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024aa:	4a1a      	ldr	r2, [pc, #104]	; (8002514 <xPortStartScheduler+0x134>)
 80024ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <xPortStartScheduler+0x138>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <xPortStartScheduler+0x138>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <xPortStartScheduler+0x138>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a14      	ldr	r2, [pc, #80]	; (8002518 <xPortStartScheduler+0x138>)
 80024c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80024cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80024ce:	f000 f8dd 	bl	800268c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <xPortStartScheduler+0x13c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80024d8:	f000 f8fc 	bl	80026d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <xPortStartScheduler+0x140>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <xPortStartScheduler+0x140>)
 80024e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80024e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80024e8:	f7ff ff66 	bl	80023b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80024ec:	f7ff f850 	bl	8001590 <vTaskSwitchContext>
	prvTaskExitError();
 80024f0:	f7ff ff1c 	bl	800232c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	410fc271 	.word	0x410fc271
 8002508:	410fc270 	.word	0x410fc270
 800250c:	e000e400 	.word	0xe000e400
 8002510:	20000d50 	.word	0x20000d50
 8002514:	20000d54 	.word	0x20000d54
 8002518:	e000ed20 	.word	0xe000ed20
 800251c:	20000004 	.word	0x20000004
 8002520:	e000ef34 	.word	0xe000ef34

08002524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
	__asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	607b      	str	r3, [r7, #4]
}
 800253c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <vPortEnterCritical+0x58>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <vPortEnterCritical+0x58>)
 8002546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <vPortEnterCritical+0x58>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d10f      	bne.n	8002570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <vPortEnterCritical+0x5c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <vPortEnterCritical+0x4c>
	__asm volatile
 800255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	603b      	str	r3, [r7, #0]
}
 800256c:	bf00      	nop
 800256e:	e7fe      	b.n	800256e <vPortEnterCritical+0x4a>
	}
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	20000004 	.word	0x20000004
 8002580:	e000ed04 	.word	0xe000ed04

08002584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <vPortExitCritical+0x50>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <vPortExitCritical+0x24>
	__asm volatile
 8002592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	607b      	str	r3, [r7, #4]
}
 80025a4:	bf00      	nop
 80025a6:	e7fe      	b.n	80025a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <vPortExitCritical+0x50>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <vPortExitCritical+0x50>)
 80025b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <vPortExitCritical+0x50>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <vPortExitCritical+0x42>
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f383 8811 	msr	BASEPRI, r3
}
 80025c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000004 	.word	0x20000004
	...

080025e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80025e0:	f3ef 8009 	mrs	r0, PSP
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <pxCurrentTCBConst>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	f01e 0f10 	tst.w	lr, #16
 80025f0:	bf08      	it	eq
 80025f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fa:	6010      	str	r0, [r2, #0]
 80025fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002604:	f380 8811 	msr	BASEPRI, r0
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f7fe ffbe 	bl	8001590 <vTaskSwitchContext>
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f380 8811 	msr	BASEPRI, r0
 800261c:	bc09      	pop	{r0, r3}
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	6808      	ldr	r0, [r1, #0]
 8002622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002626:	f01e 0f10 	tst.w	lr, #16
 800262a:	bf08      	it	eq
 800262c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002630:	f380 8809 	msr	PSP, r0
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	f3af 8000 	nop.w

08002640 <pxCurrentTCBConst>:
 8002640:	20000724 	.word	0x20000724
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop

08002648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	__asm volatile
 800264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	607b      	str	r3, [r7, #4]
}
 8002660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002662:	f7fe fedb 	bl	800141c <xTaskIncrementTick>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <xPortSysTickHandler+0x40>)
 800266e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	2300      	movs	r3, #0
 8002676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f383 8811 	msr	BASEPRI, r3
}
 800267e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <vPortSetupTimerInterrupt+0x34>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <vPortSetupTimerInterrupt+0x38>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <vPortSetupTimerInterrupt+0x3c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <vPortSetupTimerInterrupt+0x40>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <vPortSetupTimerInterrupt+0x44>)
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <vPortSetupTimerInterrupt+0x34>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010
 80026c4:	e000e018 	.word	0xe000e018
 80026c8:	20000000 	.word	0x20000000
 80026cc:	10624dd3 	.word	0x10624dd3
 80026d0:	e000e014 	.word	0xe000e014

080026d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80026d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026e4 <vPortEnableVFP+0x10>
 80026d8:	6801      	ldr	r1, [r0, #0]
 80026da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026de:	6001      	str	r1, [r0, #0]
 80026e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80026e2:	bf00      	nop
 80026e4:	e000ed88 	.word	0xe000ed88

080026e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80026ee:	f3ef 8305 	mrs	r3, IPSR
 80026f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	d914      	bls.n	8002724 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <vPortValidateInterruptPriority+0x70>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <vPortValidateInterruptPriority+0x74>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	7afa      	ldrb	r2, [r7, #11]
 800270a:	429a      	cmp	r2, r3
 800270c:	d20a      	bcs.n	8002724 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	607b      	str	r3, [r7, #4]
}
 8002720:	bf00      	nop
 8002722:	e7fe      	b.n	8002722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <vPortValidateInterruptPriority+0x78>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <vPortValidateInterruptPriority+0x7c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d90a      	bls.n	800274a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	603b      	str	r3, [r7, #0]
}
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <vPortValidateInterruptPriority+0x60>
	}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e3f0 	.word	0xe000e3f0
 800275c:	20000d50 	.word	0x20000d50
 8002760:	e000ed0c 	.word	0xe000ed0c
 8002764:	20000d54 	.word	0x20000d54

08002768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002774:	f7fe fd96 	bl	80012a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002778:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <pvPortMalloc+0x180>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002780:	f000 f920 	bl	80029c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002784:	4b59      	ldr	r3, [pc, #356]	; (80028ec <pvPortMalloc+0x184>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 8093 	bne.w	80028b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01d      	beq.n	80027d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002798:	2208      	movs	r2, #8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d014      	beq.n	80027d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f023 0307 	bic.w	r3, r3, #7
 80027b0:	3308      	adds	r3, #8
 80027b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <pvPortMalloc+0x6c>
	__asm volatile
 80027be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	617b      	str	r3, [r7, #20]
}
 80027d0:	bf00      	nop
 80027d2:	e7fe      	b.n	80027d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d06e      	beq.n	80028b8 <pvPortMalloc+0x150>
 80027da:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <pvPortMalloc+0x188>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d869      	bhi.n	80028b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <pvPortMalloc+0x18c>)
 80027e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <pvPortMalloc+0x18c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027ee:	e004      	b.n	80027fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d903      	bls.n	800280c <pvPortMalloc+0xa4>
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f1      	bne.n	80027f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <pvPortMalloc+0x180>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002812:	429a      	cmp	r2, r3
 8002814:	d050      	beq.n	80028b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2208      	movs	r2, #8
 800281c:	4413      	add	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	2308      	movs	r3, #8
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	429a      	cmp	r2, r3
 8002836:	d91f      	bls.n	8002878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <pvPortMalloc+0xf8>
	__asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	613b      	str	r3, [r7, #16]
}
 800285c:	bf00      	nop
 800285e:	e7fe      	b.n	800285e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad2      	subs	r2, r2, r3
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002872:	69b8      	ldr	r0, [r7, #24]
 8002874:	f000 f908 	bl	8002a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <pvPortMalloc+0x188>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <pvPortMalloc+0x188>)
 8002884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <pvPortMalloc+0x188>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <pvPortMalloc+0x190>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d203      	bcs.n	800289a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <pvPortMalloc+0x188>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <pvPortMalloc+0x190>)
 8002898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <pvPortMalloc+0x184>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <pvPortMalloc+0x194>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <pvPortMalloc+0x194>)
 80028b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80028b8:	f7fe fd02 	bl	80012c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <pvPortMalloc+0x174>
	__asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	60fb      	str	r3, [r7, #12]
}
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <pvPortMalloc+0x172>
	return pvReturn;
 80028dc:	69fb      	ldr	r3, [r7, #28]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3728      	adds	r7, #40	; 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20004960 	.word	0x20004960
 80028ec:	20004974 	.word	0x20004974
 80028f0:	20004964 	.word	0x20004964
 80028f4:	20004958 	.word	0x20004958
 80028f8:	20004968 	.word	0x20004968
 80028fc:	2000496c 	.word	0x2000496c

08002900 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d04d      	beq.n	80029ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002912:	2308      	movs	r3, #8
 8002914:	425b      	negs	r3, r3
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <vPortFree+0xb8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <vPortFree+0x44>
	__asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	60fb      	str	r3, [r7, #12]
}
 8002940:	bf00      	nop
 8002942:	e7fe      	b.n	8002942 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <vPortFree+0x62>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	60bb      	str	r3, [r7, #8]
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <vPortFree+0xb8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01e      	beq.n	80029ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11a      	bne.n	80029ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <vPortFree+0xb8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	43db      	mvns	r3, r3
 8002982:	401a      	ands	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002988:	f7fe fc8c 	bl	80012a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <vPortFree+0xbc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4413      	add	r3, r2
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <vPortFree+0xbc>)
 8002998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800299a:	6938      	ldr	r0, [r7, #16]
 800299c:	f000 f874 	bl	8002a88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <vPortFree+0xc0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <vPortFree+0xc0>)
 80029a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80029aa:	f7fe fc89 	bl	80012c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20004974 	.word	0x20004974
 80029bc:	20004964 	.word	0x20004964
 80029c0:	20004970 	.word	0x20004970

080029c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80029ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <prvHeapInit+0xac>)
 80029d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3307      	adds	r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <prvHeapInit+0xac>)
 80029f4:	4413      	add	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029fc:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <prvHeapInit+0xb0>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <prvHeapInit+0xb0>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a10:	2208      	movs	r2, #8
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0307 	bic.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <prvHeapInit+0xb4>)
 8002a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <prvHeapInit+0xb4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <prvHeapInit+0xb4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	1ad2      	subs	r2, r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <prvHeapInit+0xb4>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <prvHeapInit+0xb8>)
 8002a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <prvHeapInit+0xbc>)
 8002a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <prvHeapInit+0xc0>)
 8002a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a62:	601a      	str	r2, [r3, #0]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	20000d58 	.word	0x20000d58
 8002a74:	20004958 	.word	0x20004958
 8002a78:	20004960 	.word	0x20004960
 8002a7c:	20004968 	.word	0x20004968
 8002a80:	20004964 	.word	0x20004964
 8002a84:	20004974 	.word	0x20004974

08002a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a90:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <prvInsertBlockIntoFreeList+0xac>)
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e002      	b.n	8002a9c <prvInsertBlockIntoFreeList+0x14>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d8f7      	bhi.n	8002a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d108      	bne.n	8002aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	441a      	add	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	441a      	add	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d118      	bne.n	8002b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <prvInsertBlockIntoFreeList+0xb0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d00d      	beq.n	8002b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	441a      	add	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e008      	b.n	8002b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <prvInsertBlockIntoFreeList+0xb0>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e003      	b.n	8002b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d002      	beq.n	8002b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20004958 	.word	0x20004958
 8002b38:	20004960 	.word	0x20004960

08002b3c <memset>:
 8002b3c:	4402      	add	r2, r0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d100      	bne.n	8002b46 <memset+0xa>
 8002b44:	4770      	bx	lr
 8002b46:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4a:	e7f9      	b.n	8002b40 <memset+0x4>

08002b4c <__libc_init_array>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	4d0d      	ldr	r5, [pc, #52]	; (8002b84 <__libc_init_array+0x38>)
 8002b50:	4c0d      	ldr	r4, [pc, #52]	; (8002b88 <__libc_init_array+0x3c>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	2600      	movs	r6, #0
 8002b58:	42a6      	cmp	r6, r4
 8002b5a:	d109      	bne.n	8002b70 <__libc_init_array+0x24>
 8002b5c:	4d0b      	ldr	r5, [pc, #44]	; (8002b8c <__libc_init_array+0x40>)
 8002b5e:	4c0c      	ldr	r4, [pc, #48]	; (8002b90 <__libc_init_array+0x44>)
 8002b60:	f000 f826 	bl	8002bb0 <_init>
 8002b64:	1b64      	subs	r4, r4, r5
 8002b66:	10a4      	asrs	r4, r4, #2
 8002b68:	2600      	movs	r6, #0
 8002b6a:	42a6      	cmp	r6, r4
 8002b6c:	d105      	bne.n	8002b7a <__libc_init_array+0x2e>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b74:	4798      	blx	r3
 8002b76:	3601      	adds	r6, #1
 8002b78:	e7ee      	b.n	8002b58 <__libc_init_array+0xc>
 8002b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7e:	4798      	blx	r3
 8002b80:	3601      	adds	r6, #1
 8002b82:	e7f2      	b.n	8002b6a <__libc_init_array+0x1e>
 8002b84:	08002bf0 	.word	0x08002bf0
 8002b88:	08002bf0 	.word	0x08002bf0
 8002b8c:	08002bf0 	.word	0x08002bf0
 8002b90:	08002bf4 	.word	0x08002bf4

08002b94 <memcpy>:
 8002b94:	440a      	add	r2, r1
 8002b96:	4291      	cmp	r1, r2
 8002b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b9c:	d100      	bne.n	8002ba0 <memcpy+0xc>
 8002b9e:	4770      	bx	lr
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002baa:	4291      	cmp	r1, r2
 8002bac:	d1f9      	bne.n	8002ba2 <memcpy+0xe>
 8002bae:	bd10      	pop	{r4, pc}

08002bb0 <_init>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr

08002bbc <_fini>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	bf00      	nop
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr
