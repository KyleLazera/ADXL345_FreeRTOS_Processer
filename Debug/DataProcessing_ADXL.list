
DataProcessing_ADXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08004638  08004638  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004638  08004638  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d8  20000008  08004648  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200049e0  08004648  000249e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4cd  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f03  00000000  00000000  0002c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d5  00000000  00000000  0002ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000efa1  00000000  00000000  0002f66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae89  00000000  00000000  0003e60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000603c8  00000000  00000000  00049497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b64  00000000  00000000  000a9860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ac3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045e0 	.word	0x080045e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	080045e0 	.word	0x080045e0

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <main>:
void DummyTask(void *pvParameters);

QueueHandle_t x_axis_queue;

int main()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af02      	add	r7, sp, #8

	x_axis_queue = xQueueCreate(6, sizeof(AccelerometerData));  //Create queue to hold read data
 80007b2:	2200      	movs	r2, #0
 80007b4:	2104      	movs	r1, #4
 80007b6:	2006      	movs	r0, #6
 80007b8:	f001 fc3e 	bl	8002038 <xQueueGenericCreate>
 80007bc:	4603      	mov	r3, r0
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <main+0x4c>)
 80007c0:	6013      	str	r3, [r2, #0]

	xTaskCreate(ReadADXLData, "Read ADXL Task", 1000, NULL, 1, NULL);
 80007c2:	2300      	movs	r3, #0
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	2301      	movs	r3, #1
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d0:	490a      	ldr	r1, [pc, #40]	; (80007fc <main+0x50>)
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <main+0x54>)
 80007d4:	f002 f8d3 	bl	800297e <xTaskCreate>
	xTaskCreate(DummyTask, "Data Processing Task", 100, NULL, 1, NULL);
 80007d8:	2300      	movs	r3, #0
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2301      	movs	r3, #1
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	2264      	movs	r2, #100	; 0x64
 80007e4:	4907      	ldr	r1, [pc, #28]	; (8000804 <main+0x58>)
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <main+0x5c>)
 80007e8:	f002 f8c9 	bl	800297e <xTaskCreate>

	vTaskStartScheduler();
 80007ec:	f002 fa0c 	bl	8002c08 <vTaskStartScheduler>
 80007f0:	2300      	movs	r3, #0

}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000090 	.word	0x20000090
 80007fc:	080045f8 	.word	0x080045f8
 8000800:	08000891 	.word	0x08000891
 8000804:	08004608 	.word	0x08004608
 8000808:	0800080d 	.word	0x0800080d

0800080c <DummyTask>:

void DummyTask(void *pvParameters)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	BaseType_t queue_status;
	AccelerometerData rec_data;

	while(1)
	{
		queue_status = xQueueReceive(x_axis_queue, &rec_data, 0);
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <DummyTask+0x6c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f107 0108 	add.w	r1, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe02 	bl	8002428 <xQueueReceive>
 8000824:	60f8      	str	r0, [r7, #12]

		switch(rec_data.axis)
 8000826:	7a3b      	ldrb	r3, [r7, #8]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d010      	beq.n	800084e <DummyTask+0x42>
 800082c:	2b02      	cmp	r3, #2
 800082e:	dc13      	bgt.n	8000858 <DummyTask+0x4c>
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <DummyTask+0x2e>
 8000834:	2b01      	cmp	r3, #1
 8000836:	d005      	beq.n	8000844 <DummyTask+0x38>
 8000838:	e00e      	b.n	8000858 <DummyTask+0x4c>
		{
		case x_axis:
			_x = rec_data.value;
 800083a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <DummyTask+0x70>)
 8000840:	801a      	strh	r2, [r3, #0]
			break;
 8000842:	e009      	b.n	8000858 <DummyTask+0x4c>
		case y_axis:
			_y = rec_data.value;
 8000844:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <DummyTask+0x74>)
 800084a:	801a      	strh	r2, [r3, #0]
			break;
 800084c:	e004      	b.n	8000858 <DummyTask+0x4c>
		case z_axis:
			_z = rec_data.value;
 800084e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <DummyTask+0x78>)
 8000854:	801a      	strh	r2, [r3, #0]
			break;
 8000856:	bf00      	nop
		}
		//_x = rec_x;
		//_y = rec_y;
		//_z = rec_z;

		if(queue_status == pdPASS)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d105      	bne.n	800086a <DummyTask+0x5e>
		{
			counter++;
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <DummyTask+0x7c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a08      	ldr	r2, [pc, #32]	; (8000888 <DummyTask+0x7c>)
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	e7d4      	b.n	8000814 <DummyTask+0x8>
		}
		else
		{
			counterFail++;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <DummyTask+0x80>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <DummyTask+0x80>)
 8000872:	6013      	str	r3, [r2, #0]
		queue_status = xQueueReceive(x_axis_queue, &rec_data, 0);
 8000874:	e7ce      	b.n	8000814 <DummyTask+0x8>
 8000876:	bf00      	nop
 8000878:	20000090 	.word	0x20000090
 800087c:	2000005e 	.word	0x2000005e
 8000880:	20000060 	.word	0x20000060
 8000884:	20000062 	.word	0x20000062
 8000888:	20000088 	.word	0x20000088
 800088c:	2000008c 	.word	0x2000008c

08000890 <ReadADXLData>:
		}
	}
}

void ReadADXLData(void *pvParameters)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af04      	add	r7, sp, #16
 8000896:	6078      	str	r0, [r7, #4]
	AccelerometerData data;
	/*
	 * Data that holds the address of the data registers of the ADXL - this is where data will be read
	 * from (Not the address of the device).
	 */
	uint8_t adxl_address[1] = {0xF2};
 8000898:	23f2      	movs	r3, #242	; 0xf2
 800089a:	763b      	strb	r3, [r7, #24]

	/*
	 * Variables to initialize the ADXL registers to set range to +- 4g, to allow
	 * continous reading of the data registers and set the transfer rate to 100Hz.
	 */
	uint8_t adxl_set_data_format[2] = {0x31, 0x01};
 800089c:	f240 1331 	movw	r3, #305	; 0x131
 80008a0:	82bb      	strh	r3, [r7, #20]
	uint8_t adxl_clear_powerctl_reg[2] = {0x2D, 0x00};
 80008a2:	232d      	movs	r3, #45	; 0x2d
 80008a4:	823b      	strh	r3, [r7, #16]
	uint8_t adxl_set_powerctl_reg[2] = {0x2D, 0x08};
 80008a6:	f640 032d 	movw	r3, #2093	; 0x82d
 80008aa:	81bb      	strh	r3, [r7, #12]
	uint8_t adxl_set_bw_rate_reg[2] = {0x2C, 0x0A};
 80008ac:	f640 232c 	movw	r3, #2604	; 0xa2c
 80008b0:	813b      	strh	r3, [r7, #8]

	//Create and initialze a slave pin with the desired port and pin
	GPIO_Config(&ADXL, GPIOA, Pin8, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 80008b2:	2301      	movs	r3, #1
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	2300      	movs	r3, #0
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	2300      	movs	r3, #0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	2208      	movs	r2, #8
 80008c2:	495b      	ldr	r1, [pc, #364]	; (8000a30 <ReadADXLData+0x1a0>)
 80008c4:	485b      	ldr	r0, [pc, #364]	; (8000a34 <ReadADXLData+0x1a4>)
 80008c6:	f000 f94e 	bl	8000b66 <GPIO_Config>
	GPIO_Init(&ADXL, 0x0);
 80008ca:	2100      	movs	r1, #0
 80008cc:	4859      	ldr	r0, [pc, #356]	; (8000a34 <ReadADXLData+0x1a4>)
 80008ce:	f000 fa33 	bl	8000d38 <GPIO_Init>
	GPIOA->ODR |= (1U << 8); //Used to enable the P-MOS and ensure CS is active high
 80008d2:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <ReadADXLData+0x1a0>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <ReadADXLData+0x1a0>)
 80008d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008dc:	6153      	str	r3, [r2, #20]

	SPI_Specs_Init();
 80008de:	f000 f8d9 	bl	8000a94 <SPI_Specs_Init>

	SPI_Init(&SPI1_Example);
 80008e2:	4855      	ldr	r0, [pc, #340]	; (8000a38 <ReadADXLData+0x1a8>)
 80008e4:	f000 ff08 	bl	80016f8 <SPI_Init>

	/*
	 * Initial Transmission to send to the ADXL. Sets the ADXL to specified settings.
	 */
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_clear_powerctl_reg, 2);
 80008e8:	f107 0210 	add.w	r2, r7, #16
 80008ec:	2302      	movs	r3, #2
 80008ee:	4951      	ldr	r1, [pc, #324]	; (8000a34 <ReadADXLData+0x1a4>)
 80008f0:	4851      	ldr	r0, [pc, #324]	; (8000a38 <ReadADXLData+0x1a8>)
 80008f2:	f001 f932 	bl	8001b5a <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_data_format, 2);
 80008f6:	f107 0214 	add.w	r2, r7, #20
 80008fa:	2302      	movs	r3, #2
 80008fc:	494d      	ldr	r1, [pc, #308]	; (8000a34 <ReadADXLData+0x1a4>)
 80008fe:	484e      	ldr	r0, [pc, #312]	; (8000a38 <ReadADXLData+0x1a8>)
 8000900:	f001 f92b 	bl	8001b5a <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_bw_rate_reg, 2);
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	2302      	movs	r3, #2
 800090a:	494a      	ldr	r1, [pc, #296]	; (8000a34 <ReadADXLData+0x1a4>)
 800090c:	484a      	ldr	r0, [pc, #296]	; (8000a38 <ReadADXLData+0x1a8>)
 800090e:	f001 f924 	bl	8001b5a <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_powerctl_reg, 2);
 8000912:	f107 020c 	add.w	r2, r7, #12
 8000916:	2302      	movs	r3, #2
 8000918:	4946      	ldr	r1, [pc, #280]	; (8000a34 <ReadADXLData+0x1a4>)
 800091a:	4847      	ldr	r0, [pc, #284]	; (8000a38 <ReadADXLData+0x1a8>)
 800091c:	f001 f91d 	bl	8001b5a <SPI_MultiSlave_TransmitIT>

	while(1)
	{
		//Reading data from the SPI
		SPI_MultiSlave_RecieveIT(&SPI1_Example, &ADXL, adxl_data_rec, 7, *adxl_address);
 8000920:	7e3b      	ldrb	r3, [r7, #24]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2307      	movs	r3, #7
 8000926:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <ReadADXLData+0x1ac>)
 8000928:	4942      	ldr	r1, [pc, #264]	; (8000a34 <ReadADXLData+0x1a4>)
 800092a:	4843      	ldr	r0, [pc, #268]	; (8000a38 <ReadADXLData+0x1a8>)
 800092c:	f001 f93f 	bl	8001bae <SPI_MultiSlave_RecieveIT>

		x = ((adxl_data_rec[2] << 8) | adxl_data_rec[1]);
 8000930:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <ReadADXLData+0x1ac>)
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <ReadADXLData+0x1ac>)
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	b21b      	sxth	r3, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	b21a      	sxth	r2, r3
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <ReadADXLData+0x1b0>)
 8000944:	801a      	strh	r2, [r3, #0]
		data.axis = x_axis;
 8000946:	2300      	movs	r3, #0
 8000948:	773b      	strb	r3, [r7, #28]
		data.value = x;
 800094a:	4b3d      	ldr	r3, [pc, #244]	; (8000a40 <ReadADXLData+0x1b0>)
 800094c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000950:	83fb      	strh	r3, [r7, #30]
		xQueueSend(x_axis_queue, &data, 0);
 8000952:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <ReadADXLData+0x1b4>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	f107 011c 	add.w	r1, r7, #28
 800095a:	2300      	movs	r3, #0
 800095c:	2200      	movs	r2, #0
 800095e:	f001 fbc9 	bl	80020f4 <xQueueGenericSend>

		y = ((adxl_data_rec[4] << 8) | adxl_data_rec[3]);
 8000962:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <ReadADXLData+0x1ac>)
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	b21a      	sxth	r2, r3
 800096a:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <ReadADXLData+0x1ac>)
 800096c:	78db      	ldrb	r3, [r3, #3]
 800096e:	b21b      	sxth	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	b21a      	sxth	r2, r3
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <ReadADXLData+0x1b8>)
 8000976:	801a      	strh	r2, [r3, #0]
		data.axis = y_axis;
 8000978:	2301      	movs	r3, #1
 800097a:	773b      	strb	r3, [r7, #28]
		data.value = y;
 800097c:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <ReadADXLData+0x1b8>)
 800097e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000982:	83fb      	strh	r3, [r7, #30]
		xQueueSend(x_axis_queue, &data, 0);
 8000984:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <ReadADXLData+0x1b4>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	f107 011c 	add.w	r1, r7, #28
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	f001 fbb0 	bl	80020f4 <xQueueGenericSend>

		z = ((adxl_data_rec[6] << 8) | adxl_data_rec[5]);
 8000994:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <ReadADXLData+0x1ac>)
 8000996:	799b      	ldrb	r3, [r3, #6]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <ReadADXLData+0x1ac>)
 800099e:	795b      	ldrb	r3, [r3, #5]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <ReadADXLData+0x1bc>)
 80009a8:	801a      	strh	r2, [r3, #0]
		data.axis = z_axis;
 80009aa:	2302      	movs	r3, #2
 80009ac:	773b      	strb	r3, [r7, #28]
		data.value = z;
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <ReadADXLData+0x1bc>)
 80009b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b4:	83fb      	strh	r3, [r7, #30]
		xQueueSend(x_axis_queue, &data, 0);
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <ReadADXLData+0x1b4>)
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	f107 011c 	add.w	r1, r7, #28
 80009be:	2300      	movs	r3, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	f001 fb97 	bl	80020f4 <xQueueGenericSend>

		xg = (x * 0.0078);
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <ReadADXLData+0x1b0>)
 80009c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe83 	bl	80006d8 <__aeabi_i2d>
 80009d2:	a315      	add	r3, pc, #84	; (adr r3, 8000a28 <ReadADXLData+0x198>)
 80009d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d8:	f7ff fc02 	bl	80001e0 <__aeabi_dmul>
 80009dc:	4602      	mov	r2, r0
 80009de:	460b      	mov	r3, r1
 80009e0:	491b      	ldr	r1, [pc, #108]	; (8000a50 <ReadADXLData+0x1c0>)
 80009e2:	e9c1 2300 	strd	r2, r3, [r1]
		yg = (y * 0.0078);
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <ReadADXLData+0x1b8>)
 80009e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fe73 	bl	80006d8 <__aeabi_i2d>
 80009f2:	a30d      	add	r3, pc, #52	; (adr r3, 8000a28 <ReadADXLData+0x198>)
 80009f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f8:	f7ff fbf2 	bl	80001e0 <__aeabi_dmul>
 80009fc:	4602      	mov	r2, r0
 80009fe:	460b      	mov	r3, r1
 8000a00:	4914      	ldr	r1, [pc, #80]	; (8000a54 <ReadADXLData+0x1c4>)
 8000a02:	e9c1 2300 	strd	r2, r3, [r1]
		zg = (z * 0.0078);
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <ReadADXLData+0x1bc>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe63 	bl	80006d8 <__aeabi_i2d>
 8000a12:	a305      	add	r3, pc, #20	; (adr r3, 8000a28 <ReadADXLData+0x198>)
 8000a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a18:	f7ff fbe2 	bl	80001e0 <__aeabi_dmul>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	460b      	mov	r3, r1
 8000a20:	490d      	ldr	r1, [pc, #52]	; (8000a58 <ReadADXLData+0x1c8>)
 8000a22:	e9c1 2300 	strd	r2, r3, [r1]
		SPI_MultiSlave_RecieveIT(&SPI1_Example, &ADXL, adxl_data_rec, 7, *adxl_address);
 8000a26:	e77b      	b.n	8000920 <ReadADXLData+0x90>
 8000a28:	8e8a71de 	.word	0x8e8a71de
 8000a2c:	3f7ff2e4 	.word	0x3f7ff2e4
 8000a30:	40020000 	.word	0x40020000
 8000a34:	2000004c 	.word	0x2000004c
 8000a38:	20000024 	.word	0x20000024
 8000a3c:	20000080 	.word	0x20000080
 8000a40:	20000058 	.word	0x20000058
 8000a44:	20000090 	.word	0x20000090
 8000a48:	2000005a 	.word	0x2000005a
 8000a4c:	2000005c 	.word	0x2000005c
 8000a50:	20000068 	.word	0x20000068
 8000a54:	20000070 	.word	0x20000070
 8000a58:	20000078 	.word	0x20000078

08000a5c <SPI1_IRQHandler>:

/*
 * Function to serve interrupts
 */
void SPI1_IRQHandler()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]

	SPI_IRQ_Handler(&SPI1_Example);
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <SPI1_IRQHandler+0x30>)
 8000a68:	f001 f8d8 	bl	8001c1c <SPI_IRQ_Handler>

	//Causes a context switch for the CPU
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d007      	beq.n	8000a82 <SPI1_IRQHandler+0x26>
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <SPI1_IRQHandler+0x34>)
 8000a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	f3bf 8f4f 	dsb	sy
 8000a7e:	f3bf 8f6f 	isb	sy
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000024 	.word	0x20000024
 8000a90:	e000ed04 	.word	0xe000ed04

08000a94 <SPI_Specs_Init>:

/*
 * Function to set the SPI specs
 */
void SPI_Specs_Init()
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	//Set desired pins
	SPI1_Example.SPI_Config.cs_gpio = GPIOA;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <SPI_Specs_Init+0x54>)
 8000a9c:	609a      	str	r2, [r3, #8]
	SPI1_Example.SPI_Config.pin_clk = Pin5;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	715a      	strb	r2, [r3, #5]
	SPI1_Example.SPI_Config.pin_miso = Pin6;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000aa6:	2206      	movs	r2, #6
 8000aa8:	71da      	strb	r2, [r3, #7]
	SPI1_Example.SPI_Config.pin_mosi = Pin7;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	719a      	strb	r2, [r3, #6]

	//Set desired transfer methods
	SPI1_Example.ssm = SSM_Enable;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	745a      	strb	r2, [r3, #17]
	SPI1_Example.SPIx = SPI1;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <SPI_Specs_Init+0x58>)
 8000aba:	601a      	str	r2, [r3, #0]
	SPI1_Example.SPI_Config.baudrate_ctrl = DIV4;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	731a      	strb	r2, [r3, #12]
	SPI1_Example.SPI_Config.cpha = Falling_Edge;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	739a      	strb	r2, [r3, #14]
	SPI1_Example.SPI_Config.cpol = Even_Polarity;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000aca:	2202      	movs	r2, #2
 8000acc:	735a      	strb	r2, [r3, #13]
	SPI1_Example.SPI_Config.data_format = MSB_First;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	73da      	strb	r2, [r3, #15]
	SPI1_Example.data_frame = Data_8_Bits;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <SPI_Specs_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	741a      	strb	r2, [r3, #16]
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	20000024 	.word	0x20000024
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40013000 	.word	0x40013000

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	; (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f003 fd1b 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fe31 	bl	80007ac <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000b58:	08004640 	.word	0x08004640
  ldr r2, =_sbss
 8000b5c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000b60:	200049e0 	.word	0x200049e0

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>

08000b66 <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, GPIO_TypeDef *Port, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	4611      	mov	r1, r2
 8000b72:	461a      	mov	r2, r3
 8000b74:	460b      	mov	r3, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	GPIO_Config->GPIO_Pin = Pin;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	79fa      	ldrb	r2, [r7, #7]
 8000b80:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_Port = Port;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	609a      	str	r2, [r3, #8]
	GPIO_Config->GPIO_MODE = Mode;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	7e3a      	ldrb	r2, [r7, #24]
 8000b92:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	7f3a      	ldrb	r2, [r7, #28]
 8000b98:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ba0:	711a      	strb	r2, [r3, #4]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d135      	bne.n	8000c2e <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <GPIO_PeriphClck+0xf0>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d104      	bne.n	8000bd4 <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 8000bca:	2101      	movs	r1, #1
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f000 fcff 	bl	80015d0 <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 8000bd2:	e061      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a33      	ldr	r2, [pc, #204]	; (8000ca4 <GPIO_PeriphClck+0xf4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d104      	bne.n	8000be6 <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2002      	movs	r0, #2
 8000be0:	f000 fcf6 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000be4:	e058      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <GPIO_PeriphClck+0xf8>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d104      	bne.n	8000bf8 <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 8000bee:	2101      	movs	r1, #1
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f000 fced 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000bf6:	e04f      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <GPIO_PeriphClck+0xfc>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d104      	bne.n	8000c0a <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 8000c00:	2101      	movs	r1, #1
 8000c02:	2008      	movs	r0, #8
 8000c04:	f000 fce4 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c08:	e046      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <GPIO_PeriphClck+0x100>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d104      	bne.n	8000c1c <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 8000c12:	2101      	movs	r1, #1
 8000c14:	2010      	movs	r0, #16
 8000c16:	f000 fcdb 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c1a:	e03d      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <GPIO_PeriphClck+0x104>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d139      	bne.n	8000c98 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 8000c24:	2101      	movs	r1, #1
 8000c26:	2080      	movs	r0, #128	; 0x80
 8000c28:	f000 fcd2 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c2c:	e034      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <GPIO_PeriphClck+0xf0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d104      	bne.n	8000c40 <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f000 fcc9 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c3e:	e02b      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <GPIO_PeriphClck+0xf4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d104      	bne.n	8000c52 <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 fcc0 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c50:	e022      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <GPIO_PeriphClck+0xf8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d104      	bne.n	8000c64 <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f000 fcb7 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c62:	e019      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <GPIO_PeriphClck+0xfc>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d104      	bne.n	8000c76 <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2008      	movs	r0, #8
 8000c70:	f000 fcae 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c74:	e010      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <GPIO_PeriphClck+0x100>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d104      	bne.n	8000c88 <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2010      	movs	r0, #16
 8000c82:	f000 fca5 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c86:	e007      	b.n	8000c98 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <GPIO_PeriphClck+0x104>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d103      	bne.n	8000c98 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 8000c90:	2100      	movs	r1, #0
 8000c92:	2080      	movs	r0, #128	; 0x80
 8000c94:	f000 fc9c 	bl	80015d0 <RCC_AHB1Cmd>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020c00 	.word	0x40020c00
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40021c00 	.word	0x40021c00

08000cb8 <GPIO_AlternateFunctionConfig>:
 * @param	alt_function: This will take in the alternate function value that the user wishes to use.
 * 			The specific alternate function values and their functions are present in the data sheet.
 * 			The inputs for this function are AF0 - AF15;
 */
void GPIO_AlternateFunctionConfig(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	73fb      	strb	r3, [r7, #15]
	uint8_t alt_function_array = pin/8;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	73bb      	strb	r3, [r7, #14]

	if(alt_function_array == 1)
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d102      	bne.n	8000cdc <GPIO_AlternateFunctionConfig+0x24>
	{
		pin -= 8;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	73fb      	strb	r3, [r7, #15]
	}

	GPIO_Config->GPIO_Port->AFR[alt_function_array] &= ~(AF15 << (pin * 4));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	7bba      	ldrb	r2, [r7, #14]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	7bba      	ldrb	r2, [r7, #14]
 8000cfc:	4001      	ands	r1, r0
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_Config->GPIO_Port->AFR[alt_function_array] |= (alt_function << (pin * 4));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	7bba      	ldrb	r2, [r7, #14]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d10:	78fa      	ldrb	r2, [r7, #3]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	7bba      	ldrb	r2, [r7, #14]
 8000d22:	4301      	orrs	r1, r0
 8000d24:	3208      	adds	r2, #8
 8000d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIO_Config->GPIO_Port, ENABLE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff2d 	bl	8000bb0 <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	f040 8094 	bne.w	8000e88 <GPIO_Init+0x150>
	{
		if(GPIO_Config->GPIO_Port == GPIOA)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	4a88      	ldr	r2, [pc, #544]	; (8000f88 <GPIO_Init+0x250>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d112      	bne.n	8000d90 <GPIO_Init+0x58>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8000d72:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_0_Pin13_Pin14;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000d7c:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8000d86:	61da      	str	r2, [r3, #28]
			temp_variable = GPIO_Config->GPIO_Port->LCKR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e074      	b.n	8000e80 <GPIO_Init+0x148>
		{
			GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2103      	movs	r1, #3
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4619      	mov	r1, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	400a      	ands	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
			GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]

			GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	400a      	ands	r2, r1
 8000de8:	605a      	str	r2, [r3, #4]
			GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	789b      	ldrb	r3, [r3, #2]
 8000df4:	4619      	mov	r1, r3
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	605a      	str	r2, [r3, #4]

			GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2101      	movs	r1, #1
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	400a      	ands	r2, r1
 8000e20:	609a      	str	r2, [r3, #8]
			GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	78db      	ldrb	r3, [r3, #3]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	609a      	str	r2, [r3, #8]

			GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	400a      	ands	r2, r1
 8000e5a:	60da      	str	r2, [r3, #12]
			GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	4619      	mov	r1, r3
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d987      	bls.n	8000d96 <GPIO_Init+0x5e>

		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
	}

}
 8000e86:	e07a      	b.n	8000f7e <GPIO_Init+0x246>
		if(GPIO_Config->GPIO_MODE == GPIO_AF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	785b      	ldrb	r3, [r3, #1]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d104      	bne.n	8000e9a <GPIO_Init+0x162>
			GPIO_AlternateFunctionConfig(GPIO_Config, alt_function);
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	4619      	mov	r1, r3
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff0f 	bl	8000cb8 <GPIO_AlternateFunctionConfig>
		GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4619      	mov	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	789b      	ldrb	r3, [r3, #2]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	400a      	ands	r2, r1
 8000eea:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	78db      	ldrb	r3, [r3, #3]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4619      	mov	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2103      	movs	r1, #3
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	400a      	ands	r2, r1
 8000f24:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	791b      	ldrb	r3, [r3, #4]
 8000f30:	4619      	mov	r1, r3
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2103      	movs	r1, #3
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020000 	.word	0x40020000

08000f8c <SPI1_Periph_Enable>:

/*
 * @Brief SPI peripheral enabled specified for SPI1. There are 3 other functions: 1 for each SPI peripheral.
 */
void SPI1_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	6039      	str	r1, [r7, #0]
 8000f94:	4611      	mov	r1, r2
 8000f96:	461a      	mov	r2, r3
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	71bb      	strb	r3, [r7, #6]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI1_Periph;

	//Check if SSM bit is disabled
	if(!ssm_enabled)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d112      	bne.n	8000fd0 <SPI1_Periph_Enable+0x44>
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI1_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000faa:	79ba      	ldrb	r2, [r7, #6]
 8000fac:	f107 000c 	add.w	r0, r7, #12
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	494d      	ldr	r1, [pc, #308]	; (80010f4 <SPI1_Periph_Enable+0x168>)
 8000fc0:	f7ff fdd1 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2105      	movs	r1, #5
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff feb4 	bl	8000d38 <GPIO_Init>
		GPIO_Config(&SPI1_Periph, GPIOA, Pin9, GPIO_Output, GPIO_PushPull, GPIO_HighSpeed, GPIO_PullUp);
		GPIO_Init(&SPI1_Periph, 0x0);
	}*/

	//Configure the SPI clock pin
	switch(clk_pin){
 8000fd0:	797b      	ldrb	r3, [r7, #5]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d015      	beq.n	8001002 <SPI1_Periph_Enable+0x76>
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d127      	bne.n	800102a <SPI1_Periph_Enable+0x9e>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOA, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8000fda:	797a      	ldrb	r2, [r7, #5]
 8000fdc:	f107 000c 	add.w	r0, r7, #12
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2302      	movs	r3, #2
 8000fee:	4941      	ldr	r1, [pc, #260]	; (80010f4 <SPI1_Periph_Enable+0x168>)
 8000ff0:	f7ff fdb9 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe9c 	bl	8000d38 <GPIO_Init>
		break;
 8001000:	e013      	b.n	800102a <SPI1_Periph_Enable+0x9e>
	case 3:
		GPIO_Config(&SPI1_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001002:	797a      	ldrb	r2, [r7, #5]
 8001004:	f107 000c 	add.w	r0, r7, #12
 8001008:	2300      	movs	r3, #0
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2300      	movs	r3, #0
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	2300      	movs	r3, #0
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2302      	movs	r3, #2
 8001016:	4938      	ldr	r1, [pc, #224]	; (80010f8 <SPI1_Periph_Enable+0x16c>)
 8001018:	f7ff fda5 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2105      	movs	r1, #5
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe88 	bl	8000d38 <GPIO_Init>
		break;
 8001028:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 800102a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800102e:	2b04      	cmp	r3, #4
 8001030:	d016      	beq.n	8001060 <SPI1_Periph_Enable+0xd4>
 8001032:	2b06      	cmp	r3, #6
 8001034:	d129      	bne.n	800108a <SPI1_Periph_Enable+0xfe>
	case 6:
		GPIO_Config(&SPI1_Periph, GPIOA, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001036:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800103a:	f107 000c 	add.w	r0, r7, #12
 800103e:	2300      	movs	r3, #0
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2300      	movs	r3, #0
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	2300      	movs	r3, #0
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2302      	movs	r3, #2
 800104c:	4929      	ldr	r1, [pc, #164]	; (80010f4 <SPI1_Periph_Enable+0x168>)
 800104e:	f7ff fd8a 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2105      	movs	r1, #5
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe6d 	bl	8000d38 <GPIO_Init>
		break;
 800105e:	e014      	b.n	800108a <SPI1_Periph_Enable+0xfe>
	case 4:
		GPIO_Config(&SPI1_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001060:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001064:	f107 000c 	add.w	r0, r7, #12
 8001068:	2300      	movs	r3, #0
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2300      	movs	r3, #0
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	2300      	movs	r3, #0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2302      	movs	r3, #2
 8001076:	4920      	ldr	r1, [pc, #128]	; (80010f8 <SPI1_Periph_Enable+0x16c>)
 8001078:	f7ff fd75 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2105      	movs	r1, #5
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe58 	bl	8000d38 <GPIO_Init>
		break;
 8001088:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 800108a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d016      	beq.n	80010c0 <SPI1_Periph_Enable+0x134>
 8001092:	2b07      	cmp	r3, #7
 8001094:	d129      	bne.n	80010ea <SPI1_Periph_Enable+0x15e>
	case 7:
		GPIO_Config(&SPI1_Periph, GPIOA, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001096:	f897 2020 	ldrb.w	r2, [r7, #32]
 800109a:	f107 000c 	add.w	r0, r7, #12
 800109e:	2300      	movs	r3, #0
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2300      	movs	r3, #0
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2302      	movs	r3, #2
 80010ac:	4911      	ldr	r1, [pc, #68]	; (80010f4 <SPI1_Periph_Enable+0x168>)
 80010ae:	f7ff fd5a 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2105      	movs	r1, #5
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe3d 	bl	8000d38 <GPIO_Init>
		break;
 80010be:	e014      	b.n	80010ea <SPI1_Periph_Enable+0x15e>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80010c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010c4:	f107 000c 	add.w	r0, r7, #12
 80010c8:	2300      	movs	r3, #0
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2300      	movs	r3, #0
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	2300      	movs	r3, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2302      	movs	r3, #2
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <SPI1_Periph_Enable+0x16c>)
 80010d8:	f7ff fd45 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2105      	movs	r1, #5
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fe28 	bl	8000d38 <GPIO_Init>
		break;
 80010e8:	bf00      	nop
	}
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400

080010fc <SPI2_Periph_Enable>:

void SPI2_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af04      	add	r7, sp, #16
 8001102:	6039      	str	r1, [r7, #0]
 8001104:	4611      	mov	r1, r2
 8001106:	461a      	mov	r2, r3
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	460b      	mov	r3, r1
 800110e:	71bb      	strb	r3, [r7, #6]
 8001110:	4613      	mov	r3, r2
 8001112:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI2_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d013      	beq.n	8001142 <SPI2_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI2_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	f107 000c 	add.w	r0, r7, #12
 8001120:	2301      	movs	r3, #1
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2300      	movs	r3, #0
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	2300      	movs	r3, #0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	f7ff fd19 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, 0x00);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fdfc 	bl	8000d38 <GPIO_Init>
 8001140:	e012      	b.n	8001168 <SPI2_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI2_Periph, GPIOB, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001142:	79ba      	ldrb	r2, [r7, #6]
 8001144:	f107 000c 	add.w	r0, r7, #12
 8001148:	2300      	movs	r3, #0
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2300      	movs	r3, #0
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2302      	movs	r3, #2
 8001156:	494d      	ldr	r1, [pc, #308]	; (800128c <SPI2_Periph_Enable+0x190>)
 8001158:	f7ff fd05 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2105      	movs	r1, #5
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fde8 	bl	8000d38 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d113      	bne.n	8001196 <SPI2_Periph_Enable+0x9a>
	case 3:
		GPIO_Config(&SPI2_Periph, GPIOD, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800116e:	797a      	ldrb	r2, [r7, #5]
 8001170:	f107 000c 	add.w	r0, r7, #12
 8001174:	2300      	movs	r3, #0
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2300      	movs	r3, #0
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	2300      	movs	r3, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2302      	movs	r3, #2
 8001182:	4943      	ldr	r1, [pc, #268]	; (8001290 <SPI2_Periph_Enable+0x194>)
 8001184:	f7ff fcef 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2105      	movs	r1, #5
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fdd2 	bl	8000d38 <GPIO_Init>
		break;
 8001194:	e013      	b.n	80011be <SPI2_Periph_Enable+0xc2>
	default:
		GPIO_Config(&SPI2_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001196:	797a      	ldrb	r2, [r7, #5]
 8001198:	f107 000c 	add.w	r0, r7, #12
 800119c:	2300      	movs	r3, #0
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2300      	movs	r3, #0
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	4938      	ldr	r1, [pc, #224]	; (800128c <SPI2_Periph_Enable+0x190>)
 80011ac:	f7ff fcdb 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2105      	movs	r1, #5
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fdbe 	bl	8000d38 <GPIO_Init>
		break;
 80011bc:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 80011be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d002      	beq.n	80011cc <SPI2_Periph_Enable+0xd0>
 80011c6:	2b0e      	cmp	r3, #14
 80011c8:	d015      	beq.n	80011f6 <SPI2_Periph_Enable+0xfa>
 80011ca:	e029      	b.n	8001220 <SPI2_Periph_Enable+0x124>
	case 2:
		GPIO_Config(&SPI2_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80011cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80011d0:	f107 000c 	add.w	r0, r7, #12
 80011d4:	2300      	movs	r3, #0
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2300      	movs	r3, #0
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2302      	movs	r3, #2
 80011e2:	492c      	ldr	r1, [pc, #176]	; (8001294 <SPI2_Periph_Enable+0x198>)
 80011e4:	f7ff fcbf 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2105      	movs	r1, #5
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fda2 	bl	8000d38 <GPIO_Init>
		break;
 80011f4:	e014      	b.n	8001220 <SPI2_Periph_Enable+0x124>
	case 14:
		GPIO_Config(&SPI2_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80011f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80011fa:	f107 000c 	add.w	r0, r7, #12
 80011fe:	2300      	movs	r3, #0
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2300      	movs	r3, #0
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2302      	movs	r3, #2
 800120c:	491f      	ldr	r1, [pc, #124]	; (800128c <SPI2_Periph_Enable+0x190>)
 800120e:	f7ff fcaa 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2105      	movs	r1, #5
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd8d 	bl	8000d38 <GPIO_Init>
		break;
 800121e:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8001220:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d002      	beq.n	800122e <SPI2_Periph_Enable+0x132>
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d015      	beq.n	8001258 <SPI2_Periph_Enable+0x15c>
	case 15:
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI2_Periph, AF5);
		break;
	}
}
 800122c:	e029      	b.n	8001282 <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800122e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001232:	f107 000c 	add.w	r0, r7, #12
 8001236:	2300      	movs	r3, #0
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2300      	movs	r3, #0
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2300      	movs	r3, #0
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2302      	movs	r3, #2
 8001244:	4913      	ldr	r1, [pc, #76]	; (8001294 <SPI2_Periph_Enable+0x198>)
 8001246:	f7ff fc8e 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2105      	movs	r1, #5
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fd71 	bl	8000d38 <GPIO_Init>
		break;
 8001256:	e014      	b.n	8001282 <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001258:	f897 2020 	ldrb.w	r2, [r7, #32]
 800125c:	f107 000c 	add.w	r0, r7, #12
 8001260:	2300      	movs	r3, #0
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2300      	movs	r3, #0
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	2300      	movs	r3, #0
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2302      	movs	r3, #2
 800126e:	4907      	ldr	r1, [pc, #28]	; (800128c <SPI2_Periph_Enable+0x190>)
 8001270:	f7ff fc79 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2105      	movs	r1, #5
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fd5c 	bl	8000d38 <GPIO_Init>
		break;
 8001280:	bf00      	nop
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40020400 	.word	0x40020400
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40020800 	.word	0x40020800

08001298 <SPI3_Periph_Enable>:

void SPI3_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af04      	add	r7, sp, #16
 800129e:	6039      	str	r1, [r7, #0]
 80012a0:	4611      	mov	r1, r2
 80012a2:	461a      	mov	r2, r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	460b      	mov	r3, r1
 80012aa:	71bb      	strb	r3, [r7, #6]
 80012ac:	4613      	mov	r3, r2
 80012ae:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI3_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d013      	beq.n	80012de <SPI3_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI3_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 80012b6:	79ba      	ldrb	r2, [r7, #6]
 80012b8:	f107 000c 	add.w	r0, r7, #12
 80012bc:	2301      	movs	r3, #1
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	2300      	movs	r3, #0
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	2300      	movs	r3, #0
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2301      	movs	r3, #1
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	f7ff fc4b 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, 0x00);
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fd2e 	bl	8000d38 <GPIO_Init>
 80012dc:	e012      	b.n	8001304 <SPI3_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI3_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80012de:	79ba      	ldrb	r2, [r7, #6]
 80012e0:	f107 000c 	add.w	r0, r7, #12
 80012e4:	2300      	movs	r3, #0
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2302      	movs	r3, #2
 80012f2:	495a      	ldr	r1, [pc, #360]	; (800145c <SPI3_Periph_Enable+0x1c4>)
 80012f4:	f7ff fc37 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2106      	movs	r1, #6
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fd1a 	bl	8000d38 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d015      	beq.n	8001336 <SPI3_Periph_Enable+0x9e>
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d127      	bne.n	800135e <SPI3_Periph_Enable+0xc6>
	case 10:
		GPIO_Config(&SPI3_Periph, GPIOC, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800130e:	797a      	ldrb	r2, [r7, #5]
 8001310:	f107 000c 	add.w	r0, r7, #12
 8001314:	2300      	movs	r3, #0
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	2300      	movs	r3, #0
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	2300      	movs	r3, #0
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2302      	movs	r3, #2
 8001322:	494f      	ldr	r1, [pc, #316]	; (8001460 <SPI3_Periph_Enable+0x1c8>)
 8001324:	f7ff fc1f 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2106      	movs	r1, #6
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fd02 	bl	8000d38 <GPIO_Init>
		break;
 8001334:	e013      	b.n	800135e <SPI3_Periph_Enable+0xc6>
	case 3:
		GPIO_Config(&SPI3_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001336:	797a      	ldrb	r2, [r7, #5]
 8001338:	f107 000c 	add.w	r0, r7, #12
 800133c:	2300      	movs	r3, #0
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2300      	movs	r3, #0
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2300      	movs	r3, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2302      	movs	r3, #2
 800134a:	4946      	ldr	r1, [pc, #280]	; (8001464 <SPI3_Periph_Enable+0x1cc>)
 800134c:	f7ff fc0b 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2106      	movs	r1, #6
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fcee 	bl	8000d38 <GPIO_Init>
		break;
 800135c:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 800135e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001362:	2b04      	cmp	r3, #4
 8001364:	d016      	beq.n	8001394 <SPI3_Periph_Enable+0xfc>
 8001366:	2b0b      	cmp	r3, #11
 8001368:	d129      	bne.n	80013be <SPI3_Periph_Enable+0x126>
	case 11:
		GPIO_Config(&SPI3_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800136a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800136e:	f107 000c 	add.w	r0, r7, #12
 8001372:	2300      	movs	r3, #0
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2300      	movs	r3, #0
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	2300      	movs	r3, #0
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2302      	movs	r3, #2
 8001380:	4937      	ldr	r1, [pc, #220]	; (8001460 <SPI3_Periph_Enable+0x1c8>)
 8001382:	f7ff fbf0 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2106      	movs	r1, #6
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fcd3 	bl	8000d38 <GPIO_Init>
		break;
 8001392:	e014      	b.n	80013be <SPI3_Periph_Enable+0x126>
	case 4:
		GPIO_Config(&SPI3_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001394:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001398:	f107 000c 	add.w	r0, r7, #12
 800139c:	2300      	movs	r3, #0
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	2300      	movs	r3, #0
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2300      	movs	r3, #0
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2302      	movs	r3, #2
 80013aa:	492e      	ldr	r1, [pc, #184]	; (8001464 <SPI3_Periph_Enable+0x1cc>)
 80013ac:	f7ff fbdb 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2106      	movs	r1, #6
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fcbe 	bl	8000d38 <GPIO_Init>
		break;
 80013bc:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 80013be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d006      	beq.n	80013d4 <SPI3_Periph_Enable+0x13c>
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	dc43      	bgt.n	8001452 <SPI3_Periph_Enable+0x1ba>
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d017      	beq.n	80013fe <SPI3_Periph_Enable+0x166>
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d02a      	beq.n	8001428 <SPI3_Periph_Enable+0x190>
		break;
	case 6:
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI3_Periph, AF5);
	}
}
 80013d2:	e03e      	b.n	8001452 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80013d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013d8:	f107 000c 	add.w	r0, r7, #12
 80013dc:	2300      	movs	r3, #0
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	2300      	movs	r3, #0
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2302      	movs	r3, #2
 80013ea:	491d      	ldr	r1, [pc, #116]	; (8001460 <SPI3_Periph_Enable+0x1c8>)
 80013ec:	f7ff fbbb 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2106      	movs	r1, #6
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fc9e 	bl	8000d38 <GPIO_Init>
		break;
 80013fc:	e029      	b.n	8001452 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80013fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001402:	f107 000c 	add.w	r0, r7, #12
 8001406:	2300      	movs	r3, #0
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2300      	movs	r3, #0
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2302      	movs	r3, #2
 8001414:	4913      	ldr	r1, [pc, #76]	; (8001464 <SPI3_Periph_Enable+0x1cc>)
 8001416:	f7ff fba6 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2106      	movs	r1, #6
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fc89 	bl	8000d38 <GPIO_Init>
		break;
 8001426:	e014      	b.n	8001452 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001428:	f897 2020 	ldrb.w	r2, [r7, #32]
 800142c:	f107 000c 	add.w	r0, r7, #12
 8001430:	2300      	movs	r3, #0
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2300      	movs	r3, #0
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	2300      	movs	r3, #0
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	490a      	ldr	r1, [pc, #40]	; (8001468 <SPI3_Periph_Enable+0x1d0>)
 8001440:	f7ff fb91 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF5);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2105      	movs	r1, #5
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc74 	bl	8000d38 <GPIO_Init>
}
 8001450:	e7ff      	b.n	8001452 <SPI3_Periph_Enable+0x1ba>
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40020000 	.word	0x40020000
 8001460:	40020800 	.word	0x40020800
 8001464:	40020400 	.word	0x40020400
 8001468:	40020c00 	.word	0x40020c00

0800146c <SPI4_Periph_Enable>:

void SPI4_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af04      	add	r7, sp, #16
 8001472:	6039      	str	r1, [r7, #0]
 8001474:	4611      	mov	r1, r2
 8001476:	461a      	mov	r2, r3
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	460b      	mov	r3, r1
 800147e:	71bb      	strb	r3, [r7, #6]
 8001480:	4613      	mov	r3, r2
 8001482:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI4_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d013      	beq.n	80014b2 <SPI4_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI4_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 800148a:	79ba      	ldrb	r2, [r7, #6]
 800148c:	f107 000c 	add.w	r0, r7, #12
 8001490:	2301      	movs	r3, #1
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2300      	movs	r3, #0
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	2300      	movs	r3, #0
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	f7ff fb61 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI4_Periph, 0x00);
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc44 	bl	8000d38 <GPIO_Init>
 80014b0:	e012      	b.n	80014d8 <SPI4_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI4_Periph, GPIOE, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80014b2:	79ba      	ldrb	r2, [r7, #6]
 80014b4:	f107 000c 	add.w	r0, r7, #12
 80014b8:	2300      	movs	r3, #0
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2300      	movs	r3, #0
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	2300      	movs	r3, #0
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2302      	movs	r3, #2
 80014c6:	4924      	ldr	r1, [pc, #144]	; (8001558 <SPI4_Periph_Enable+0xec>)
 80014c8:	f7ff fb4d 	bl	8000b66 <GPIO_Config>
		GPIO_Init(&SPI4_Periph, AF5);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2105      	movs	r1, #5
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc30 	bl	8000d38 <GPIO_Init>
	}

	//Configure the SPI clock pin
	GPIO_Config(&SPI4_Periph, GPIOE, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80014d8:	797a      	ldrb	r2, [r7, #5]
 80014da:	f107 000c 	add.w	r0, r7, #12
 80014de:	2300      	movs	r3, #0
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	2300      	movs	r3, #0
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	2300      	movs	r3, #0
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2302      	movs	r3, #2
 80014ec:	491a      	ldr	r1, [pc, #104]	; (8001558 <SPI4_Periph_Enable+0xec>)
 80014ee:	f7ff fb3a 	bl	8000b66 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2105      	movs	r1, #5
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fc1d 	bl	8000d38 <GPIO_Init>

	//Configure MISO Pin
	GPIO_Config(&SPI4_Periph, GPIOE, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80014fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001502:	f107 000c 	add.w	r0, r7, #12
 8001506:	2300      	movs	r3, #0
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2300      	movs	r3, #0
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	2300      	movs	r3, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2302      	movs	r3, #2
 8001514:	4910      	ldr	r1, [pc, #64]	; (8001558 <SPI4_Periph_Enable+0xec>)
 8001516:	f7ff fb26 	bl	8000b66 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2105      	movs	r1, #5
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fc09 	bl	8000d38 <GPIO_Init>

	//Configure MOSI pin
	GPIO_Config(&SPI4_Periph, GPIOE, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001526:	f897 2020 	ldrb.w	r2, [r7, #32]
 800152a:	f107 000c 	add.w	r0, r7, #12
 800152e:	2300      	movs	r3, #0
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	2300      	movs	r3, #0
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	2300      	movs	r3, #0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2302      	movs	r3, #2
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <SPI4_Periph_Enable+0xec>)
 800153e:	f7ff fb12 	bl	8000b66 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2105      	movs	r1, #5
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fbf5 	bl	8000d38 <GPIO_Init>

}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <GPIO_WritePin>:
 *			GPIO_Reset		or		0x2
 *			GPIO_Toggle		or		0x3
 */

void GPIO_WritePin(GPIO_Config_t *GPIO_Config, uint8_t State)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	73fb      	strb	r3, [r7, #15]

	if(State == GPIO_Write)
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10a      	bne.n	800158a <GPIO_WritePin+0x2e>
	{
		GPIO_Config->GPIO_Port->ODR |= (0x1UL << pin);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	6959      	ldr	r1, [r3, #20]
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2201      	movs	r2, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	430a      	orrs	r2, r1
 8001586:	615a      	str	r2, [r3, #20]
	else if(State == GPIO_Toggle)
	{
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
	}

}
 8001588:	e01c      	b.n	80015c4 <GPIO_WritePin+0x68>
	else if(State == GPIO_Reset)
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d10c      	bne.n	80015aa <GPIO_WritePin+0x4e>
		GPIO_Config->GPIO_Port->ODR &= ~(0x1UL << pin);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	6959      	ldr	r1, [r3, #20]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2201      	movs	r2, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	400a      	ands	r2, r1
 80015a6:	615a      	str	r2, [r3, #20]
}
 80015a8:	e00c      	b.n	80015c4 <GPIO_WritePin+0x68>
	else if(State == GPIO_Toggle)
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d109      	bne.n	80015c4 <GPIO_WritePin+0x68>
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	6959      	ldr	r1, [r3, #20]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2201      	movs	r2, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	404a      	eors	r2, r1
 80015c2:	615a      	str	r2, [r3, #20]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d106      	bne.n	80015f0 <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <RCC_AHB1Cmd+0x3c>)
 80015e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e6:	4909      	ldr	r1, [pc, #36]	; (800160c <RCC_AHB1Cmd+0x3c>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 80015ee:	e006      	b.n	80015fe <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <RCC_AHB1Cmd+0x3c>)
 80015f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	4904      	ldr	r1, [pc, #16]	; (800160c <RCC_AHB1Cmd+0x3c>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <RCC_APB1Cmd>:
 * @param	APB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB1Cmd(uint32_t APB1_Periph, FunctionalState State)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <RCC_APB1Cmd+0x20>
	{
		RCC->APB1ENR |= APB1_Periph;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <RCC_APB1Cmd+0x3c>)
 8001624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001626:	4909      	ldr	r1, [pc, #36]	; (800164c <RCC_APB1Cmd+0x3c>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	640b      	str	r3, [r1, #64]	; 0x40

	else
	{
		RCC->APB1ENR &= ~APB1_Periph;
	}
}
 800162e:	e006      	b.n	800163e <RCC_APB1Cmd+0x2e>
		RCC->APB1ENR &= ~APB1_Periph;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <RCC_APB1Cmd+0x3c>)
 8001632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	43db      	mvns	r3, r3
 8001638:	4904      	ldr	r1, [pc, #16]	; (800164c <RCC_APB1Cmd+0x3c>)
 800163a:	4013      	ands	r3, r2
 800163c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <RCC_APB2Cmd>:
 * @param	APB2_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB2Cmd(uint32_t APB2_Periph, FunctionalState State)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <RCC_APB2Cmd+0x20>
	{
		RCC->APB2ENR |= APB2_Periph;
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <RCC_APB2Cmd+0x3c>)
 8001664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001666:	4909      	ldr	r1, [pc, #36]	; (800168c <RCC_APB2Cmd+0x3c>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4313      	orrs	r3, r2
 800166c:	644b      	str	r3, [r1, #68]	; 0x44

	else
	{
		RCC->APB2ENR &= ~APB2_Periph;
	}
}
 800166e:	e006      	b.n	800167e <RCC_APB2Cmd+0x2e>
		RCC->APB2ENR &= ~APB2_Periph;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <RCC_APB2Cmd+0x3c>)
 8001672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	43db      	mvns	r3, r3
 8001678:	4904      	ldr	r1, [pc, #16]	; (800168c <RCC_APB2Cmd+0x3c>)
 800167a:	4013      	ands	r3, r2
 800167c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	; (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <Check_Flag>:
 * brief	A helper function that keeps track of specific flags in the status register.
 *
 * @retval	Returns status of the flag which is defined in an enumeration.
 */
static Flag_Status Check_Flag(SPI_Handle_t *SPI_Handle, uint32_t flag)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	if(SPI_Handle->SPIx->SR & flag)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <Check_Flag+0x1c>
	{
		return Flag_Set;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <Check_Flag+0x1e>
	}

	else
	{
		return Flag_Unset;
 80016e8:	2300      	movs	r3, #0
	}

}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <SPI_Init>:
/*
 * @Brief	SPI initialization function that sets all the configurations such as clock phase, polarity, data frame,
 * 			data format and more.
 */
void SPI_Init(SPI_Handle_t *SPI_Handle)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]
	uint8_t cs_pin, clk_pin, mosi_pin, miso_pin;
	cs_pin = SPI_Handle->SPI_Config.pin_cs;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	791b      	ldrb	r3, [r3, #4]
 8001704:	73fb      	strb	r3, [r7, #15]
	clk_pin = SPI_Handle->SPI_Config.pin_clk;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	795b      	ldrb	r3, [r3, #5]
 800170a:	73bb      	strb	r3, [r7, #14]
	mosi_pin = SPI_Handle->SPI_Config.pin_mosi;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	737b      	strb	r3, [r7, #13]
	miso_pin = SPI_Handle->SPI_Config.pin_miso;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	79db      	ldrb	r3, [r3, #7]
 8001716:	733b      	strb	r3, [r7, #12]
	/*
	 * Set the specified pins based on which SPI peripheral is chosen and whether or not the SSM bit is enabled or
	 * disabled. These functions are called from the "stm32f401_gpio.h" file, and are defined in the stm32f401_gpio.c file.
	 * This also enables clock access to the specified SPI peripheral using functions from the stm32f401_rcc file.
	 */
	if(SPI_Handle->SPIx == SPI1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a5f      	ldr	r2, [pc, #380]	; (800189c <SPI_Init+0x1a4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d112      	bne.n	8001748 <SPI_Init+0x50>
	{
		SPI1_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7c58      	ldrb	r0, [r3, #17]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6899      	ldr	r1, [r3, #8]
 800172a:	7bbc      	ldrb	r4, [r7, #14]
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	7b3b      	ldrb	r3, [r7, #12]
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4623      	mov	r3, r4
 8001738:	f7ff fc28 	bl	8000f8c <SPI1_Periph_Enable>
		RCC_APB2Cmd(SPI1_Enable, ENABLE);
 800173c:	2101      	movs	r1, #1
 800173e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001742:	f7ff ff85 	bl	8001650 <RCC_APB2Cmd>
 8001746:	e041      	b.n	80017cc <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a54      	ldr	r2, [pc, #336]	; (80018a0 <SPI_Init+0x1a8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d112      	bne.n	8001778 <SPI_Init+0x80>
	{
		SPI2_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7c58      	ldrb	r0, [r3, #17]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	7bbc      	ldrb	r4, [r7, #14]
 800175c:	7bfa      	ldrb	r2, [r7, #15]
 800175e:	7b3b      	ldrb	r3, [r7, #12]
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	7b7b      	ldrb	r3, [r7, #13]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4623      	mov	r3, r4
 8001768:	f7ff fcc8 	bl	80010fc <SPI2_Periph_Enable>
		RCC_APB1Cmd(SPI2_Enable, ENABLE);
 800176c:	2101      	movs	r1, #1
 800176e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001772:	f7ff ff4d 	bl	8001610 <RCC_APB1Cmd>
 8001776:	e029      	b.n	80017cc <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a49      	ldr	r2, [pc, #292]	; (80018a4 <SPI_Init+0x1ac>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d112      	bne.n	80017a8 <SPI_Init+0xb0>
	{
		SPI3_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7c58      	ldrb	r0, [r3, #17]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6899      	ldr	r1, [r3, #8]
 800178a:	7bbc      	ldrb	r4, [r7, #14]
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	7b3b      	ldrb	r3, [r7, #12]
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	7b7b      	ldrb	r3, [r7, #13]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	4623      	mov	r3, r4
 8001798:	f7ff fd7e 	bl	8001298 <SPI3_Periph_Enable>
		RCC_APB1Cmd(SPI3_Enable, ENABLE);
 800179c:	2101      	movs	r1, #1
 800179e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017a2:	f7ff ff35 	bl	8001610 <RCC_APB1Cmd>
 80017a6:	e011      	b.n	80017cc <SPI_Init+0xd4>
	}
	else
	{
		SPI4_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7c58      	ldrb	r0, [r3, #17]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6899      	ldr	r1, [r3, #8]
 80017b0:	7bbc      	ldrb	r4, [r7, #14]
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	7b3b      	ldrb	r3, [r7, #12]
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	7b7b      	ldrb	r3, [r7, #13]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4623      	mov	r3, r4
 80017be:	f7ff fe55 	bl	800146c <SPI4_Periph_Enable>
		RCC_APB2Cmd(SPI4_Enable, ENABLE);
 80017c2:	2101      	movs	r1, #1
 80017c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017c8:	f7ff ff42 	bl	8001650 <RCC_APB2Cmd>
	}

	//Set BaudRate control
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.baudrate_ctrl) << CR1_BR_Pos);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7b1b      	ldrb	r3, [r3, #12]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4619      	mov	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]

	//Set CPOL and CHPA
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpha);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7b9b      	ldrb	r3, [r3, #14]
 80017ec:	4619      	mov	r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpol);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7b5b      	ldrb	r3, [r3, #13]
 8001800:	4619      	mov	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	601a      	str	r2, [r3, #0]

	//Set Data format to either LSB or MSB first
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.data_format);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7bdb      	ldrb	r3, [r3, #15]
 8001814:	4619      	mov	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

	//Set mode to master
	SPI_Handle->SPIx->CR1 |= CR1_MSTR_Enable;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0204 	orr.w	r2, r2, #4
 800182c:	601a      	str	r2, [r3, #0]

	//Set 8 bit
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->data_frame) << CR1_DFF_Pos);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7c1b      	ldrb	r3, [r3, #16]
 8001838:	02db      	lsls	r3, r3, #11
 800183a:	4619      	mov	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
	 * If SSM is not enabled, then SSOE (slave select output enabled) is used which uses the NSS pin as the CS and
	 * it automatically handled by the MCU. When this mode is selected, as soon as the SPI is enabled in master mode, the
	 * CS will go low and will only go high when SPI is disabled. This is why if SSM is enabled, the SPI is enabled also but
	 * if SSOE is enabled it is not enabled in the Init function.
	 */
	if(SPI_Handle->ssm)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7c5b      	ldrb	r3, [r3, #17]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01b      	beq.n	8001884 <SPI_Init+0x18c>
	{
		//Set SSM and SSI high
		SPI_Handle->SPIx->CR1 |= ((SPI_Handle->ssm) << CR1_SSM_Pos);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7c5b      	ldrb	r3, [r3, #17]
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	4619      	mov	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
		SPI_Handle->SPIx->CR1 |= CR1_SSI_Enable;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001870:	601a      	str	r2, [r3, #0]
		//Enable SPI periph
		SPI_Handle->SPIx->CR1 |= CR1_SPE_Enable;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001880:	601a      	str	r2, [r3, #0]
	{
		//Set SSOE high
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
	}

}
 8001882:	e007      	b.n	8001894 <SPI_Init+0x19c>
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0204 	orr.w	r2, r2, #4
 8001892:	605a      	str	r2, [r3, #4]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	40013000 	.word	0x40013000
 80018a0:	40003800 	.word	0x40003800
 80018a4:	40003c00 	.word	0x40003c00

080018a8 <Enable_NVIC>:

/*
 * @brief	Support function used to enable the NVIC interrupts
 */
static void Enable_NVIC(SPI_Handle_t *SPI_Handle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	if(SPI_Handle->SPIx == SPI1){
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <Enable_NVIC+0x4c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d103      	bne.n	80018c2 <Enable_NVIC+0x1a>
		NVIC_EnableIRQ(SPI1_IRQn);
 80018ba:	2023      	movs	r0, #35	; 0x23
 80018bc:	f7ff fee8 	bl	8001690 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(SPI3_IRQn);
	}
	else{
		NVIC_EnableIRQ(SPI4_IRQn);
	}
}
 80018c0:	e014      	b.n	80018ec <Enable_NVIC+0x44>
	else if(SPI_Handle->SPIx == SPI2){
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <Enable_NVIC+0x50>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d103      	bne.n	80018d4 <Enable_NVIC+0x2c>
		NVIC_EnableIRQ(SPI2_IRQn);
 80018cc:	2024      	movs	r0, #36	; 0x24
 80018ce:	f7ff fedf 	bl	8001690 <__NVIC_EnableIRQ>
}
 80018d2:	e00b      	b.n	80018ec <Enable_NVIC+0x44>
	else if(SPI_Handle->SPIx == SPI3){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a08      	ldr	r2, [pc, #32]	; (80018fc <Enable_NVIC+0x54>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d103      	bne.n	80018e6 <Enable_NVIC+0x3e>
		NVIC_EnableIRQ(SPI3_IRQn);
 80018de:	2033      	movs	r0, #51	; 0x33
 80018e0:	f7ff fed6 	bl	8001690 <__NVIC_EnableIRQ>
}
 80018e4:	e002      	b.n	80018ec <Enable_NVIC+0x44>
		NVIC_EnableIRQ(SPI4_IRQn);
 80018e6:	2054      	movs	r0, #84	; 0x54
 80018e8:	f7ff fed2 	bl	8001690 <__NVIC_EnableIRQ>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013000 	.word	0x40013000
 80018f8:	40003800 	.word	0x40003800
 80018fc:	40003c00 	.word	0x40003c00

08001900 <Disable_SPI_Transmission>:
/*
 * @brief	Support function used to disable interrupt transmission only when SSOE
 * is being used.
 */
static void Disable_SPI_Transmission(SPI_Handle_t *SPI_Handle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	/*Temporary variable to clear the overrun flag - the overrun flag is cleared
	 * by reading the DR followed by the SR.
	 */
	uint32_t clear_overrun;

	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 8001908:	bf00      	nop
 800190a:	2102      	movs	r1, #2
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff fedd 	bl	80016cc <Check_Flag>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f8      	beq.n	800190a <Disable_SPI_Transmission+0xa>
	//Disable TXEIE bit in CR2
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001926:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 8001928:	bf00      	nop
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fecd 	bl	80016cc <Check_Flag>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f8      	bne.n	800192a <Disable_SPI_Transmission+0x2a>

	//Clear overrun flag
	clear_overrun = SPI_Handle->SPIx->DR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	60fb      	str	r3, [r7, #12]
	clear_overrun = SPI_Handle->SPIx->SR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	60fb      	str	r3, [r7, #12]

	//Disable SPI periph
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001956:	601a      	str	r2, [r3, #0]

	//Reset bus state back to SPI_Ready to allow another communication to begin.
	SPI_Handle->bus_state = SPI_Ready;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	765a      	strb	r2, [r3, #25]
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <Disable_SPI_Reception>:

/*
 * @brief	Support function used to disable SPI reception when using interrupts with SSOE.
 */
static void Disable_SPI_Reception(SPI_Handle_t *SPI_Handle)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 800196e:	bf00      	nop
 8001970:	2102      	movs	r1, #2
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff feaa 	bl	80016cc <Check_Flag>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f8      	beq.n	8001970 <Disable_SPI_Reception+0xa>

	//Disable TXEIE and RXNEIE bit
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198c:	605a      	str	r2, [r3, #4]
	SPI_Handle->SPIx->CR2 &= ~CR2_RXNEIE_Enable;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800199c:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 800199e:	bf00      	nop
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fe92 	bl	80016cc <Check_Flag>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f8      	bne.n	80019a0 <Disable_SPI_Reception+0x3a>

	//Disable SPI periph
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019bc:	601a      	str	r2, [r3, #0]

	//Set the SPI bus state back to SPI_Ready to allow for another seperate SPI transmission
	SPI_Handle->bus_state = SPI_Ready;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	765a      	strb	r2, [r3, #25]
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <TXE_Interrupt_Handler>:
 * @brief	Support function to transmit data when an interrupt is generated by the TXE flag.
 *
 * @note	This function is called directly from the interrupt service routine.
 */
static void TXE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	//Check if the bus state is currently in SPI_Transmitting
	if(SPI_Handle->bus_state == SPI_Transmitting)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e5b      	ldrb	r3, [r3, #25]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d153      	bne.n	8001a84 <TXE_Interrupt_Handler+0xb8>
	{
		//16 bit data mode
		if(SPI_Handle->data_frame == Data_16_Bits)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7c1b      	ldrb	r3, [r3, #16]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d11e      	bne.n	8001a22 <TXE_Interrupt_Handler+0x56>
		{
			if(SPI_Handle->tx_length)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e1b      	ldrb	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <TXE_Interrupt_Handler+0x3e>
			{
				//Write values from the data buffer into the data register to be transmitted
				SPI_Handle->SPIx->DR = *((uint16_t *)SPI_Handle->pTxBuffer++);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	1c59      	adds	r1, r3, #1
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6151      	str	r1, [r2, #20]
 80019f6:	881a      	ldrh	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60da      	str	r2, [r3, #12]
				SPI_Handle->tx_length--;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e1b      	ldrb	r3, [r3, #24]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	761a      	strb	r2, [r3, #24]
			}

			if(SPI_Handle->tx_length == 0 && (!SPI_Handle->ssm))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7e1b      	ldrb	r3, [r3, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d13e      	bne.n	8001a90 <TXE_Interrupt_Handler+0xc4>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7c5b      	ldrb	r3, [r3, #17]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13a      	bne.n	8001a90 <TXE_Interrupt_Handler+0xc4>
			{
				Disable_SPI_Transmission(SPI_Handle);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff70 	bl	8001900 <Disable_SPI_Transmission>
	{
		//Transmit the address of the register to read from
		SPI_Handle->SPIx->DR = SPI_Handle->reg_address;

	}
}
 8001a20:	e036      	b.n	8001a90 <TXE_Interrupt_Handler+0xc4>
			if(SPI_Handle->tx_length)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7e1b      	ldrb	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00e      	beq.n	8001a48 <TXE_Interrupt_Handler+0x7c>
				SPI_Handle->SPIx->DR = *(SPI_Handle->pTxBuffer++);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	1c59      	adds	r1, r3, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6151      	str	r1, [r2, #20]
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60da      	str	r2, [r3, #12]
				SPI_Handle->tx_length--;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7e1b      	ldrb	r3, [r3, #24]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	761a      	strb	r2, [r3, #24]
			if(SPI_Handle->tx_length == 0)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7e1b      	ldrb	r3, [r3, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11f      	bne.n	8001a90 <TXE_Interrupt_Handler+0xc4>
				SPI_Handle->bus_state = SPI_Ready;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	765a      	strb	r2, [r3, #25]
				if(!SPI_Handle->ssm)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7c5b      	ldrb	r3, [r3, #17]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <TXE_Interrupt_Handler+0x9a>
					Disable_SPI_Transmission(SPI_Handle);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff4e 	bl	8001900 <Disable_SPI_Transmission>
}
 8001a64:	e014      	b.n	8001a90 <TXE_Interrupt_Handler+0xc4>
					SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a74:	605a      	str	r2, [r3, #4]
					GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd6d 	bl	800155c <GPIO_WritePin>
}
 8001a82:	e005      	b.n	8001a90 <TXE_Interrupt_Handler+0xc4>
		SPI_Handle->SPIx->DR = SPI_Handle->reg_address;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60da      	str	r2, [r3, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <RXNE_Interrupt_Handler>:
/*
 * @Brief	Support function called from the interrupt service handler when the RXNE flag
 * 			is raised.
 */
static void RXNE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	//For 16 bit data transmission
	if(SPI_Handle->data_frame == Data_16_Bits)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7c1b      	ldrb	r3, [r3, #16]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d117      	bne.n	8001ad8 <RXNE_Interrupt_Handler+0x40>
	{
		//If rx_length is greater than 0
		if(SPI_Handle->rx_length)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d029      	beq.n	8001b06 <RXNE_Interrupt_Handler+0x6e>
		{
			//Read value from Data register inot buffer
			*((uint16_t *)SPI_Handle->pRxBuffer++) = SPI_Handle->SPIx->DR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68d8      	ldr	r0, [r3, #12]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	1c59      	adds	r1, r3, #1
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	61d1      	str	r1, [r2, #28]
 8001ac2:	b282      	uxth	r2, r0
 8001ac4:	801a      	strh	r2, [r3, #0]
			SPI_Handle->rx_length--;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f883 2020 	strb.w	r2, [r3, #32]
 8001ad6:	e016      	b.n	8001b06 <RXNE_Interrupt_Handler+0x6e>

	//For 8 bit data transmission
	else
	{
		//If rx_length is greater than 0
		if(SPI_Handle->rx_length)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d011      	beq.n	8001b06 <RXNE_Interrupt_Handler+0x6e>
		{
			//Read value from Data register inot buffer
			*(SPI_Handle->pRxBuffer++) = SPI_Handle->SPIx->DR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68d8      	ldr	r0, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	1c59      	adds	r1, r3, #1
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	61d1      	str	r1, [r2, #28]
 8001af2:	b2c2      	uxtb	r2, r0
 8001af4:	701a      	strb	r2, [r3, #0]
			SPI_Handle->rx_length--;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}


	if(SPI_Handle->rx_length == 0)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d120      	bne.n	8001b52 <RXNE_Interrupt_Handler+0xba>
	{
		//Set the spi bus back to SPI_Ready
		SPI_Handle->bus_state = SPI_Ready;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	765a      	strb	r2, [r3, #25]

		//If SSM is disabled
		if(!SPI_Handle->ssm)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7c5b      	ldrb	r3, [r3, #17]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <RXNE_Interrupt_Handler+0x8e>
		{
			Disable_SPI_Reception(SPI_Handle);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff21 	bl	8001966 <Disable_SPI_Reception>

			//Pull chip select high
			GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
		}
	}
}
 8001b24:	e015      	b.n	8001b52 <RXNE_Interrupt_Handler+0xba>
			SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b34:	605a      	str	r2, [r3, #4]
			SPI_Handle->SPIx->CR2 &= ~CR2_RXNEIE_Enable;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b44:	605a      	str	r2, [r3, #4]
			GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fd05 	bl	800155c <GPIO_WritePin>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <SPI_MultiSlave_TransmitIT>:
 *
 * @note	This requires a GPIO slave device to be passed in, which is created form the GPIO driver included in this file.
 * 			This function will handle pulling the CS low, all that is needed, is to specifcy which slave to interact with.
 */
void SPI_MultiSlave_TransmitIT(SPI_Handle_t *SPI_Handle, GPIO_Config_t *Slave_Device, uint8_t *input_buffer, uint8_t num_of_bytes)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	70fb      	strb	r3, [r7, #3]
	if(SPI_Handle->bus_state == SPI_Ready)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	7e5b      	ldrb	r3, [r3, #25]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11a      	bne.n	8001ba6 <SPI_MultiSlave_TransmitIT+0x4c>
	{
		SPI_Handle->pTxBuffer = input_buffer;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	615a      	str	r2, [r3, #20]
		SPI_Handle->tx_length = num_of_bytes;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	761a      	strb	r2, [r3, #24]
		SPI_Handle->bus_state = SPI_Transmitting;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	765a      	strb	r2, [r3, #25]
		SPI_Handle->Slave = Slave_Device;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

		//Enable NVIC interrupts
		Enable_NVIC(SPI_Handle);
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff fe8d 	bl	80018a8 <Enable_NVIC>

		//Pull Slave Device Low to begin data transmission
		GPIO_WritePin(Slave_Device, GPIO_Reset);
 8001b8e:	2102      	movs	r1, #2
 8001b90:	68b8      	ldr	r0, [r7, #8]
 8001b92:	f7ff fce3 	bl	800155c <GPIO_WritePin>

		//Enable TXEIE and RXNEIE bit in CR2
		SPI_Handle->SPIx->CR2 |= CR2_TXEIE_Enable;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba4:	605a      	str	r2, [r3, #4]
	}
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <SPI_MultiSlave_RecieveIT>:
 *
 * @note	This requires a GPIO slave device to be passed in, which is created form the GPIO driver included in this file.
 * 			This function will handle pulling the CS low, all that is needed, is to specifcy which slave to interact with.
 */
void SPI_MultiSlave_RecieveIT(SPI_Handle_t *SPI_Handle, GPIO_Config_t *Slave_Device, uint8_t *output_buffer, uint8_t num_of_bytes, uint8_t address)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	70fb      	strb	r3, [r7, #3]
	if(SPI_Handle->bus_state == SPI_Ready)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	7e5b      	ldrb	r3, [r3, #25]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d127      	bne.n	8001c14 <SPI_MultiSlave_RecieveIT+0x66>
	{
		SPI_Handle->pRxBuffer = output_buffer;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	61da      	str	r2, [r3, #28]
		SPI_Handle->rx_length = num_of_bytes;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	f883 2020 	strb.w	r2, [r3, #32]
		SPI_Handle->bus_state = SPI_Receiving;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	765a      	strb	r2, [r3, #25]
		SPI_Handle->reg_address = address;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	7e3a      	ldrb	r2, [r7, #24]
 8001bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		SPI_Handle->Slave = Slave_Device;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

		//Enable NVIC interrupts
		Enable_NVIC(SPI_Handle);
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f7ff fe5e 	bl	80018a8 <Enable_NVIC>

		//Pull Slave Device Low to begin data transmission
		GPIO_WritePin(Slave_Device, GPIO_Reset);
 8001bec:	2102      	movs	r1, #2
 8001bee:	68b8      	ldr	r0, [r7, #8]
 8001bf0:	f7ff fcb4 	bl	800155c <GPIO_WritePin>

		//Enable TXEIE and RXNEIE bit in CR2
		SPI_Handle->SPIx->CR2 |= CR2_RXNEIE_Enable;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c02:	605a      	str	r2, [r3, #4]
		SPI_Handle->SPIx->CR2 |= CR2_TXEIE_Enable;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c12:	605a      	str	r2, [r3, #4]
	}
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <SPI_IRQ_Handler>:
 *
 * @note	This function is called whenever an interrupt occurs generated by the TXE or RXNE flag. It also
 * 			services both the TXE and RXNE interrupts.
 */
void SPI_IRQ_Handler(SPI_Handle_t *SPI_Handle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2;

	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_RXNEIE_Enable) >> 6);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60fb      	str	r3, [r7, #12]
	temp2 = (SPI_Handle->SPIx->SR & SR_RXNE_Flag);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
	//If the RXNE flag is raised and the RXNEIE bit is set - call the RXNE interrupt support function
	if(temp1 && temp2)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <SPI_IRQ_Handler+0x34>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <SPI_IRQ_Handler+0x34>
	{
		RXNE_Interrupt_Handler(SPI_Handle);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ff24 	bl	8001a98 <RXNE_Interrupt_Handler>
	}


	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_TXEIE_Enable) >> 7);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	09db      	lsrs	r3, r3, #7
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
	temp2 = ((SPI_Handle->SPIx->SR & SR_TXE_Flag) >> 1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
	//If the TXE flag is raised and the TXEIE bit is set - call the TXE interrupt support function
	if(temp1 && temp2)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <SPI_IRQ_Handler+0x62>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <SPI_IRQ_Handler+0x62>
	{
		TXE_Interrupt_Handler(SPI_Handle);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fea7 	bl	80019cc <TXE_Interrupt_Handler>
	}


}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Handler+0x1c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001c90:	f001 fc02 	bl	8003498 <xTaskGetSchedulerState>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d001      	beq.n	8001c9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001c9a:	f002 f9ed 	bl	8004078 <xPortSysTickHandler>
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001cb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <vApplicationGetIdleTaskMemory+0x30>)
 8001cbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	601a      	str	r2, [r3, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000094 	.word	0x20000094
 8001cd8:	200000f0 	.word	0x200000f0

08001cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8001cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <vApplicationGetTimerTaskMemory+0x30>)
 8001cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfa:	601a      	str	r2, [r3, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	200002f0 	.word	0x200002f0
 8001d0c:	2000034c 	.word	0x2000034c

08001d10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f103 0208 	add.w	r2, r3, #8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f103 0208 	add.w	r2, r3, #8
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f103 0208 	add.w	r2, r3, #8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	601a      	str	r2, [r3, #0]
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d103      	bne.n	8001dd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e00c      	b.n	8001dec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3308      	adds	r3, #8
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e002      	b.n	8001de0 <vListInsert+0x2e>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d2f6      	bcs.n	8001dda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6892      	ldr	r2, [r2, #8]
 8001e3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6852      	ldr	r2, [r2, #4]
 8001e44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d103      	bne.n	8001e58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e9e:	bf00      	nop
 8001ea0:	e7fe      	b.n	8001ea0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ea2:	f002 f857 	bl	8003f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	441a      	add	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	441a      	add	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	22ff      	movs	r2, #255	; 0xff
 8001ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	22ff      	movs	r2, #255	; 0xff
 8001eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d114      	bne.n	8001f22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01a      	beq.n	8001f36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3310      	adds	r3, #16
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 f909 	bl	800311c <xTaskRemoveFromEventList>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d012      	beq.n	8001f36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <xQueueGenericReset+0xcc>)
 8001f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	e009      	b.n	8001f36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3310      	adds	r3, #16
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fef2 	bl	8001d10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3324      	adds	r3, #36	; 0x24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff feed 	bl	8001d10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f36:	f002 f83d 	bl	8003fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	e000ed04 	.word	0xe000ed04

08001f48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f6e:	bf00      	nop
 8001f70:	e7fe      	b.n	8001f70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7c:	f383 8811 	msr	BASEPRI, r3
 8001f80:	f3bf 8f6f 	isb	sy
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f8a:	bf00      	nop
 8001f8c:	e7fe      	b.n	8001f8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <xQueueGenericCreateStatic+0x52>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <xQueueGenericCreateStatic+0x56>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <xQueueGenericCreateStatic+0x58>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	623b      	str	r3, [r7, #32]
}
 8001fb6:	bf00      	nop
 8001fb8:	e7fe      	b.n	8001fb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <xQueueGenericCreateStatic+0x7e>
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <xQueueGenericCreateStatic+0x82>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <xQueueGenericCreateStatic+0x84>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	61fb      	str	r3, [r7, #28]
}
 8001fe2:	bf00      	nop
 8001fe4:	e7fe      	b.n	8001fe4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001fe6:	2350      	movs	r3, #80	; 0x50
 8001fe8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b50      	cmp	r3, #80	; 0x50
 8001fee:	d00a      	beq.n	8002006 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	61bb      	str	r3, [r7, #24]
}
 8002002:	bf00      	nop
 8002004:	e7fe      	b.n	8002004 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002006:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00d      	beq.n	800202e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800201a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f83f 	bl	80020ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002030:	4618      	mov	r0, r3
 8002032:	3730      	adds	r7, #48	; 0x30
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	4613      	mov	r3, r2
 8002044:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <xQueueGenericCreate+0x2a>
	__asm volatile
 800204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002050:	f383 8811 	msr	BASEPRI, r3
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	613b      	str	r3, [r7, #16]
}
 800205e:	bf00      	nop
 8002060:	e7fe      	b.n	8002060 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3350      	adds	r3, #80	; 0x50
 8002070:	4618      	mov	r0, r3
 8002072:	f002 f891 	bl	8004198 <pvPortMalloc>
 8002076:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d011      	beq.n	80020a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3350      	adds	r3, #80	; 0x50
 8002086:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f805 	bl	80020ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80020a2:	69bb      	ldr	r3, [r7, #24]
	}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e002      	b.n	80020ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020da:	2101      	movs	r1, #1
 80020dc:	69b8      	ldr	r0, [r7, #24]
 80020de:	f7ff fecb 	bl	8001e78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08e      	sub	sp, #56	; 0x38
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002102:	2300      	movs	r3, #0
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <xQueueGenericSend+0x32>
	__asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002122:	bf00      	nop
 8002124:	e7fe      	b.n	8002124 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d103      	bne.n	8002134 <xQueueGenericSend+0x40>
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <xQueueGenericSend+0x44>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <xQueueGenericSend+0x46>
 8002138:	2300      	movs	r3, #0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <xQueueGenericSend+0x60>
	__asm volatile
 800213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002150:	bf00      	nop
 8002152:	e7fe      	b.n	8002152 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d103      	bne.n	8002162 <xQueueGenericSend+0x6e>
 800215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <xQueueGenericSend+0x72>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <xQueueGenericSend+0x74>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <xQueueGenericSend+0x8e>
	__asm volatile
 800216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002170:	f383 8811 	msr	BASEPRI, r3
 8002174:	f3bf 8f6f 	isb	sy
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	623b      	str	r3, [r7, #32]
}
 800217e:	bf00      	nop
 8002180:	e7fe      	b.n	8002180 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002182:	f001 f989 	bl	8003498 <xTaskGetSchedulerState>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <xQueueGenericSend+0x9e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <xQueueGenericSend+0xa2>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <xQueueGenericSend+0xa4>
 8002196:	2300      	movs	r3, #0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	61fb      	str	r3, [r7, #28]
}
 80021ae:	bf00      	nop
 80021b0:	e7fe      	b.n	80021b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021b2:	f001 fecf 	bl	8003f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <xQueueGenericSend+0xd4>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d129      	bne.n	800221c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ce:	f000 fa0b 	bl	80025e8 <prvCopyDataToQueue>
 80021d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	3324      	adds	r3, #36	; 0x24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 ff9b 	bl	800311c <xTaskRemoveFromEventList>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80021ec:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <xQueueGenericSend+0x1f8>)
 80021ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	e00a      	b.n	8002214 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <xQueueGenericSend+0x1f8>)
 8002206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002214:	f001 fece 	bl	8003fb4 <vPortExitCritical>
				return pdPASS;
 8002218:	2301      	movs	r3, #1
 800221a:	e063      	b.n	80022e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002222:	f001 fec7 	bl	8003fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002226:	2300      	movs	r3, #0
 8002228:	e05c      	b.n	80022e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4618      	mov	r0, r3
 8002236:	f000 ffd5 	bl	80031e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800223a:	2301      	movs	r3, #1
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800223e:	f001 feb9 	bl	8003fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002242:	f000 fd47 	bl	8002cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002246:	f001 fe85 	bl	8003f54 <vPortEnterCritical>
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002250:	b25b      	sxtb	r3, r3
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d103      	bne.n	8002260 <xQueueGenericSend+0x16c>
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002266:	b25b      	sxtb	r3, r3
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d103      	bne.n	8002276 <xQueueGenericSend+0x182>
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002276:	f001 fe9d 	bl	8003fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800227a:	1d3a      	adds	r2, r7, #4
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f000 ffc4 	bl	8003210 <xTaskCheckForTimeOut>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d124      	bne.n	80022d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800228e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002290:	f000 faa2 	bl	80027d8 <prvIsQueueFull>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d018      	beq.n	80022cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	3310      	adds	r3, #16
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 feea 	bl	800307c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022aa:	f000 fa2d 	bl	8002708 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022ae:	f000 fd1f 	bl	8002cf0 <xTaskResumeAll>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f47f af7c 	bne.w	80021b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <xQueueGenericSend+0x1f8>)
 80022bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	e772      	b.n	80021b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ce:	f000 fa1b 	bl	8002708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022d2:	f000 fd0d 	bl	8002cf0 <xTaskResumeAll>
 80022d6:	e76c      	b.n	80021b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022da:	f000 fa15 	bl	8002708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022de:	f000 fd07 	bl	8002cf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3738      	adds	r7, #56	; 0x38
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	e000ed04 	.word	0xe000ed04

080022f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b090      	sub	sp, #64	; 0x40
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d103      	bne.n	800232c <xQueueGenericSendFromISR+0x3c>
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <xQueueGenericSendFromISR+0x40>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <xQueueGenericSendFromISR+0x42>
 8002330:	2300      	movs	r3, #0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d103      	bne.n	800235a <xQueueGenericSendFromISR+0x6a>
 8002352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <xQueueGenericSendFromISR+0x6e>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <xQueueGenericSendFromISR+0x70>
 800235e:	2300      	movs	r3, #0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	623b      	str	r3, [r7, #32]
}
 8002376:	bf00      	nop
 8002378:	e7fe      	b.n	8002378 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800237a:	f001 fecd 	bl	8004118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800237e:	f3ef 8211 	mrs	r2, BASEPRI
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	61fa      	str	r2, [r7, #28]
 8002394:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002396:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <xQueueGenericSendFromISR+0xbc>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d12f      	bne.n	800240c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023c2:	f000 f911 	bl	80025e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	d112      	bne.n	80023f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d016      	beq.n	8002406 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	3324      	adds	r3, #36	; 0x24
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fe9d 	bl	800311c <xTaskRemoveFromEventList>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00e      	beq.n	8002406 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e007      	b.n	8002406 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80023f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023fa:	3301      	adds	r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	b25a      	sxtb	r2, r3
 8002400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002406:	2301      	movs	r3, #1
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800240a:	e001      	b.n	8002410 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800240c:	2300      	movs	r3, #0
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800241a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800241e:	4618      	mov	r0, r3
 8002420:	3740      	adds	r7, #64	; 0x40
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <xQueueReceive+0x30>
	__asm volatile
 8002442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	623b      	str	r3, [r7, #32]
}
 8002454:	bf00      	nop
 8002456:	e7fe      	b.n	8002456 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <xQueueReceive+0x3e>
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <xQueueReceive+0x42>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <xQueueReceive+0x44>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <xQueueReceive+0x5e>
	__asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	61fb      	str	r3, [r7, #28]
}
 8002482:	bf00      	nop
 8002484:	e7fe      	b.n	8002484 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002486:	f001 f807 	bl	8003498 <xTaskGetSchedulerState>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <xQueueReceive+0x6e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <xQueueReceive+0x72>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <xQueueReceive+0x74>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <xQueueReceive+0x8e>
	__asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	61bb      	str	r3, [r7, #24]
}
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024b6:	f001 fd4d 	bl	8003f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01f      	beq.n	8002506 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ca:	f000 f8f7 	bl	80026bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00f      	beq.n	80024fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	3310      	adds	r3, #16
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fe1a 	bl	800311c <xTaskRemoveFromEventList>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <xQueueReceive+0x1bc>)
 80024f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024fe:	f001 fd59 	bl	8003fb4 <vPortExitCritical>
				return pdPASS;
 8002502:	2301      	movs	r3, #1
 8002504:	e069      	b.n	80025da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d103      	bne.n	8002514 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800250c:	f001 fd52 	bl	8003fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002510:	2300      	movs	r3, #0
 8002512:	e062      	b.n	80025da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fe60 	bl	80031e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002524:	2301      	movs	r3, #1
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002528:	f001 fd44 	bl	8003fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800252c:	f000 fbd2 	bl	8002cd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002530:	f001 fd10 	bl	8003f54 <vPortEnterCritical>
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800253a:	b25b      	sxtb	r3, r3
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d103      	bne.n	800254a <xQueueReceive+0x122>
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002550:	b25b      	sxtb	r3, r3
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d103      	bne.n	8002560 <xQueueReceive+0x138>
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002560:	f001 fd28 	bl	8003fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002564:	1d3a      	adds	r2, r7, #4
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fe4f 	bl	8003210 <xTaskCheckForTimeOut>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d123      	bne.n	80025c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800257a:	f000 f917 	bl	80027ac <prvIsQueueEmpty>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d017      	beq.n	80025b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	3324      	adds	r3, #36	; 0x24
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fd75 	bl	800307c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002594:	f000 f8b8 	bl	8002708 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002598:	f000 fbaa 	bl	8002cf0 <xTaskResumeAll>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d189      	bne.n	80024b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <xQueueReceive+0x1bc>)
 80025a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	e780      	b.n	80024b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80025b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b6:	f000 f8a7 	bl	8002708 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025ba:	f000 fb99 	bl	8002cf0 <xTaskResumeAll>
 80025be:	e77a      	b.n	80024b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80025c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025c2:	f000 f8a1 	bl	8002708 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025c6:	f000 fb93 	bl	8002cf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025cc:	f000 f8ee 	bl	80027ac <prvIsQueueEmpty>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f43f af6f 	beq.w	80024b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3730      	adds	r7, #48	; 0x30
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d14d      	bne.n	80026aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 ff5e 	bl	80034d4 <xTaskPriorityDisinherit>
 8002618:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	e043      	b.n	80026aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d119      	bne.n	800265c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6858      	ldr	r0, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	461a      	mov	r2, r3
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	f001 ffc6 	bl	80045c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	441a      	add	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	d32b      	bcc.n	80026aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	e026      	b.n	80026aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68d8      	ldr	r0, [r3, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	461a      	mov	r2, r3
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	f001 ffac 	bl	80045c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	425b      	negs	r3, r3
 8002676:	441a      	add	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d207      	bcs.n	8002698 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	425b      	negs	r3, r3
 8002692:	441a      	add	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d105      	bne.n	80026aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80026b2:	697b      	ldr	r3, [r7, #20]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d018      	beq.n	8002700 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	441a      	add	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d303      	bcc.n	80026f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68d9      	ldr	r1, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	461a      	mov	r2, r3
 80026fa:	6838      	ldr	r0, [r7, #0]
 80026fc:	f001 ff62 	bl	80045c4 <memcpy>
	}
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002710:	f001 fc20 	bl	8003f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800271a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800271c:	e011      	b.n	8002742 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2b00      	cmp	r3, #0
 8002724:	d012      	beq.n	800274c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3324      	adds	r3, #36	; 0x24
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fcf6 	bl	800311c <xTaskRemoveFromEventList>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002736:	f000 fdcd 	bl	80032d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	3b01      	subs	r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	dce9      	bgt.n	800271e <prvUnlockQueue+0x16>
 800274a:	e000      	b.n	800274e <prvUnlockQueue+0x46>
					break;
 800274c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	22ff      	movs	r2, #255	; 0xff
 8002752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002756:	f001 fc2d 	bl	8003fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800275a:	f001 fbfb 	bl	8003f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002764:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002766:	e011      	b.n	800278c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3310      	adds	r3, #16
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fcd1 	bl	800311c <xTaskRemoveFromEventList>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002780:	f000 fda8 	bl	80032d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002784:	7bbb      	ldrb	r3, [r7, #14]
 8002786:	3b01      	subs	r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800278c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002790:	2b00      	cmp	r3, #0
 8002792:	dce9      	bgt.n	8002768 <prvUnlockQueue+0x60>
 8002794:	e000      	b.n	8002798 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002796:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80027a0:	f001 fc08 	bl	8003fb4 <vPortExitCritical>
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027b4:	f001 fbce 	bl	8003f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80027c0:	2301      	movs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e001      	b.n	80027ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027ca:	f001 fbf3 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027e0:	f001 fbb8 	bl	8003f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d102      	bne.n	80027f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e001      	b.n	80027fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027fa:	f001 fbdb 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e014      	b.n	8002842 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002818:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <vQueueAddToRegistry+0x50>)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002824:	490c      	ldr	r1, [pc, #48]	; (8002858 <vQueueAddToRegistry+0x50>)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <vQueueAddToRegistry+0x50>)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800283a:	e006      	b.n	800284a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b07      	cmp	r3, #7
 8002846:	d9e7      	bls.n	8002818 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000074c 	.word	0x2000074c

0800285c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800286c:	f001 fb72 	bl	8003f54 <vPortEnterCritical>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002876:	b25b      	sxtb	r3, r3
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d103      	bne.n	8002886 <vQueueWaitForMessageRestricted+0x2a>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288c:	b25b      	sxtb	r3, r3
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d103      	bne.n	800289c <vQueueWaitForMessageRestricted+0x40>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800289c:	f001 fb8a 	bl	8003fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3324      	adds	r3, #36	; 0x24
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fc07 	bl	80030c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff26 	bl	8002708 <prvUnlockQueue>
	}
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	; 0x38
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	623b      	str	r3, [r7, #32]
}
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xTaskCreateStatic+0x46>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	61fb      	str	r3, [r7, #28]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800290a:	235c      	movs	r3, #92	; 0x5c
 800290c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b5c      	cmp	r3, #92	; 0x5c
 8002912:	d00a      	beq.n	800292a <xTaskCreateStatic+0x66>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	61bb      	str	r3, [r7, #24]
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800292a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01e      	beq.n	8002970 <xTaskCreateStatic+0xac>
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01b      	beq.n	8002970 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002940:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	2202      	movs	r2, #2
 8002946:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800294a:	2300      	movs	r3, #0
 800294c:	9303      	str	r3, [sp, #12]
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	9302      	str	r3, [sp, #8]
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f850 	bl	8002a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800296a:	f000 f8dd 	bl	8002b28 <prvAddNewTaskToReadyList>
 800296e:	e001      	b.n	8002974 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002974:	697b      	ldr	r3, [r7, #20]
	}
 8002976:	4618      	mov	r0, r3
 8002978:	3728      	adds	r7, #40	; 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800297e:	b580      	push	{r7, lr}
 8002980:	b08c      	sub	sp, #48	; 0x30
 8002982:	af04      	add	r7, sp, #16
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fc00 	bl	8004198 <pvPortMalloc>
 8002998:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00e      	beq.n	80029be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029a0:	205c      	movs	r0, #92	; 0x5c
 80029a2:	f001 fbf9 	bl	8004198 <pvPortMalloc>
 80029a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
 80029b4:	e005      	b.n	80029c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f001 fcba 	bl	8004330 <vPortFree>
 80029bc:	e001      	b.n	80029c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9303      	str	r3, [sp, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	9302      	str	r3, [sp, #8]
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f80e 	bl	8002a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029ec:	69f8      	ldr	r0, [r7, #28]
 80029ee:	f000 f89b 	bl	8002b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e002      	b.n	80029fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029fe:	69bb      	ldr	r3, [r7, #24]
	}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	461a      	mov	r2, r3
 8002a20:	21a5      	movs	r1, #165	; 0xa5
 8002a22:	f001 fda3 	bl	800456c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a30:	3b01      	subs	r3, #1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f023 0307 	bic.w	r3, r3, #7
 8002a3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	617b      	str	r3, [r7, #20]
}
 8002a5c:	bf00      	nop
 8002a5e:	e7fe      	b.n	8002a5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01f      	beq.n	8002aa6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e012      	b.n	8002a92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	7819      	ldrb	r1, [r3, #0]
 8002a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	3334      	adds	r3, #52	; 0x34
 8002a7c:	460a      	mov	r2, r1
 8002a7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d9e9      	bls.n	8002a6c <prvInitialiseNewTask+0x64>
 8002a98:	e000      	b.n	8002a9c <prvInitialiseNewTask+0x94>
			{
				break;
 8002a9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa4:	e003      	b.n	8002aae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	2b37      	cmp	r3, #55	; 0x37
 8002ab2:	d901      	bls.n	8002ab8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ab4:	2337      	movs	r3, #55	; 0x37
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	3304      	adds	r3, #4
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f93e 	bl	8001d50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	3318      	adds	r3, #24
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f939 	bl	8001d50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	2200      	movs	r2, #0
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	68f9      	ldr	r1, [r7, #12]
 8002b06:	69b8      	ldr	r0, [r7, #24]
 8002b08:	f001 f8f4 	bl	8003cf4 <pxPortInitialiseStack>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b1e:	bf00      	nop
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b30:	f001 fa10 	bl	8003f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <prvAddNewTaskToReadyList+0xc4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <prvAddNewTaskToReadyList+0xc4>)
 8002b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b46:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <prvAddNewTaskToReadyList+0xc4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d110      	bne.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b54:	f000 fbe2 	bl	800331c <prvInitialiseTaskLists>
 8002b58:	e00d      	b.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <prvAddNewTaskToReadyList+0xcc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d802      	bhi.n	8002b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <prvAddNewTaskToReadyList+0xd0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	; (8002bf8 <prvAddNewTaskToReadyList+0xd0>)
 8002b7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <prvAddNewTaskToReadyList+0xd0>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <prvAddNewTaskToReadyList+0xd4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d903      	bls.n	8002b9c <prvAddNewTaskToReadyList+0x74>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <prvAddNewTaskToReadyList+0xd4>)
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <prvAddNewTaskToReadyList+0xd8>)
 8002baa:	441a      	add	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7ff f8d9 	bl	8001d6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bb8:	f001 f9fc 	bl	8003fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <prvAddNewTaskToReadyList+0xcc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <prvAddNewTaskToReadyList+0xc8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d207      	bcs.n	8002be2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <prvAddNewTaskToReadyList+0xdc>)
 8002bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000c60 	.word	0x20000c60
 8002bf0:	2000078c 	.word	0x2000078c
 8002bf4:	20000c6c 	.word	0x20000c6c
 8002bf8:	20000c7c 	.word	0x20000c7c
 8002bfc:	20000c68 	.word	0x20000c68
 8002c00:	20000790 	.word	0x20000790
 8002c04:	e000ed04 	.word	0xe000ed04

08002c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c16:	463a      	mov	r2, r7
 8002c18:	1d39      	adds	r1, r7, #4
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff f842 	bl	8001ca8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	9202      	str	r2, [sp, #8]
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2300      	movs	r3, #0
 8002c34:	460a      	mov	r2, r1
 8002c36:	4921      	ldr	r1, [pc, #132]	; (8002cbc <vTaskStartScheduler+0xb4>)
 8002c38:	4821      	ldr	r0, [pc, #132]	; (8002cc0 <vTaskStartScheduler+0xb8>)
 8002c3a:	f7ff fe43 	bl	80028c4 <xTaskCreateStatic>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <vTaskStartScheduler+0xbc>)
 8002c42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <vTaskStartScheduler+0xbc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e001      	b.n	8002c56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002c5c:	f000 fcfc 	bl	8003658 <xTimerCreateTimerTask>
 8002c60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d116      	bne.n	8002c96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	613b      	str	r3, [r7, #16]
}
 8002c7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <vTaskStartScheduler+0xc0>)
 8002c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <vTaskStartScheduler+0xc4>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <vTaskStartScheduler+0xc8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c90:	f001 f8be 	bl	8003e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c94:	e00e      	b.n	8002cb4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d10a      	bne.n	8002cb4 <vTaskStartScheduler+0xac>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	60fb      	str	r3, [r7, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <vTaskStartScheduler+0xaa>
}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08004620 	.word	0x08004620
 8002cc0:	080032ed 	.word	0x080032ed
 8002cc4:	20000c84 	.word	0x20000c84
 8002cc8:	20000c80 	.word	0x20000c80
 8002ccc:	20000c6c 	.word	0x20000c6c
 8002cd0:	20000c64 	.word	0x20000c64

08002cd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <vTaskSuspendAll+0x18>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	4a03      	ldr	r2, [pc, #12]	; (8002cec <vTaskSuspendAll+0x18>)
 8002ce0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	20000c88 	.word	0x20000c88

08002cf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002cfe:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <xTaskResumeAll+0x118>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <xTaskResumeAll+0x2c>
	__asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	603b      	str	r3, [r7, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d1c:	f001 f91a 	bl	8003f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <xTaskResumeAll+0x118>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	4a38      	ldr	r2, [pc, #224]	; (8002e08 <xTaskResumeAll+0x118>)
 8002d28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d2a:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <xTaskResumeAll+0x118>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d162      	bne.n	8002df8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <xTaskResumeAll+0x11c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d05e      	beq.n	8002df8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d3a:	e02f      	b.n	8002d9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <xTaskResumeAll+0x120>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3318      	adds	r3, #24
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f86b 	bl	8001e24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3304      	adds	r3, #4
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f866 	bl	8001e24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <xTaskResumeAll+0x124>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d903      	bls.n	8002d6c <xTaskResumeAll+0x7c>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <xTaskResumeAll+0x124>)
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <xTaskResumeAll+0x128>)
 8002d7a:	441a      	add	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f7fe fff1 	bl	8001d6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <xTaskResumeAll+0x12c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <xTaskResumeAll+0x130>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <xTaskResumeAll+0x120>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1cb      	bne.n	8002d3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002daa:	f000 fb55 	bl	8003458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <xTaskResumeAll+0x134>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d010      	beq.n	8002ddc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dba:	f000 f847 	bl	8002e4c <xTaskIncrementTick>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <xTaskResumeAll+0x130>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f1      	bne.n	8002dba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <xTaskResumeAll+0x134>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <xTaskResumeAll+0x130>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <xTaskResumeAll+0x138>)
 8002dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002df8:	f001 f8dc 	bl	8003fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000c88 	.word	0x20000c88
 8002e0c:	20000c60 	.word	0x20000c60
 8002e10:	20000c20 	.word	0x20000c20
 8002e14:	20000c68 	.word	0x20000c68
 8002e18:	20000790 	.word	0x20000790
 8002e1c:	2000078c 	.word	0x2000078c
 8002e20:	20000c74 	.word	0x20000c74
 8002e24:	20000c70 	.word	0x20000c70
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <xTaskGetTickCount+0x1c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e38:	687b      	ldr	r3, [r7, #4]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000c64 	.word	0x20000c64

08002e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e56:	4b4f      	ldr	r3, [pc, #316]	; (8002f94 <xTaskIncrementTick+0x148>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 808f 	bne.w	8002f7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e60:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <xTaskIncrementTick+0x14c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e68:	4a4b      	ldr	r2, [pc, #300]	; (8002f98 <xTaskIncrementTick+0x14c>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d120      	bne.n	8002eb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e74:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <xTaskIncrementTick+0x150>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <xTaskIncrementTick+0x48>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	603b      	str	r3, [r7, #0]
}
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <xTaskIncrementTick+0x46>
 8002e94:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <xTaskIncrementTick+0x150>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <xTaskIncrementTick+0x154>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3f      	ldr	r2, [pc, #252]	; (8002f9c <xTaskIncrementTick+0x150>)
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <xTaskIncrementTick+0x154>)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <xTaskIncrementTick+0x158>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	4a3d      	ldr	r2, [pc, #244]	; (8002fa4 <xTaskIncrementTick+0x158>)
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	f000 fad1 	bl	8003458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002eb6:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <xTaskIncrementTick+0x15c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d349      	bcc.n	8002f54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <xTaskIncrementTick+0x150>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <xTaskIncrementTick+0x15c>)
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	601a      	str	r2, [r3, #0]
					break;
 8002ed2:	e03f      	b.n	8002f54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ed4:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <xTaskIncrementTick+0x150>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d203      	bcs.n	8002ef4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002eec:	4a2e      	ldr	r2, [pc, #184]	; (8002fa8 <xTaskIncrementTick+0x15c>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ef2:	e02f      	b.n	8002f54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fe ff93 	bl	8001e24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	3318      	adds	r3, #24
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe ff8a 	bl	8001e24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	4b25      	ldr	r3, [pc, #148]	; (8002fac <xTaskIncrementTick+0x160>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d903      	bls.n	8002f24 <xTaskIncrementTick+0xd8>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <xTaskIncrementTick+0x160>)
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <xTaskIncrementTick+0x164>)
 8002f32:	441a      	add	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7fe ff15 	bl	8001d6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <xTaskIncrementTick+0x168>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d3b8      	bcc.n	8002ec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f52:	e7b5      	b.n	8002ec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <xTaskIncrementTick+0x168>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5a:	4915      	ldr	r1, [pc, #84]	; (8002fb0 <xTaskIncrementTick+0x164>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d901      	bls.n	8002f70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <xTaskIncrementTick+0x16c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e004      	b.n	8002f88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <xTaskIncrementTick+0x170>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <xTaskIncrementTick+0x170>)
 8002f86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f88:	697b      	ldr	r3, [r7, #20]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000c88 	.word	0x20000c88
 8002f98:	20000c64 	.word	0x20000c64
 8002f9c:	20000c18 	.word	0x20000c18
 8002fa0:	20000c1c 	.word	0x20000c1c
 8002fa4:	20000c78 	.word	0x20000c78
 8002fa8:	20000c80 	.word	0x20000c80
 8002fac:	20000c68 	.word	0x20000c68
 8002fb0:	20000790 	.word	0x20000790
 8002fb4:	2000078c 	.word	0x2000078c
 8002fb8:	20000c74 	.word	0x20000c74
 8002fbc:	20000c70 	.word	0x20000c70

08002fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <vTaskSwitchContext+0xa8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fce:	4b27      	ldr	r3, [pc, #156]	; (800306c <vTaskSwitchContext+0xac>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fd4:	e041      	b.n	800305a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002fd6:	4b25      	ldr	r3, [pc, #148]	; (800306c <vTaskSwitchContext+0xac>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <vTaskSwitchContext+0xb0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e010      	b.n	8003006 <vTaskSwitchContext+0x46>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <vTaskSwitchContext+0x40>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	607b      	str	r3, [r7, #4]
}
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <vTaskSwitchContext+0x3e>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3b01      	subs	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	491b      	ldr	r1, [pc, #108]	; (8003074 <vTaskSwitchContext+0xb4>)
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0e4      	beq.n	8002fe4 <vTaskSwitchContext+0x24>
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4a13      	ldr	r2, [pc, #76]	; (8003074 <vTaskSwitchContext+0xb4>)
 8003026:	4413      	add	r3, r2
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3308      	adds	r3, #8
 800303c:	429a      	cmp	r2, r3
 800303e:	d104      	bne.n	800304a <vTaskSwitchContext+0x8a>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a09      	ldr	r2, [pc, #36]	; (8003078 <vTaskSwitchContext+0xb8>)
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4a06      	ldr	r2, [pc, #24]	; (8003070 <vTaskSwitchContext+0xb0>)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000c88 	.word	0x20000c88
 800306c:	20000c74 	.word	0x20000c74
 8003070:	20000c68 	.word	0x20000c68
 8003074:	20000790 	.word	0x20000790
 8003078:	2000078c 	.word	0x2000078c

0800307c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	60fb      	str	r3, [r7, #12]
}
 800309e:	bf00      	nop
 80030a0:	e7fe      	b.n	80030a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <vTaskPlaceOnEventList+0x44>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3318      	adds	r3, #24
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe fe81 	bl	8001db2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030b0:	2101      	movs	r1, #1
 80030b2:	6838      	ldr	r0, [r7, #0]
 80030b4:	f000 fa7c 	bl	80035b0 <prvAddCurrentTaskToDelayedList>
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2000078c 	.word	0x2000078c

080030c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	617b      	str	r3, [r7, #20]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <vTaskPlaceOnEventListRestricted+0x54>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3318      	adds	r3, #24
 80030f2:	4619      	mov	r1, r3
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7fe fe38 	bl	8001d6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	68b8      	ldr	r0, [r7, #8]
 800310a:	f000 fa51 	bl	80035b0 <prvAddCurrentTaskToDelayedList>
	}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2000078c 	.word	0x2000078c

0800311c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	60fb      	str	r3, [r7, #12]
}
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	3318      	adds	r3, #24
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe fe69 	bl	8001e24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <xTaskRemoveFromEventList+0xb0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11d      	bne.n	8003196 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3304      	adds	r3, #4
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fe60 	bl	8001e24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <xTaskRemoveFromEventList+0xb4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d903      	bls.n	8003178 <xTaskRemoveFromEventList+0x5c>
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <xTaskRemoveFromEventList+0xb4>)
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <xTaskRemoveFromEventList+0xb8>)
 8003186:	441a      	add	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f7fe fdeb 	bl	8001d6a <vListInsertEnd>
 8003194:	e005      	b.n	80031a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3318      	adds	r3, #24
 800319a:	4619      	mov	r1, r3
 800319c:	480e      	ldr	r0, [pc, #56]	; (80031d8 <xTaskRemoveFromEventList+0xbc>)
 800319e:	f7fe fde4 	bl	8001d6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <xTaskRemoveFromEventList+0xc0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d905      	bls.n	80031bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031b0:	2301      	movs	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <xTaskRemoveFromEventList+0xc4>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e001      	b.n	80031c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80031c0:	697b      	ldr	r3, [r7, #20]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000c88 	.word	0x20000c88
 80031d0:	20000c68 	.word	0x20000c68
 80031d4:	20000790 	.word	0x20000790
 80031d8:	20000c20 	.word	0x20000c20
 80031dc:	2000078c 	.word	0x2000078c
 80031e0:	20000c74 	.word	0x20000c74

080031e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <vTaskInternalSetTimeOutState+0x24>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <vTaskInternalSetTimeOutState+0x28>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	605a      	str	r2, [r3, #4]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	20000c78 	.word	0x20000c78
 800320c:	20000c64 	.word	0x20000c64

08003210 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	613b      	str	r3, [r7, #16]
}
 8003232:	bf00      	nop
 8003234:	e7fe      	b.n	8003234 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	60fb      	str	r3, [r7, #12]
}
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003252:	f000 fe7f 	bl	8003f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <xTaskCheckForTimeOut+0xbc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d102      	bne.n	8003276 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e023      	b.n	80032be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <xTaskCheckForTimeOut+0xc0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d007      	beq.n	8003292 <xTaskCheckForTimeOut+0x82>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	e015      	b.n	80032be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	429a      	cmp	r2, r3
 800329a:	d20b      	bcs.n	80032b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1ad2      	subs	r2, r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ff9b 	bl	80031e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e004      	b.n	80032be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032be:	f000 fe79 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 80032c2:	69fb      	ldr	r3, [r7, #28]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000c64 	.word	0x20000c64
 80032d0:	20000c78 	.word	0x20000c78

080032d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <vTaskMissedYield+0x14>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000c74 	.word	0x20000c74

080032ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032f4:	f000 f852 	bl	800339c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <prvIdleTask+0x28>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d9f9      	bls.n	80032f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <prvIdleTask+0x2c>)
 8003302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003310:	e7f0      	b.n	80032f4 <prvIdleTask+0x8>
 8003312:	bf00      	nop
 8003314:	20000790 	.word	0x20000790
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	e00c      	b.n	8003342 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <prvInitialiseTaskLists+0x60>)
 8003334:	4413      	add	r3, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fcea 	bl	8001d10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b37      	cmp	r3, #55	; 0x37
 8003346:	d9ef      	bls.n	8003328 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003348:	480d      	ldr	r0, [pc, #52]	; (8003380 <prvInitialiseTaskLists+0x64>)
 800334a:	f7fe fce1 	bl	8001d10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800334e:	480d      	ldr	r0, [pc, #52]	; (8003384 <prvInitialiseTaskLists+0x68>)
 8003350:	f7fe fcde 	bl	8001d10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <prvInitialiseTaskLists+0x6c>)
 8003356:	f7fe fcdb 	bl	8001d10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800335a:	480c      	ldr	r0, [pc, #48]	; (800338c <prvInitialiseTaskLists+0x70>)
 800335c:	f7fe fcd8 	bl	8001d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <prvInitialiseTaskLists+0x74>)
 8003362:	f7fe fcd5 	bl	8001d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <prvInitialiseTaskLists+0x78>)
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <prvInitialiseTaskLists+0x64>)
 800336a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <prvInitialiseTaskLists+0x7c>)
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <prvInitialiseTaskLists+0x68>)
 8003370:	601a      	str	r2, [r3, #0]
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000790 	.word	0x20000790
 8003380:	20000bf0 	.word	0x20000bf0
 8003384:	20000c04 	.word	0x20000c04
 8003388:	20000c20 	.word	0x20000c20
 800338c:	20000c34 	.word	0x20000c34
 8003390:	20000c4c 	.word	0x20000c4c
 8003394:	20000c18 	.word	0x20000c18
 8003398:	20000c1c 	.word	0x20000c1c

0800339c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033a2:	e019      	b.n	80033d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033a4:	f000 fdd6 	bl	8003f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <prvCheckTasksWaitingTermination+0x50>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fd35 	bl	8001e24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <prvCheckTasksWaitingTermination+0x54>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3b01      	subs	r3, #1
 80033c0:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <prvCheckTasksWaitingTermination+0x54>)
 80033c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <prvCheckTasksWaitingTermination+0x58>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <prvCheckTasksWaitingTermination+0x58>)
 80033cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033ce:	f000 fdf1 	bl	8003fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f810 	bl	80033f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <prvCheckTasksWaitingTermination+0x58>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e1      	bne.n	80033a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000c34 	.word	0x20000c34
 80033f0:	20000c60 	.word	0x20000c60
 80033f4:	20000c48 	.word	0x20000c48

080033f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4618      	mov	r0, r3
 8003410:	f000 ff8e 	bl	8004330 <vPortFree>
				vPortFree( pxTCB );
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 ff8b 	bl	8004330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800341a:	e018      	b.n	800344e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003422:	2b01      	cmp	r3, #1
 8003424:	d103      	bne.n	800342e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 ff82 	bl	8004330 <vPortFree>
	}
 800342c:	e00f      	b.n	800344e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003434:	2b02      	cmp	r3, #2
 8003436:	d00a      	beq.n	800344e <prvDeleteTCB+0x56>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	60fb      	str	r3, [r7, #12]
}
 800344a:	bf00      	nop
 800344c:	e7fe      	b.n	800344c <prvDeleteTCB+0x54>
	}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <prvResetNextTaskUnblockTime+0x38>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <prvResetNextTaskUnblockTime+0x3c>)
 800346a:	f04f 32ff 	mov.w	r2, #4294967295
 800346e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003470:	e008      	b.n	8003484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <prvResetNextTaskUnblockTime+0x38>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a04      	ldr	r2, [pc, #16]	; (8003494 <prvResetNextTaskUnblockTime+0x3c>)
 8003482:	6013      	str	r3, [r2, #0]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	20000c18 	.word	0x20000c18
 8003494:	20000c80 	.word	0x20000c80

08003498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <xTaskGetSchedulerState+0x34>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034a6:	2301      	movs	r3, #1
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	e008      	b.n	80034be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ac:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <xTaskGetSchedulerState+0x38>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034b4:	2302      	movs	r3, #2
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	e001      	b.n	80034be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034be:	687b      	ldr	r3, [r7, #4]
	}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20000c6c 	.word	0x20000c6c
 80034d0:	20000c88 	.word	0x20000c88

080034d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d056      	beq.n	8003598 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <xTaskPriorityDisinherit+0xd0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d00a      	beq.n	800350a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	60fb      	str	r3, [r7, #12]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	60bb      	str	r3, [r7, #8]
}
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	429a      	cmp	r2, r3
 800353c:	d02c      	beq.n	8003598 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	2b00      	cmp	r3, #0
 8003544:	d128      	bne.n	8003598 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3304      	adds	r3, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fc6a 	bl	8001e24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <xTaskPriorityDisinherit+0xd4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d903      	bls.n	8003578 <xTaskPriorityDisinherit+0xa4>
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <xTaskPriorityDisinherit+0xd4>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <xTaskPriorityDisinherit+0xd8>)
 8003586:	441a      	add	r2, r3
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	3304      	adds	r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f7fe fbeb 	bl	8001d6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003598:	697b      	ldr	r3, [r7, #20]
	}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000078c 	.word	0x2000078c
 80035a8:	20000c68 	.word	0x20000c68
 80035ac:	20000790 	.word	0x20000790

080035b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <prvAddCurrentTaskToDelayedList+0x90>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <prvAddCurrentTaskToDelayedList+0x94>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fc2c 	bl	8001e24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d10a      	bne.n	80035ea <prvAddCurrentTaskToDelayedList+0x3a>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <prvAddCurrentTaskToDelayedList+0x94>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4819      	ldr	r0, [pc, #100]	; (8003648 <prvAddCurrentTaskToDelayedList+0x98>)
 80035e4:	f7fe fbc1 	bl	8001d6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035e8:	e026      	b.n	8003638 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <prvAddCurrentTaskToDelayedList+0x94>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d209      	bcs.n	8003616 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <prvAddCurrentTaskToDelayedList+0x94>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f7fe fbcf 	bl	8001db2 <vListInsert>
}
 8003614:	e010      	b.n	8003638 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <prvAddCurrentTaskToDelayedList+0x94>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f7fe fbc5 	bl	8001db2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <prvAddCurrentTaskToDelayedList+0xa4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	d202      	bcs.n	8003638 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000c64 	.word	0x20000c64
 8003644:	2000078c 	.word	0x2000078c
 8003648:	20000c4c 	.word	0x20000c4c
 800364c:	20000c1c 	.word	0x20000c1c
 8003650:	20000c18 	.word	0x20000c18
 8003654:	20000c80 	.word	0x20000c80

08003658 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003662:	f000 fb07 	bl	8003c74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <xTimerCreateTimerTask+0x80>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d021      	beq.n	80036b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003676:	1d3a      	adds	r2, r7, #4
 8003678:	f107 0108 	add.w	r1, r7, #8
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe fb2b 	bl	8001cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	9202      	str	r2, [sp, #8]
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2302      	movs	r3, #2
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	460a      	mov	r2, r1
 8003698:	4910      	ldr	r1, [pc, #64]	; (80036dc <xTimerCreateTimerTask+0x84>)
 800369a:	4811      	ldr	r0, [pc, #68]	; (80036e0 <xTimerCreateTimerTask+0x88>)
 800369c:	f7ff f912 	bl	80028c4 <xTaskCreateStatic>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <xTimerCreateTimerTask+0x8c>)
 80036a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <xTimerCreateTimerTask+0x8c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80036ae:	2301      	movs	r3, #1
 80036b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	613b      	str	r3, [r7, #16]
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80036ce:	697b      	ldr	r3, [r7, #20]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000cbc 	.word	0x20000cbc
 80036dc:	08004628 	.word	0x08004628
 80036e0:	0800381d 	.word	0x0800381d
 80036e4:	20000cc0 	.word	0x20000cc0

080036e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	623b      	str	r3, [r7, #32]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <xTimerGenericCommand+0x98>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02a      	beq.n	8003774 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b05      	cmp	r3, #5
 800372e:	dc18      	bgt.n	8003762 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003730:	f7ff feb2 	bl	8003498 <xTaskGetSchedulerState>
 8003734:	4603      	mov	r3, r0
 8003736:	2b02      	cmp	r3, #2
 8003738:	d109      	bne.n	800374e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <xTimerGenericCommand+0x98>)
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	f107 0110 	add.w	r1, r7, #16
 8003742:	2300      	movs	r3, #0
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	f7fe fcd5 	bl	80020f4 <xQueueGenericSend>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24
 800374c:	e012      	b.n	8003774 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <xTimerGenericCommand+0x98>)
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	f107 0110 	add.w	r1, r7, #16
 8003756:	2300      	movs	r3, #0
 8003758:	2200      	movs	r2, #0
 800375a:	f7fe fccb 	bl	80020f4 <xQueueGenericSend>
 800375e:	6278      	str	r0, [r7, #36]	; 0x24
 8003760:	e008      	b.n	8003774 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <xTimerGenericCommand+0x98>)
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f107 0110 	add.w	r1, r7, #16
 800376a:	2300      	movs	r3, #0
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	f7fe fdbf 	bl	80022f0 <xQueueGenericSendFromISR>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003776:	4618      	mov	r0, r3
 8003778:	3728      	adds	r7, #40	; 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000cbc 	.word	0x20000cbc

08003784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af02      	add	r7, sp, #8
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <prvProcessExpiredTimer+0x94>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3304      	adds	r3, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fb41 	bl	8001e24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d022      	beq.n	80037f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	699a      	ldr	r2, [r3, #24]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	18d1      	adds	r1, r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	6978      	ldr	r0, [r7, #20]
 80037be:	f000 f8d1 	bl	8003964 <prvInsertTimerInActiveList>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01f      	beq.n	8003808 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037c8:	2300      	movs	r3, #0
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2300      	movs	r3, #0
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	2100      	movs	r1, #0
 80037d2:	6978      	ldr	r0, [r7, #20]
 80037d4:	f7ff ff88 	bl	80036e8 <xTimerGenericCommand>
 80037d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d113      	bne.n	8003808 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	60fb      	str	r3, [r7, #12]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	6978      	ldr	r0, [r7, #20]
 800380e:	4798      	blx	r3
}
 8003810:	bf00      	nop
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000cb4 	.word	0x20000cb4

0800381c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003824:	f107 0308 	add.w	r3, r7, #8
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f857 	bl	80038dc <prvGetNextExpireTime>
 800382e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4619      	mov	r1, r3
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f803 	bl	8003840 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800383a:	f000 f8d5 	bl	80039e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800383e:	e7f1      	b.n	8003824 <prvTimerTask+0x8>

08003840 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800384a:	f7ff fa43 	bl	8002cd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800384e:	f107 0308 	add.w	r3, r7, #8
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f866 	bl	8003924 <prvSampleTimeNow>
 8003858:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d130      	bne.n	80038c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <prvProcessTimerOrBlockTask+0x3c>
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	429a      	cmp	r2, r3
 800386c:	d806      	bhi.n	800387c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800386e:	f7ff fa3f 	bl	8002cf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff85 	bl	8003784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800387a:	e024      	b.n	80038c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003882:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <prvProcessTimerOrBlockTask+0x90>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <prvProcessTimerOrBlockTask+0x50>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <prvProcessTimerOrBlockTask+0x52>
 8003890:	2300      	movs	r3, #0
 8003892:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <prvProcessTimerOrBlockTask+0x94>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	f7fe ffdb 	bl	800285c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80038a6:	f7ff fa23 	bl	8002cf0 <xTaskResumeAll>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <prvProcessTimerOrBlockTask+0x98>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
}
 80038c0:	e001      	b.n	80038c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80038c2:	f7ff fa15 	bl	8002cf0 <xTaskResumeAll>
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000cb8 	.word	0x20000cb8
 80038d4:	20000cbc 	.word	0x20000cbc
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <prvGetNextExpireTime+0x44>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <prvGetNextExpireTime+0x16>
 80038ee:	2201      	movs	r2, #1
 80038f0:	e000      	b.n	80038f4 <prvGetNextExpireTime+0x18>
 80038f2:	2200      	movs	r2, #0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003900:	4b07      	ldr	r3, [pc, #28]	; (8003920 <prvGetNextExpireTime+0x44>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e001      	b.n	8003910 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	20000cb4 	.word	0x20000cb4

08003924 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800392c:	f7ff fa7e 	bl	8002e2c <xTaskGetTickCount>
 8003930:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <prvSampleTimeNow+0x3c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	429a      	cmp	r2, r3
 800393a:	d205      	bcs.n	8003948 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800393c:	f000 f936 	bl	8003bac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e002      	b.n	800394e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800394e:	4a04      	ldr	r2, [pc, #16]	; (8003960 <prvSampleTimeNow+0x3c>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003954:	68fb      	ldr	r3, [r7, #12]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000cc4 	.word	0x20000cc4

08003964 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d812      	bhi.n	80039b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	1ad2      	subs	r2, r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003998:	2301      	movs	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e01b      	b.n	80039d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <prvInsertTimerInActiveList+0x7c>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fe fa02 	bl	8001db2 <vListInsert>
 80039ae:	e012      	b.n	80039d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d206      	bcs.n	80039c6 <prvInsertTimerInActiveList+0x62>
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e007      	b.n	80039d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039c6:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <prvInsertTimerInActiveList+0x80>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f7fe f9ee 	bl	8001db2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80039d6:	697b      	ldr	r3, [r7, #20]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000cb8 	.word	0x20000cb8
 80039e4:	20000cb4 	.word	0x20000cb4

080039e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08e      	sub	sp, #56	; 0x38
 80039ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039ee:	e0ca      	b.n	8003b86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da18      	bge.n	8003a28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	3304      	adds	r3, #4
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	61fb      	str	r3, [r7, #28]
}
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a1e:	6850      	ldr	r0, [r2, #4]
 8003a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a22:	6892      	ldr	r2, [r2, #8]
 8003a24:	4611      	mov	r1, r2
 8003a26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f2c0 80ab 	blt.w	8003b86 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe f9ef 	bl	8001e24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a46:	463b      	mov	r3, r7
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff6b 	bl	8003924 <prvSampleTimeNow>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b09      	cmp	r3, #9
 8003a54:	f200 8096 	bhi.w	8003b84 <prvProcessReceivedCommands+0x19c>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <prvProcessReceivedCommands+0x78>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a89 	.word	0x08003a89
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003a89 	.word	0x08003a89
 8003a6c:	08003afd 	.word	0x08003afd
 8003a70:	08003b11 	.word	0x08003b11
 8003a74:	08003b5b 	.word	0x08003b5b
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a89 	.word	0x08003a89
 8003a80:	08003afd 	.word	0x08003afd
 8003a84:	08003b11 	.word	0x08003b11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	18d1      	adds	r1, r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa8:	f7ff ff5c 	bl	8003964 <prvInsertTimerInActiveList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d069      	beq.n	8003b86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05e      	beq.n	8003b86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	441a      	add	r2, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ada:	f7ff fe05 	bl	80036e8 <xTimerGenericCommand>
 8003ade:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d14f      	bne.n	8003b86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	61bb      	str	r3, [r7, #24]
}
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003b0e:	e03a      	b.n	8003b86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	617b      	str	r3, [r7, #20]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	18d1      	adds	r1, r2, r3
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b54:	f7ff ff06 	bl	8003964 <prvInsertTimerInActiveList>
					break;
 8003b58:	e015      	b.n	8003b86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b6a:	f000 fbe1 	bl	8004330 <vPortFree>
 8003b6e:	e00a      	b.n	8003b86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003b82:	e000      	b.n	8003b86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003b84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <prvProcessReceivedCommands+0x1c0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	1d39      	adds	r1, r7, #4
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fc4a 	bl	8002428 <xQueueReceive>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f47f af2a 	bne.w	80039f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3730      	adds	r7, #48	; 0x30
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000cbc 	.word	0x20000cbc

08003bac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bb2:	e048      	b.n	8003c46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bbe:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe f929 	bl	8001e24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02e      	beq.n	8003c46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d90e      	bls.n	8003c18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c06:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f7fe f8ce 	bl	8001db2 <vListInsert>
 8003c16:	e016      	b.n	8003c46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	2100      	movs	r1, #0
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff fd60 	bl	80036e8 <xTimerGenericCommand>
 8003c28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	603b      	str	r3, [r7, #0]
}
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1b1      	bne.n	8003bb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <prvSwitchTimerLists+0xc4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003c5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003c5e:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <prvSwitchTimerLists+0xc4>)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bf00      	nop
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000cb4 	.word	0x20000cb4
 8003c70:	20000cb8 	.word	0x20000cb8

08003c74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003c7a:	f000 f96b 	bl	8003f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <prvCheckForValidListAndQueue+0x60>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d120      	bne.n	8003cc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003c86:	4814      	ldr	r0, [pc, #80]	; (8003cd8 <prvCheckForValidListAndQueue+0x64>)
 8003c88:	f7fe f842 	bl	8001d10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003c8c:	4813      	ldr	r0, [pc, #76]	; (8003cdc <prvCheckForValidListAndQueue+0x68>)
 8003c8e:	f7fe f83f 	bl	8001d10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <prvCheckForValidListAndQueue+0x6c>)
 8003c94:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <prvCheckForValidListAndQueue+0x64>)
 8003c96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <prvCheckForValidListAndQueue+0x70>)
 8003c9a:	4a10      	ldr	r2, [pc, #64]	; (8003cdc <prvCheckForValidListAndQueue+0x68>)
 8003c9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <prvCheckForValidListAndQueue+0x74>)
 8003ca4:	4a11      	ldr	r2, [pc, #68]	; (8003cec <prvCheckForValidListAndQueue+0x78>)
 8003ca6:	2110      	movs	r1, #16
 8003ca8:	200a      	movs	r0, #10
 8003caa:	f7fe f94d 	bl	8001f48 <xQueueGenericCreateStatic>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <prvCheckForValidListAndQueue+0x60>)
 8003cb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <prvCheckForValidListAndQueue+0x60>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <prvCheckForValidListAndQueue+0x60>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	490b      	ldr	r1, [pc, #44]	; (8003cf0 <prvCheckForValidListAndQueue+0x7c>)
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe fda0 	bl	8002808 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cc8:	f000 f974 	bl	8003fb4 <vPortExitCritical>
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000cbc 	.word	0x20000cbc
 8003cd8:	20000c8c 	.word	0x20000c8c
 8003cdc:	20000ca0 	.word	0x20000ca0
 8003ce0:	20000cb4 	.word	0x20000cb4
 8003ce4:	20000cb8 	.word	0x20000cb8
 8003ce8:	20000d68 	.word	0x20000d68
 8003cec:	20000cc8 	.word	0x20000cc8
 8003cf0:	08004630 	.word	0x08004630

08003cf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3b04      	subs	r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3b04      	subs	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3b04      	subs	r3, #4
 8003d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d24:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <pxPortInitialiseStack+0x64>)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3b14      	subs	r3, #20
 8003d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b04      	subs	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f06f 0202 	mvn.w	r2, #2
 8003d42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3b20      	subs	r3, #32
 8003d48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	08003d5d 	.word	0x08003d5d

08003d5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <prvTaskExitError+0x54>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d00a      	beq.n	8003d86 <prvTaskExitError+0x2a>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <prvTaskExitError+0x28>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	60bb      	str	r3, [r7, #8]
}
 8003d98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d9a:	bf00      	nop
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0fc      	beq.n	8003d9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	20000004 	.word	0x20000004
	...

08003dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <pxCurrentTCBConst2>)
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	6808      	ldr	r0, [r1, #0]
 8003dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	f380 8809 	msr	PSP, r0
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8811 	msr	BASEPRI, r0
 8003dda:	4770      	bx	lr
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst2>:
 8003de0:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003de8:	4808      	ldr	r0, [pc, #32]	; (8003e0c <prvPortStartFirstTask+0x24>)
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	f380 8808 	msr	MSP, r0
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8814 	msr	CONTROL, r0
 8003dfa:	b662      	cpsie	i
 8003dfc:	b661      	cpsie	f
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	df00      	svc	0
 8003e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e0a:	bf00      	nop
 8003e0c:	e000ed08 	.word	0xe000ed08

08003e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e16:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <xPortStartScheduler+0x120>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a46      	ldr	r2, [pc, #280]	; (8003f34 <xPortStartScheduler+0x124>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10a      	bne.n	8003e36 <xPortStartScheduler+0x26>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	613b      	str	r3, [r7, #16]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e36:	4b3e      	ldr	r3, [pc, #248]	; (8003f30 <xPortStartScheduler+0x120>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a3f      	ldr	r2, [pc, #252]	; (8003f38 <xPortStartScheduler+0x128>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10a      	bne.n	8003e56 <xPortStartScheduler+0x46>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60fb      	str	r3, [r7, #12]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <xPortStartScheduler+0x12c>)
 8003e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <xPortStartScheduler+0x130>)
 8003e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e7e:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <xPortStartScheduler+0x134>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e84:	e009      	b.n	8003e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <xPortStartScheduler+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <xPortStartScheduler+0x134>)
 8003e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d0ef      	beq.n	8003e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ea6:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <xPortStartScheduler+0x134>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00a      	beq.n	8003ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60bb      	str	r3, [r7, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <xPortStartScheduler+0x134>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <xPortStartScheduler+0x134>)
 8003ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <xPortStartScheduler+0x134>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <xPortStartScheduler+0x134>)
 8003edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <xPortStartScheduler+0x138>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <xPortStartScheduler+0x138>)
 8003eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <xPortStartScheduler+0x138>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <xPortStartScheduler+0x138>)
 8003ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003efe:	f000 f8dd 	bl	80040bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <xPortStartScheduler+0x13c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f08:	f000 f8fc 	bl	8004104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <xPortStartScheduler+0x140>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <xPortStartScheduler+0x140>)
 8003f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f18:	f7ff ff66 	bl	8003de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f1c:	f7ff f850 	bl	8002fc0 <vTaskSwitchContext>
	prvTaskExitError();
 8003f20:	f7ff ff1c 	bl	8003d5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000ed00 	.word	0xe000ed00
 8003f34:	410fc271 	.word	0x410fc271
 8003f38:	410fc270 	.word	0x410fc270
 8003f3c:	e000e400 	.word	0xe000e400
 8003f40:	20000db8 	.word	0x20000db8
 8003f44:	20000dbc 	.word	0x20000dbc
 8003f48:	e000ed20 	.word	0xe000ed20
 8003f4c:	20000004 	.word	0x20000004
 8003f50:	e000ef34 	.word	0xe000ef34

08003f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	607b      	str	r3, [r7, #4]
}
 8003f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <vPortEnterCritical+0x58>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	4a0d      	ldr	r2, [pc, #52]	; (8003fac <vPortEnterCritical+0x58>)
 8003f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <vPortEnterCritical+0x58>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10f      	bne.n	8003fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <vPortEnterCritical+0x5c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	603b      	str	r3, [r7, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <vPortEnterCritical+0x4a>
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20000004 	.word	0x20000004
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <vPortExitCritical+0x50>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <vPortExitCritical+0x24>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	607b      	str	r3, [r7, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <vPortExitCritical+0x50>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <vPortExitCritical+0x50>)
 8003fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <vPortExitCritical+0x50>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <vPortExitCritical+0x42>
 8003fea:	2300      	movs	r3, #0
 8003fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f383 8811 	msr	BASEPRI, r3
}
 8003ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	20000004 	.word	0x20000004
	...

08004010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <pxCurrentTCBConst>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f01e 0f10 	tst.w	lr, #16
 8004020:	bf08      	it	eq
 8004022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004034:	f380 8811 	msr	BASEPRI, r0
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f7fe ffbe 	bl	8002fc0 <vTaskSwitchContext>
 8004044:	f04f 0000 	mov.w	r0, #0
 8004048:	f380 8811 	msr	BASEPRI, r0
 800404c:	bc09      	pop	{r0, r3}
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	6808      	ldr	r0, [r1, #0]
 8004052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004056:	f01e 0f10 	tst.w	lr, #16
 800405a:	bf08      	it	eq
 800405c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004060:	f380 8809 	msr	PSP, r0
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst>:
 8004070:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	607b      	str	r3, [r7, #4]
}
 8004090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004092:	f7fe fedb 	bl	8002e4c <xTaskIncrementTick>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <xPortSysTickHandler+0x40>)
 800409e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	2300      	movs	r3, #0
 80040a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f383 8811 	msr	BASEPRI, r3
}
 80040ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <vPortSetupTimerInterrupt+0x34>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040c6:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <vPortSetupTimerInterrupt+0x38>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <vPortSetupTimerInterrupt+0x3c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <vPortSetupTimerInterrupt+0x40>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	4a09      	ldr	r2, [pc, #36]	; (8004100 <vPortSetupTimerInterrupt+0x44>)
 80040da:	3b01      	subs	r3, #1
 80040dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <vPortSetupTimerInterrupt+0x34>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000e010 	.word	0xe000e010
 80040f4:	e000e018 	.word	0xe000e018
 80040f8:	20000000 	.word	0x20000000
 80040fc:	10624dd3 	.word	0x10624dd3
 8004100:	e000e014 	.word	0xe000e014

08004104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004114 <vPortEnableVFP+0x10>
 8004108:	6801      	ldr	r1, [r0, #0]
 800410a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800410e:	6001      	str	r1, [r0, #0]
 8004110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004112:	bf00      	nop
 8004114:	e000ed88 	.word	0xe000ed88

08004118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800411e:	f3ef 8305 	mrs	r3, IPSR
 8004122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b0f      	cmp	r3, #15
 8004128:	d914      	bls.n	8004154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <vPortValidateInterruptPriority+0x70>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <vPortValidateInterruptPriority+0x74>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	7afa      	ldrb	r2, [r7, #11]
 800413a:	429a      	cmp	r2, r3
 800413c:	d20a      	bcs.n	8004154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	607b      	str	r3, [r7, #4]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <vPortValidateInterruptPriority+0x78>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <vPortValidateInterruptPriority+0x7c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d90a      	bls.n	800417a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	603b      	str	r3, [r7, #0]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <vPortValidateInterruptPriority+0x60>
	}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000e3f0 	.word	0xe000e3f0
 800418c:	20000db8 	.word	0x20000db8
 8004190:	e000ed0c 	.word	0xe000ed0c
 8004194:	20000dbc 	.word	0x20000dbc

08004198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041a4:	f7fe fd96 	bl	8002cd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041a8:	4b5b      	ldr	r3, [pc, #364]	; (8004318 <pvPortMalloc+0x180>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041b0:	f000 f920 	bl	80043f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041b4:	4b59      	ldr	r3, [pc, #356]	; (800431c <pvPortMalloc+0x184>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8093 	bne.w	80042e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01d      	beq.n	8004204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041c8:	2208      	movs	r2, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d014      	beq.n	8004204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f023 0307 	bic.w	r3, r3, #7
 80041e0:	3308      	adds	r3, #8
 80041e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <pvPortMalloc+0x6c>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	617b      	str	r3, [r7, #20]
}
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d06e      	beq.n	80042e8 <pvPortMalloc+0x150>
 800420a:	4b45      	ldr	r3, [pc, #276]	; (8004320 <pvPortMalloc+0x188>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d869      	bhi.n	80042e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004214:	4b43      	ldr	r3, [pc, #268]	; (8004324 <pvPortMalloc+0x18c>)
 8004216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004218:	4b42      	ldr	r3, [pc, #264]	; (8004324 <pvPortMalloc+0x18c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800421e:	e004      	b.n	800422a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d903      	bls.n	800423c <pvPortMalloc+0xa4>
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f1      	bne.n	8004220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <pvPortMalloc+0x180>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004242:	429a      	cmp	r2, r3
 8004244:	d050      	beq.n	80042e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2208      	movs	r2, #8
 800424c:	4413      	add	r3, r2
 800424e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	1ad2      	subs	r2, r2, r3
 8004260:	2308      	movs	r3, #8
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	429a      	cmp	r2, r3
 8004266:	d91f      	bls.n	80042a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <pvPortMalloc+0xf8>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	613b      	str	r3, [r7, #16]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042a2:	69b8      	ldr	r0, [r7, #24]
 80042a4:	f000 f908 	bl	80044b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042a8:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <pvPortMalloc+0x188>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <pvPortMalloc+0x188>)
 80042b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042b6:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <pvPortMalloc+0x188>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <pvPortMalloc+0x190>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d203      	bcs.n	80042ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <pvPortMalloc+0x188>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <pvPortMalloc+0x190>)
 80042c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <pvPortMalloc+0x184>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <pvPortMalloc+0x194>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a11      	ldr	r2, [pc, #68]	; (800432c <pvPortMalloc+0x194>)
 80042e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042e8:	f7fe fd02 	bl	8002cf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <pvPortMalloc+0x174>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60fb      	str	r3, [r7, #12]
}
 8004308:	bf00      	nop
 800430a:	e7fe      	b.n	800430a <pvPortMalloc+0x172>
	return pvReturn;
 800430c:	69fb      	ldr	r3, [r7, #28]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	; 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200049c8 	.word	0x200049c8
 800431c:	200049dc 	.word	0x200049dc
 8004320:	200049cc 	.word	0x200049cc
 8004324:	200049c0 	.word	0x200049c0
 8004328:	200049d0 	.word	0x200049d0
 800432c:	200049d4 	.word	0x200049d4

08004330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d04d      	beq.n	80043de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004342:	2308      	movs	r3, #8
 8004344:	425b      	negs	r3, r3
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4413      	add	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <vPortFree+0xb8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <vPortFree+0x44>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	60fb      	str	r3, [r7, #12]
}
 8004370:	bf00      	nop
 8004372:	e7fe      	b.n	8004372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <vPortFree+0x62>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60bb      	str	r3, [r7, #8]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <vPortFree+0xb8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01e      	beq.n	80043de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11a      	bne.n	80043de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <vPortFree+0xb8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	401a      	ands	r2, r3
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043b8:	f7fe fc8c 	bl	8002cd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <vPortFree+0xbc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4413      	add	r3, r2
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <vPortFree+0xbc>)
 80043c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043ca:	6938      	ldr	r0, [r7, #16]
 80043cc:	f000 f874 	bl	80044b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <vPortFree+0xc0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <vPortFree+0xc0>)
 80043d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80043da:	f7fe fc89 	bl	8002cf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200049dc 	.word	0x200049dc
 80043ec:	200049cc 	.word	0x200049cc
 80043f0:	200049d8 	.word	0x200049d8

080043f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80043fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <prvHeapInit+0xac>)
 8004402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3307      	adds	r3, #7
 8004412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <prvHeapInit+0xac>)
 8004424:	4413      	add	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <prvHeapInit+0xb0>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <prvHeapInit+0xb0>)
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4413      	add	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004440:	2208      	movs	r2, #8
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0307 	bic.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <prvHeapInit+0xb4>)
 8004454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <prvHeapInit+0xb4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <prvHeapInit+0xb4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <prvHeapInit+0xb4>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <prvHeapInit+0xb8>)
 8004482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <prvHeapInit+0xbc>)
 800448a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <prvHeapInit+0xc0>)
 800448e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	20000dc0 	.word	0x20000dc0
 80044a4:	200049c0 	.word	0x200049c0
 80044a8:	200049c8 	.word	0x200049c8
 80044ac:	200049d0 	.word	0x200049d0
 80044b0:	200049cc 	.word	0x200049cc
 80044b4:	200049dc 	.word	0x200049dc

080044b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044c0:	4b28      	ldr	r3, [pc, #160]	; (8004564 <prvInsertBlockIntoFreeList+0xac>)
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e002      	b.n	80044cc <prvInsertBlockIntoFreeList+0x14>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d8f7      	bhi.n	80044c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d108      	bne.n	80044fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d118      	bne.n	8004540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <prvInsertBlockIntoFreeList+0xb0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d00d      	beq.n	8004536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e008      	b.n	8004548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <prvInsertBlockIntoFreeList+0xb0>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e003      	b.n	8004548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d002      	beq.n	8004556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	200049c0 	.word	0x200049c0
 8004568:	200049c8 	.word	0x200049c8

0800456c <memset>:
 800456c:	4402      	add	r2, r0
 800456e:	4603      	mov	r3, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4d0d      	ldr	r5, [pc, #52]	; (80045b4 <__libc_init_array+0x38>)
 8004580:	4c0d      	ldr	r4, [pc, #52]	; (80045b8 <__libc_init_array+0x3c>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	2600      	movs	r6, #0
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	4d0b      	ldr	r5, [pc, #44]	; (80045bc <__libc_init_array+0x40>)
 800458e:	4c0c      	ldr	r4, [pc, #48]	; (80045c0 <__libc_init_array+0x44>)
 8004590:	f000 f826 	bl	80045e0 <_init>
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	2600      	movs	r6, #0
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	08004638 	.word	0x08004638
 80045b8:	08004638 	.word	0x08004638
 80045bc:	08004638 	.word	0x08004638
 80045c0:	0800463c 	.word	0x0800463c

080045c4 <memcpy>:
 80045c4:	440a      	add	r2, r1
 80045c6:	4291      	cmp	r1, r2
 80045c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045cc:	d100      	bne.n	80045d0 <memcpy+0xc>
 80045ce:	4770      	bx	lr
 80045d0:	b510      	push	{r4, lr}
 80045d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045da:	4291      	cmp	r1, r2
 80045dc:	d1f9      	bne.n	80045d2 <memcpy+0xe>
 80045de:	bd10      	pop	{r4, pc}

080045e0 <_init>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr

080045ec <_fini>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	bf00      	nop
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr
