
DataProcessing_ADXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08007c38  08007c38  00017c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ff4  08007ff4  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08007ff4  08007ff4  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ff4  08007ff4  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff8  08007ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08007ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  20000238  08008234  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d40  08008234  00024d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e46b  00000000  00000000  000202ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002851  00000000  00000000  0002e716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  00030f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000915  00000000  00000000  00031b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012a96  00000000  00000000  0003248d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de67  00000000  00000000  00044f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00062da4  00000000  00000000  00052d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004118  00000000  00000000  000b5b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b9c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c20 	.word	0x08007c20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	08007c20 	.word	0x08007c20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__io_putchar>:

QueueHandle_t adxl_data_queue, filtered_data_queue;


int __io_putchar(int ch)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	WriteByte(&UART2, (uint16_t)ch);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4619      	mov	r1, r3
 8000c66:	4804      	ldr	r0, [pc, #16]	; (8000c78 <__io_putchar+0x20>)
 8000c68:	f001 fe4b 	bl	8002902 <WriteByte>
	return ch;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000288 	.word	0x20000288

08000c7c <InitCascade>:
 * 			product of bi-quads.
 *
 * @Note	To see design of filter see README file
 */
static void InitCascade(IIR_LowPass_Filter *filter, float num_coeff[], float denom_coeff[], int order, float gain)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b08b      	sub	sp, #44	; 0x2c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6178      	str	r0, [r7, #20]
 8000c84:	6139      	str	r1, [r7, #16]
 8000c86:	60fa      	str	r2, [r7, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	//Initialize buffer values to 0
	for(int i = 0; i < 2; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
 8000c92:	e009      	b.n	8000ca8 <InitCascade+0x2c>
	{
		filter->buffer[i] = 0;
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2; i++)
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	ddf2      	ble.n	8000c94 <InitCascade+0x18>
	}

	for(int i = 0; i < order; i++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
 8000cb2:	e00e      	b.n	8000cd2 <InitCascade+0x56>
	{
		//Initialize Coefficients for denominator
		filter->denominator_coefficients[i] = denom_coeff[i];
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	6979      	ldr	r1, [r7, #20]
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	3304      	adds	r3, #4
 8000cca:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < order; i++)
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	623b      	str	r3, [r7, #32]
 8000cd2:	6a3a      	ldr	r2, [r7, #32]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	dbec      	blt.n	8000cb4 <InitCascade+0x38>
	}

	for(int i = 0; i < order + 1; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	e00d      	b.n	8000cfc <InitCascade+0x80>
	{
		//Initialize Coefficients for numerator
		filter->numerator_coefficients[i] = num_coeff[i];
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	6979      	ldr	r1, [r7, #20]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < order + 1; i++)
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	daed      	bge.n	8000ce0 <InitCascade+0x64>
	}

	//Initialize gain
	filter->gain = gain;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	61da      	str	r2, [r3, #28]
}
 8000d0a:	bf00      	nop
 8000d0c:	372c      	adds	r7, #44	; 0x2c
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <CascadeIIR>:
 * @Note	This filter is based offf an elliptic lowpass filter - designed in MATLAB.
 *
 * @Note	To see how these equations were derived see README
 */
static float CascadeIIR(IIR_LowPass_Filter *filter, int16_t input)
{
 8000d16:	b5b0      	push	{r4, r5, r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	807b      	strh	r3, [r7, #2]
	//Algorithm to calculate the intermediate value: w(n) = x(n) - a0*w(n-1) - a1*w(n-2)
	float intermediate = (double)input - (filter->buffer[0] * filter->denominator_coefficients[0]) - (filter->buffer[1] * filter->denominator_coefficients[1]);
 8000d22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fc04 	bl	8000534 <__aeabi_i2d>
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460d      	mov	r5, r1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	ed93 7a00 	vldr	s14, [r3]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d40:	ee17 0a90 	vmov	r0, s15
 8000d44:	f7ff fc08 	bl	8000558 <__aeabi_f2d>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	4629      	mov	r1, r5
 8000d50:	f7ff faa2 	bl	8000298 <__aeabi_dsub>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4614      	mov	r4, r2
 8000d5a:	461d      	mov	r5, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6c:	ee17 0a90 	vmov	r0, s15
 8000d70:	f7ff fbf2 	bl	8000558 <__aeabi_f2d>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	f7ff fa8c 	bl	8000298 <__aeabi_dsub>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f7ff ff16 	bl	8000bb8 <__aeabi_d2f>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60fb      	str	r3, [r7, #12]
	//Algorithm to calculate the final output value: y(n) = b1*w(n) + b2*w(n-1) + b3*w(n-2)
	float output = (intermediate * filter->numerator_coefficients[0]) + (filter->buffer[0] * filter->numerator_coefficients[1]) + (filter->buffer[1] * filter->numerator_coefficients[2]);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	edd3 6a00 	vldr	s13, [r3]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	edd3 6a01 	vldr	s13, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	edd3 7a04 	vldr	s15, [r3, #16]
 8000dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dc6:	edc7 7a02 	vstr	s15, [r7, #8]
	//Multiply the output by the filter gain
	output *= filter->gain;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	edd3 7a07 	vldr	s15, [r3, #28]
 8000dd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	edc7 7a02 	vstr	s15, [r7, #8]

	//Shift/delay buffer values
	filter->buffer[1] = filter->buffer[0];
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	605a      	str	r2, [r3, #4]
	filter->buffer[0] = intermediate;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]

	return output;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	ee07 3a90 	vmov	s15, r3
}
 8000df0:	eeb0 0a67 	vmov.f32	s0, s15
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000dfc <DataProcessing>:
	return filter->output;
}


void DataProcessing(void *pvParameters)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b0b1      	sub	sp, #196	; 0xc4
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	AccelerometerData rec_data;
	FIR_LowPass_Filter EllipticLP;
	int16_t input = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	float output;

	IIR_LowPass_Filter cascade1, cascade2, cascade3;

	InitCascade(&cascade1, NUMERATOR_CASCADE1_COEFFICIENTS, DENOMINATOR_CASCADE1_COEFFICIENTS, IIR_FILTER_ORDER, GAIN_CASCADE1);
 8000e0a:	4b34      	ldr	r3, [pc, #208]	; (8000edc <DataProcessing+0xe0>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000e14:	eeb0 0a67 	vmov.f32	s0, s15
 8000e18:	2302      	movs	r3, #2
 8000e1a:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <DataProcessing+0xe4>)
 8000e1c:	4931      	ldr	r1, [pc, #196]	; (8000ee4 <DataProcessing+0xe8>)
 8000e1e:	f7ff ff2d 	bl	8000c7c <InitCascade>
	InitCascade(&cascade2, NUMERATOR_CASCADE2_COEFFICIENTS, DENOMINATOR_CASCADE2_COEFFICIENTS, IIR_FILTER_ORDER, GAIN_CASCADE2);
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <DataProcessing+0xec>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e30:	2302      	movs	r3, #2
 8000e32:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <DataProcessing+0xf0>)
 8000e34:	492e      	ldr	r1, [pc, #184]	; (8000ef0 <DataProcessing+0xf4>)
 8000e36:	f7ff ff21 	bl	8000c7c <InitCascade>
	InitCascade(&cascade3, NUMERATOR_CASCADE3_COEFFICIENTS, DENOMINATOR_CASCADE3_COEFFICIENTS, IIR_FILTER_ORDER, GAIN_CASCADE3);
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <DataProcessing+0xf8>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	f107 0008 	add.w	r0, r7, #8
 8000e44:	eeb0 0a67 	vmov.f32	s0, s15
 8000e48:	2302      	movs	r3, #2
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <DataProcessing+0xfc>)
 8000e4c:	492b      	ldr	r1, [pc, #172]	; (8000efc <DataProcessing+0x100>)
 8000e4e:	f7ff ff15 	bl	8000c7c <InitCascade>

	//InitFIRFilter(&EllipticLP);

	while(1)
	{
		xQueueReceive(adxl_data_queue, &rec_data, 0);			//Read accelerometer data from FreeRTOS queue
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <DataProcessing+0x104>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 f96f 	bl	8003140 <xQueueReceive>

		if(rec_data.axis == x_axis)
 8000e62:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f3      	bne.n	8000e52 <DataProcessing+0x56>
		{
			input = rec_data.value;
 8000e6a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8000e6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
			//FIRFilterComputation(&EllipticLP, input);
			output = CascadeIIR(&cascade1, input);
 8000e72:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	; 0xbe
 8000e76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff4a 	bl	8000d16 <CascadeIIR>
 8000e82:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
			output = CascadeIIR(&cascade2, output);
 8000e86:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8000e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8e:	ee17 3a90 	vmov	r3, s15
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff3b 	bl	8000d16 <CascadeIIR>
 8000ea0:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
			output = CascadeIIR(&cascade3, output);
 8000ea4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 3a90 	vmov	r3, s15
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff2c 	bl	8000d16 <CascadeIIR>
 8000ebe:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
			printf("%d, %.2f\n\r", input, output);
 8000ec2:	f9b7 40be 	ldrsh.w	r4, [r7, #190]	; 0xbe
 8000ec6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000eca:	f7ff fb45 	bl	8000558 <__aeabi_f2d>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <DataProcessing+0x108>)
 8000ed6:	f004 fef9 	bl	8005ccc <iprintf>
		xQueueReceive(adxl_data_queue, &rec_data, 0);			//Read accelerometer data from FreeRTOS queue
 8000eda:	e7ba      	b.n	8000e52 <DataProcessing+0x56>
 8000edc:	20000014 	.word	0x20000014
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	2000002c 	.word	0x2000002c
 8000eec:	20000024 	.word	0x20000024
 8000ef0:	20000018 	.word	0x20000018
 8000ef4:	20000044 	.word	0x20000044
 8000ef8:	2000003c 	.word	0x2000003c
 8000efc:	20000030 	.word	0x20000030
 8000f00:	2000029c 	.word	0x2000029c
 8000f04:	08007c38 	.word	0x08007c38

08000f08 <SPI_Specs_Init>:

/*
 * Function to set the SPI specs
 */
static void SPI_Specs_Init()
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
	//Set desired pins
	SPI1_Example.SPI_Config.cs_gpio = GPIOA;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <SPI_Specs_Init+0x54>)
 8000f10:	609a      	str	r2, [r3, #8]
	SPI1_Example.SPI_Config.pin_clk = Pin5;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f14:	2205      	movs	r2, #5
 8000f16:	715a      	strb	r2, [r3, #5]
	SPI1_Example.SPI_Config.pin_miso = Pin6;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f1a:	2206      	movs	r2, #6
 8000f1c:	71da      	strb	r2, [r3, #7]
	SPI1_Example.SPI_Config.pin_mosi = Pin7;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	719a      	strb	r2, [r3, #6]

	//Set desired transfer methods
	SPI1_Example.ssm = SSM_Enable;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	745a      	strb	r2, [r3, #17]
	SPI1_Example.SPIx = SPI1;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <SPI_Specs_Init+0x58>)
 8000f2e:	601a      	str	r2, [r3, #0]
	SPI1_Example.SPI_Config.baudrate_ctrl = DIV4;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	731a      	strb	r2, [r3, #12]
	SPI1_Example.SPI_Config.cpha = Falling_Edge;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	739a      	strb	r2, [r3, #14]
	SPI1_Example.SPI_Config.cpol = Even_Polarity;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	735a      	strb	r2, [r3, #13]
	SPI1_Example.SPI_Config.data_format = MSB_First;
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	73da      	strb	r2, [r3, #15]
	SPI1_Example.data_frame = Data_8_Bits;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <SPI_Specs_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	741a      	strb	r2, [r3, #16]
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20000254 	.word	0x20000254
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40013000 	.word	0x40013000

08000f64 <Slave_Pin_Init>:

static void Slave_Pin_Init()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af04      	add	r7, sp, #16
	//Create and initialze a slave pin with the desired port and pin
	GPIO_Config(&ADXL, GPIOA, Pin8, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	2300      	movs	r3, #0
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <Slave_Pin_Init+0x38>)
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <Slave_Pin_Init+0x3c>)
 8000f7e:	f000 f9fa 	bl	8001376 <GPIO_Config>
	GPIO_Init(&ADXL, 0x0);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <Slave_Pin_Init+0x3c>)
 8000f86:	f000 fadf 	bl	8001548 <GPIO_Init>
	GPIOA->ODR |= (1U << 8); //Used to enable the P-MOS and ensure CS is active high
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <Slave_Pin_Init+0x38>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <Slave_Pin_Init+0x38>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f94:	6153      	str	r3, [r2, #20]
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	2000027c 	.word	0x2000027c

08000fa4 <ReadADXLData>:


void ReadADXLData(void *pvParameters)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	; 0x38
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
	AccelerometerData data;

	uint8_t adxl_address[1] = {0xF2};	//Address of data register to read from
 8000fac:	23f2      	movs	r3, #242	; 0xf2
 8000fae:	f887 3020 	strb.w	r3, [r7, #32]

	/*
	 * Variables to initialize the ADXL registers: Set range to +- 4g, allow
	 * continous reading of the data registers and set the transfer rate to 100Hz.
	 */
	uint8_t adxl_set_data_format[2] = {0x31, 0x01};
 8000fb2:	f240 1331 	movw	r3, #305	; 0x131
 8000fb6:	82bb      	strh	r3, [r7, #20]
	uint8_t adxl_clear_powerctl_reg[2] = {0x2D, 0x00};
 8000fb8:	232d      	movs	r3, #45	; 0x2d
 8000fba:	823b      	strh	r3, [r7, #16]
	uint8_t adxl_set_powerctl_reg[2] = {0x2D, 0x08};
 8000fbc:	f640 032d 	movw	r3, #2093	; 0x82d
 8000fc0:	81bb      	strh	r3, [r7, #12]
	uint8_t adxl_set_bw_rate_reg[2] = {0x2C, 0x0A};
 8000fc2:	f640 232c 	movw	r3, #2604	; 0xa2c
 8000fc6:	813b      	strh	r3, [r7, #8]

	//Configure SPI and slave pin for ADXL
	SPI_Specs_Init();
 8000fc8:	f7ff ff9e 	bl	8000f08 <SPI_Specs_Init>
	Slave_Pin_Init();
 8000fcc:	f7ff ffca 	bl	8000f64 <Slave_Pin_Init>

	SPI_Init(&SPI1_Example);
 8000fd0:	4832      	ldr	r0, [pc, #200]	; (800109c <ReadADXLData+0xf8>)
 8000fd2:	f001 f839 	bl	8002048 <SPI_Init>

	/*
	 * Initial Transmission to configure ADXL with desired variables
	 */
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_clear_powerctl_reg, 2);
 8000fd6:	f107 0210 	add.w	r2, r7, #16
 8000fda:	2302      	movs	r3, #2
 8000fdc:	4930      	ldr	r1, [pc, #192]	; (80010a0 <ReadADXLData+0xfc>)
 8000fde:	482f      	ldr	r0, [pc, #188]	; (800109c <ReadADXLData+0xf8>)
 8000fe0:	f001 fa63 	bl	80024aa <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_data_format, 2);
 8000fe4:	f107 0214 	add.w	r2, r7, #20
 8000fe8:	2302      	movs	r3, #2
 8000fea:	492d      	ldr	r1, [pc, #180]	; (80010a0 <ReadADXLData+0xfc>)
 8000fec:	482b      	ldr	r0, [pc, #172]	; (800109c <ReadADXLData+0xf8>)
 8000fee:	f001 fa5c 	bl	80024aa <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_bw_rate_reg, 2);
 8000ff2:	f107 0208 	add.w	r2, r7, #8
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	4929      	ldr	r1, [pc, #164]	; (80010a0 <ReadADXLData+0xfc>)
 8000ffa:	4828      	ldr	r0, [pc, #160]	; (800109c <ReadADXLData+0xf8>)
 8000ffc:	f001 fa55 	bl	80024aa <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_powerctl_reg, 2);
 8001000:	f107 020c 	add.w	r2, r7, #12
 8001004:	2302      	movs	r3, #2
 8001006:	4926      	ldr	r1, [pc, #152]	; (80010a0 <ReadADXLData+0xfc>)
 8001008:	4824      	ldr	r0, [pc, #144]	; (800109c <ReadADXLData+0xf8>)
 800100a:	f001 fa4e 	bl	80024aa <SPI_MultiSlave_TransmitIT>

	while(1)
	{
		//Reading data from the SPI
		SPI_MultiSlave_RecieveIT(&SPI1_Example, &ADXL, adxl_data_rec, 7, *adxl_address);
 800100e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001012:	f107 0218 	add.w	r2, r7, #24
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2307      	movs	r3, #7
 800101a:	4921      	ldr	r1, [pc, #132]	; (80010a0 <ReadADXLData+0xfc>)
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <ReadADXLData+0xf8>)
 800101e:	f001 fa6e 	bl	80024fe <SPI_MultiSlave_RecieveIT>

		/*
		 * Convert the data into usable/readable values - this can be found in the ADXL345 documentation,
		 * and send the stored values to a queue.
		 */
		x = ((adxl_data_rec[2] << 8) | adxl_data_rec[1]);
 8001022:	7ebb      	ldrb	r3, [r7, #26]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	7e7b      	ldrb	r3, [r7, #25]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		data.axis = x_axis;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		data.value = x;
 8001036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001038:	84fb      	strh	r3, [r7, #38]	; 0x26
		xQueueSend(adxl_data_queue, &data, 0);
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <ReadADXLData+0x100>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001042:	2300      	movs	r3, #0
 8001044:	2200      	movs	r2, #0
 8001046:	f001 fee1 	bl	8002e0c <xQueueGenericSend>

		y = ((adxl_data_rec[4] << 8) | adxl_data_rec[3]);
 800104a:	7f3b      	ldrb	r3, [r7, #28]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	7efb      	ldrb	r3, [r7, #27]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	85bb      	strh	r3, [r7, #44]	; 0x2c
		data.axis = y_axis;
 8001058:	2301      	movs	r3, #1
 800105a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		data.value = y;
 800105e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001060:	84fb      	strh	r3, [r7, #38]	; 0x26
		xQueueSend(adxl_data_queue, &data, 0);
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <ReadADXLData+0x100>)
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800106a:	2300      	movs	r3, #0
 800106c:	2200      	movs	r2, #0
 800106e:	f001 fecd 	bl	8002e0c <xQueueGenericSend>

		z = ((adxl_data_rec[6] << 8) | adxl_data_rec[5]);
 8001072:	7fbb      	ldrb	r3, [r7, #30]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7f7b      	ldrb	r3, [r7, #29]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	857b      	strh	r3, [r7, #42]	; 0x2a
		data.axis = z_axis;
 8001080:	2302      	movs	r3, #2
 8001082:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		data.value = z;
 8001086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001088:	84fb      	strh	r3, [r7, #38]	; 0x26
		xQueueSend(adxl_data_queue, &data, 0);
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <ReadADXLData+0x100>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001092:	2300      	movs	r3, #0
 8001094:	2200      	movs	r2, #0
 8001096:	f001 feb9 	bl	8002e0c <xQueueGenericSend>
		SPI_MultiSlave_RecieveIT(&SPI1_Example, &ADXL, adxl_data_rec, 7, *adxl_address);
 800109a:	e7b8      	b.n	800100e <ReadADXLData+0x6a>
 800109c:	20000254 	.word	0x20000254
 80010a0:	2000027c 	.word	0x2000027c
 80010a4:	2000029c 	.word	0x2000029c

080010a8 <SPI1_IRQHandler>:

/*
 * Function to serve interrupts
 */
void SPI1_IRQHandler()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]

	SPI_IRQ_Handler(&SPI1_Example);
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <SPI1_IRQHandler+0x30>)
 80010b4:	f001 fa5a 	bl	800256c <SPI_IRQ_Handler>

	//Causes a context switch for the CPU
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <SPI1_IRQHandler+0x26>
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <SPI1_IRQHandler+0x34>)
 80010c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	f3bf 8f4f 	dsb	sy
 80010ca:	f3bf 8f6f 	isb	sy
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000254 	.word	0x20000254
 80010dc:	e000ed04 	.word	0xe000ed04

080010e0 <main>:

//int __io_putchar(int ch);


int main()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af02      	add	r7, sp, #8
	UART_Config(&UART2, USART2, UART_MODE_TX, 115200);
 80010e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010ea:	2208      	movs	r2, #8
 80010ec:	4919      	ldr	r1, [pc, #100]	; (8001154 <main+0x74>)
 80010ee:	481a      	ldr	r0, [pc, #104]	; (8001158 <main+0x78>)
 80010f0:	f001 fa71 	bl	80025d6 <UART_Config>
	UART_Init(&UART2);
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <main+0x78>)
 80010f6:	f001 fb8f 	bl	8002818 <UART_Init>

	adxl_data_queue = xQueueCreate(6, sizeof(AccelerometerData));  		//Create queue to hold read data
 80010fa:	2200      	movs	r2, #0
 80010fc:	2104      	movs	r1, #4
 80010fe:	2006      	movs	r0, #6
 8001100:	f001 fe26 	bl	8002d50 <xQueueGenericCreate>
 8001104:	4603      	mov	r3, r0
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <main+0x7c>)
 8001108:	6013      	str	r3, [r2, #0]
	filtered_data_queue = xQueueCreate(6, sizeof(AccelerometerData));	//Create queue to transmit the filtered data
 800110a:	2200      	movs	r2, #0
 800110c:	2104      	movs	r1, #4
 800110e:	2006      	movs	r0, #6
 8001110:	f001 fe1e 	bl	8002d50 <xQueueGenericCreate>
 8001114:	4603      	mov	r3, r0
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <main+0x80>)
 8001118:	6013      	str	r3, [r2, #0]

	xTaskCreate(ReadADXLData, "Read ADXL Task", 1000, NULL, 1, NULL);
 800111a:	2300      	movs	r3, #0
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	2301      	movs	r3, #1
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001128:	490e      	ldr	r1, [pc, #56]	; (8001164 <main+0x84>)
 800112a:	480f      	ldr	r0, [pc, #60]	; (8001168 <main+0x88>)
 800112c:	f002 fab3 	bl	8003696 <xTaskCreate>
	xTaskCreate(DataProcessing, "Data Processing Task", 2000, NULL, 1, NULL);
 8001130:	2300      	movs	r3, #0
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	2301      	movs	r3, #1
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2300      	movs	r3, #0
 800113a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800113e:	490b      	ldr	r1, [pc, #44]	; (800116c <main+0x8c>)
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <main+0x90>)
 8001142:	f002 faa8 	bl	8003696 <xTaskCreate>

	vTaskStartScheduler();
 8001146:	f002 fbeb 	bl	8003920 <vTaskStartScheduler>
 800114a:	2300      	movs	r3, #0

}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40004400 	.word	0x40004400
 8001158:	20000288 	.word	0x20000288
 800115c:	2000029c 	.word	0x2000029c
 8001160:	200002a0 	.word	0x200002a0
 8001164:	08007c44 	.word	0x08007c44
 8001168:	08000fa5 	.word	0x08000fa5
 800116c:	08007c54 	.word	0x08007c54
 8001170:	08000dfd 	.word	0x08000dfd

08001174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_kill>:

int _kill(int pid, int sig)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800118e:	f004 fe45 	bl	8005e1c <__errno>
 8001192:	4603      	mov	r3, r0
 8001194:	2216      	movs	r2, #22
 8001196:	601a      	str	r2, [r3, #0]
  return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_exit>:

void _exit (int status)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ffe7 	bl	8001184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b6:	e7fe      	b.n	80011b6 <_exit+0x12>

080011b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e00a      	b.n	80011e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ca:	f3af 8000 	nop.w
 80011ce:	4601      	mov	r1, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	60ba      	str	r2, [r7, #8]
 80011d6:	b2ca      	uxtb	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbf0      	blt.n	80011ca <_read+0x12>
  }

  return len;
 80011e8:	687b      	ldr	r3, [r7, #4]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e009      	b.n	8001218 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	60ba      	str	r2, [r7, #8]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fd23 	bl	8000c58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3301      	adds	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	429a      	cmp	r2, r3
 800121e:	dbf1      	blt.n	8001204 <_write+0x12>
  }
  return len;
 8001220:	687b      	ldr	r3, [r7, #4]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_close>:

int _close(int file)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001252:	605a      	str	r2, [r3, #4]
  return 0;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_isatty>:

int _isatty(int file)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f004 fdaa 	bl	8005e1c <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20018000 	.word	0x20018000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	200002a4 	.word	0x200002a4
 80012fc:	20004d40 	.word	0x20004d40

08001300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001328:	f7ff ffea 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	; (8001370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001352:	f004 fd69 	bl	8005e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001356:	f7ff fec3 	bl	80010e0 <main>
  bx  lr    
 800135a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800135c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001368:	08007ffc 	.word	0x08007ffc
  ldr r2, =_sbss
 800136c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001370:	20004d40 	.word	0x20004d40

08001374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC_IRQHandler>

08001376 <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, GPIO_TypeDef *Port, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	4611      	mov	r1, r2
 8001382:	461a      	mov	r2, r3
 8001384:	460b      	mov	r3, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
	GPIO_Config->GPIO_Pin = Pin;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_Port = Port;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	609a      	str	r2, [r3, #8]
	GPIO_Config->GPIO_MODE = Mode;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	79ba      	ldrb	r2, [r7, #6]
 800139c:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	7e3a      	ldrb	r2, [r7, #24]
 80013a2:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	7f3a      	ldrb	r2, [r7, #28]
 80013a8:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013b0:	711a      	strb	r2, [r3, #4]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d135      	bne.n	800143e <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <GPIO_PeriphClck+0xf0>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d104      	bne.n	80013e4 <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 80013da:	2101      	movs	r1, #1
 80013dc:	2001      	movs	r0, #1
 80013de:	f000 fcff 	bl	8001de0 <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 80013e2:	e061      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <GPIO_PeriphClck+0xf4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d104      	bne.n	80013f6 <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 80013ec:	2101      	movs	r1, #1
 80013ee:	2002      	movs	r0, #2
 80013f0:	f000 fcf6 	bl	8001de0 <RCC_AHB1Cmd>
}
 80013f4:	e058      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <GPIO_PeriphClck+0xf8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d104      	bne.n	8001408 <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 80013fe:	2101      	movs	r1, #1
 8001400:	2004      	movs	r0, #4
 8001402:	f000 fced 	bl	8001de0 <RCC_AHB1Cmd>
}
 8001406:	e04f      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a2c      	ldr	r2, [pc, #176]	; (80014bc <GPIO_PeriphClck+0xfc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d104      	bne.n	800141a <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 8001410:	2101      	movs	r1, #1
 8001412:	2008      	movs	r0, #8
 8001414:	f000 fce4 	bl	8001de0 <RCC_AHB1Cmd>
}
 8001418:	e046      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <GPIO_PeriphClck+0x100>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d104      	bne.n	800142c <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 8001422:	2101      	movs	r1, #1
 8001424:	2010      	movs	r0, #16
 8001426:	f000 fcdb 	bl	8001de0 <RCC_AHB1Cmd>
}
 800142a:	e03d      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <GPIO_PeriphClck+0x104>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d139      	bne.n	80014a8 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 8001434:	2101      	movs	r1, #1
 8001436:	2080      	movs	r0, #128	; 0x80
 8001438:	f000 fcd2 	bl	8001de0 <RCC_AHB1Cmd>
}
 800143c:	e034      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <GPIO_PeriphClck+0xf0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d104      	bne.n	8001450 <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 8001446:	2100      	movs	r1, #0
 8001448:	2001      	movs	r0, #1
 800144a:	f000 fcc9 	bl	8001de0 <RCC_AHB1Cmd>
}
 800144e:	e02b      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <GPIO_PeriphClck+0xf4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d104      	bne.n	8001462 <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 8001458:	2100      	movs	r1, #0
 800145a:	2002      	movs	r0, #2
 800145c:	f000 fcc0 	bl	8001de0 <RCC_AHB1Cmd>
}
 8001460:	e022      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <GPIO_PeriphClck+0xf8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d104      	bne.n	8001474 <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 800146a:	2100      	movs	r1, #0
 800146c:	2004      	movs	r0, #4
 800146e:	f000 fcb7 	bl	8001de0 <RCC_AHB1Cmd>
}
 8001472:	e019      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <GPIO_PeriphClck+0xfc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d104      	bne.n	8001486 <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 800147c:	2100      	movs	r1, #0
 800147e:	2008      	movs	r0, #8
 8001480:	f000 fcae 	bl	8001de0 <RCC_AHB1Cmd>
}
 8001484:	e010      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <GPIO_PeriphClck+0x100>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d104      	bne.n	8001498 <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 800148e:	2100      	movs	r1, #0
 8001490:	2010      	movs	r0, #16
 8001492:	f000 fca5 	bl	8001de0 <RCC_AHB1Cmd>
}
 8001496:	e007      	b.n	80014a8 <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <GPIO_PeriphClck+0x104>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d103      	bne.n	80014a8 <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 80014a0:	2100      	movs	r1, #0
 80014a2:	2080      	movs	r0, #128	; 0x80
 80014a4:	f000 fc9c 	bl	8001de0 <RCC_AHB1Cmd>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021c00 	.word	0x40021c00

080014c8 <GPIO_AlternateFunctionConfig>:
 * @param	alt_function: This will take in the alternate function value that the user wishes to use.
 * 			The specific alternate function values and their functions are present in the data sheet.
 * 			The inputs for this function are AF0 - AF15;
 */
void GPIO_AlternateFunctionConfig(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	73fb      	strb	r3, [r7, #15]
	uint8_t alt_function_array = pin/8;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	73bb      	strb	r3, [r7, #14]

	if(alt_function_array == 1)
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <GPIO_AlternateFunctionConfig+0x24>
	{
		pin -= 8;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	3b08      	subs	r3, #8
 80014ea:	73fb      	strb	r3, [r7, #15]
	}

	GPIO_Config->GPIO_Port->AFR[alt_function_array] &= ~(AF15 << (pin * 4));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	7bba      	ldrb	r2, [r7, #14]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	7bba      	ldrb	r2, [r7, #14]
 800150c:	4001      	ands	r1, r0
 800150e:	3208      	adds	r2, #8
 8001510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_Config->GPIO_Port->AFR[alt_function_array] |= (alt_function << (pin * 4));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	7bba      	ldrb	r2, [r7, #14]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	7bba      	ldrb	r2, [r7, #14]
 8001532:	4301      	orrs	r1, r0
 8001534:	3208      	adds	r2, #8
 8001536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIO_Config->GPIO_Port, ENABLE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2101      	movs	r1, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff2d 	bl	80013c0 <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b10      	cmp	r3, #16
 800156c:	f040 8094 	bne.w	8001698 <GPIO_Init+0x150>
	{
		if(GPIO_Config->GPIO_Port == GPIOA)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a88      	ldr	r2, [pc, #544]	; (8001798 <GPIO_Init+0x250>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d112      	bne.n	80015a0 <GPIO_Init+0x58>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8001582:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_0_Pin13_Pin14;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800158c:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 8001596:	61da      	str	r2, [r3, #28]
			temp_variable = GPIO_Config->GPIO_Port->LCKR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e074      	b.n	8001690 <GPIO_Init+0x148>
		{
			GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2103      	movs	r1, #3
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	400a      	ands	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
			GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	785b      	ldrb	r3, [r3, #1]
 80015cc:	4619      	mov	r1, r3
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]

			GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2101      	movs	r1, #1
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	4619      	mov	r1, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	400a      	ands	r2, r1
 80015f8:	605a      	str	r2, [r3, #4]
			GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	4619      	mov	r1, r3
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4619      	mov	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]

			GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2101      	movs	r1, #1
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	4619      	mov	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	400a      	ands	r2, r1
 8001630:	609a      	str	r2, [r3, #8]
			GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	4619      	mov	r1, r3
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	4619      	mov	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]

			GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2103      	movs	r1, #3
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	400a      	ands	r2, r1
 800166a:	60da      	str	r2, [r3, #12]
			GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	4619      	mov	r1, r3
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	4619      	mov	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	430a      	orrs	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	3301      	adds	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	d987      	bls.n	80015a6 <GPIO_Init+0x5e>

		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
	}

}
 8001696:	e07a      	b.n	800178e <GPIO_Init+0x246>
		if(GPIO_Config->GPIO_MODE == GPIO_AF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d104      	bne.n	80016aa <GPIO_Init+0x162>
			GPIO_AlternateFunctionConfig(GPIO_Config, alt_function);
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff0f 	bl	80014c8 <GPIO_AlternateFunctionConfig>
		GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4619      	mov	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	400a      	ands	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	789b      	ldrb	r3, [r3, #2]
 80016ce:	4619      	mov	r1, r3
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	400a      	ands	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	78db      	ldrb	r3, [r3, #3]
 8001706:	4619      	mov	r1, r3
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	4619      	mov	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2103      	movs	r1, #3
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	400a      	ands	r2, r1
 8001734:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	791b      	ldrb	r3, [r3, #4]
 8001740:	4619      	mov	r1, r3
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	4619      	mov	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	430a      	orrs	r2, r1
 8001752:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2103      	movs	r1, #3
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	785b      	ldrb	r3, [r3, #1]
 800177a:	4619      	mov	r1, r3
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	4619      	mov	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40020000 	.word	0x40020000

0800179c <SPI1_Periph_Enable>:

/*
 * @Brief SPI peripheral enabled specified for SPI1. There are 3 other functions: 1 for each SPI peripheral.
 */
void SPI1_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	6039      	str	r1, [r7, #0]
 80017a4:	4611      	mov	r1, r2
 80017a6:	461a      	mov	r2, r3
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	460b      	mov	r3, r1
 80017ae:	71bb      	strb	r3, [r7, #6]
 80017b0:	4613      	mov	r3, r2
 80017b2:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI1_Periph;

	//Check if SSM bit is disabled
	if(!ssm_enabled)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d112      	bne.n	80017e0 <SPI1_Periph_Enable+0x44>
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI1_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80017ba:	79ba      	ldrb	r2, [r7, #6]
 80017bc:	f107 000c 	add.w	r0, r7, #12
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2300      	movs	r3, #0
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	2300      	movs	r3, #0
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2302      	movs	r3, #2
 80017ce:	494d      	ldr	r1, [pc, #308]	; (8001904 <SPI1_Periph_Enable+0x168>)
 80017d0:	f7ff fdd1 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2105      	movs	r1, #5
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff feb4 	bl	8001548 <GPIO_Init>
		GPIO_Config(&SPI1_Periph, GPIOA, Pin9, GPIO_Output, GPIO_PushPull, GPIO_HighSpeed, GPIO_PullUp);
		GPIO_Init(&SPI1_Periph, 0x0);
	}*/

	//Configure the SPI clock pin
	switch(clk_pin){
 80017e0:	797b      	ldrb	r3, [r7, #5]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d015      	beq.n	8001812 <SPI1_Periph_Enable+0x76>
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d127      	bne.n	800183a <SPI1_Periph_Enable+0x9e>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOA, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80017ea:	797a      	ldrb	r2, [r7, #5]
 80017ec:	f107 000c 	add.w	r0, r7, #12
 80017f0:	2300      	movs	r3, #0
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	2300      	movs	r3, #0
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2300      	movs	r3, #0
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2302      	movs	r3, #2
 80017fe:	4941      	ldr	r1, [pc, #260]	; (8001904 <SPI1_Periph_Enable+0x168>)
 8001800:	f7ff fdb9 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2105      	movs	r1, #5
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fe9c 	bl	8001548 <GPIO_Init>
		break;
 8001810:	e013      	b.n	800183a <SPI1_Periph_Enable+0x9e>
	case 3:
		GPIO_Config(&SPI1_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001812:	797a      	ldrb	r2, [r7, #5]
 8001814:	f107 000c 	add.w	r0, r7, #12
 8001818:	2300      	movs	r3, #0
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	2300      	movs	r3, #0
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	2300      	movs	r3, #0
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2302      	movs	r3, #2
 8001826:	4938      	ldr	r1, [pc, #224]	; (8001908 <SPI1_Periph_Enable+0x16c>)
 8001828:	f7ff fda5 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2105      	movs	r1, #5
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fe88 	bl	8001548 <GPIO_Init>
		break;
 8001838:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 800183a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800183e:	2b04      	cmp	r3, #4
 8001840:	d016      	beq.n	8001870 <SPI1_Periph_Enable+0xd4>
 8001842:	2b06      	cmp	r3, #6
 8001844:	d129      	bne.n	800189a <SPI1_Periph_Enable+0xfe>
	case 6:
		GPIO_Config(&SPI1_Periph, GPIOA, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001846:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800184a:	f107 000c 	add.w	r0, r7, #12
 800184e:	2300      	movs	r3, #0
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	2300      	movs	r3, #0
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	2300      	movs	r3, #0
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2302      	movs	r3, #2
 800185c:	4929      	ldr	r1, [pc, #164]	; (8001904 <SPI1_Periph_Enable+0x168>)
 800185e:	f7ff fd8a 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2105      	movs	r1, #5
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fe6d 	bl	8001548 <GPIO_Init>
		break;
 800186e:	e014      	b.n	800189a <SPI1_Periph_Enable+0xfe>
	case 4:
		GPIO_Config(&SPI1_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001870:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001874:	f107 000c 	add.w	r0, r7, #12
 8001878:	2300      	movs	r3, #0
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2300      	movs	r3, #0
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2302      	movs	r3, #2
 8001886:	4920      	ldr	r1, [pc, #128]	; (8001908 <SPI1_Periph_Enable+0x16c>)
 8001888:	f7ff fd75 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2105      	movs	r1, #5
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fe58 	bl	8001548 <GPIO_Init>
		break;
 8001898:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 800189a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d016      	beq.n	80018d0 <SPI1_Periph_Enable+0x134>
 80018a2:	2b07      	cmp	r3, #7
 80018a4:	d129      	bne.n	80018fa <SPI1_Periph_Enable+0x15e>
	case 7:
		GPIO_Config(&SPI1_Periph, GPIOA, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80018a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018aa:	f107 000c 	add.w	r0, r7, #12
 80018ae:	2300      	movs	r3, #0
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	2300      	movs	r3, #0
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2302      	movs	r3, #2
 80018bc:	4911      	ldr	r1, [pc, #68]	; (8001904 <SPI1_Periph_Enable+0x168>)
 80018be:	f7ff fd5a 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	2105      	movs	r1, #5
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fe3d 	bl	8001548 <GPIO_Init>
		break;
 80018ce:	e014      	b.n	80018fa <SPI1_Periph_Enable+0x15e>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80018d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018d4:	f107 000c 	add.w	r0, r7, #12
 80018d8:	2300      	movs	r3, #0
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2300      	movs	r3, #0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2300      	movs	r3, #0
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2302      	movs	r3, #2
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <SPI1_Periph_Enable+0x16c>)
 80018e8:	f7ff fd45 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2105      	movs	r1, #5
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe28 	bl	8001548 <GPIO_Init>
		break;
 80018f8:	bf00      	nop
	}
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400

0800190c <SPI2_Periph_Enable>:

void SPI2_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af04      	add	r7, sp, #16
 8001912:	6039      	str	r1, [r7, #0]
 8001914:	4611      	mov	r1, r2
 8001916:	461a      	mov	r2, r3
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	460b      	mov	r3, r1
 800191e:	71bb      	strb	r3, [r7, #6]
 8001920:	4613      	mov	r3, r2
 8001922:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI2_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d013      	beq.n	8001952 <SPI2_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI2_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 800192a:	79ba      	ldrb	r2, [r7, #6]
 800192c:	f107 000c 	add.w	r0, r7, #12
 8001930:	2301      	movs	r3, #1
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2300      	movs	r3, #0
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	2300      	movs	r3, #0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	f7ff fd19 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, 0x00);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fdfc 	bl	8001548 <GPIO_Init>
 8001950:	e012      	b.n	8001978 <SPI2_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI2_Periph, GPIOB, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001952:	79ba      	ldrb	r2, [r7, #6]
 8001954:	f107 000c 	add.w	r0, r7, #12
 8001958:	2300      	movs	r3, #0
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	2300      	movs	r3, #0
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2302      	movs	r3, #2
 8001966:	494d      	ldr	r1, [pc, #308]	; (8001a9c <SPI2_Periph_Enable+0x190>)
 8001968:	f7ff fd05 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2105      	movs	r1, #5
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fde8 	bl	8001548 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8001978:	797b      	ldrb	r3, [r7, #5]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d113      	bne.n	80019a6 <SPI2_Periph_Enable+0x9a>
	case 3:
		GPIO_Config(&SPI2_Periph, GPIOD, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800197e:	797a      	ldrb	r2, [r7, #5]
 8001980:	f107 000c 	add.w	r0, r7, #12
 8001984:	2300      	movs	r3, #0
 8001986:	9302      	str	r3, [sp, #8]
 8001988:	2300      	movs	r3, #0
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2300      	movs	r3, #0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2302      	movs	r3, #2
 8001992:	4943      	ldr	r1, [pc, #268]	; (8001aa0 <SPI2_Periph_Enable+0x194>)
 8001994:	f7ff fcef 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2105      	movs	r1, #5
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fdd2 	bl	8001548 <GPIO_Init>
		break;
 80019a4:	e013      	b.n	80019ce <SPI2_Periph_Enable+0xc2>
	default:
		GPIO_Config(&SPI2_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80019a6:	797a      	ldrb	r2, [r7, #5]
 80019a8:	f107 000c 	add.w	r0, r7, #12
 80019ac:	2300      	movs	r3, #0
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2300      	movs	r3, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2302      	movs	r3, #2
 80019ba:	4938      	ldr	r1, [pc, #224]	; (8001a9c <SPI2_Periph_Enable+0x190>)
 80019bc:	f7ff fcdb 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2105      	movs	r1, #5
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fdbe 	bl	8001548 <GPIO_Init>
		break;
 80019cc:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 80019ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d002      	beq.n	80019dc <SPI2_Periph_Enable+0xd0>
 80019d6:	2b0e      	cmp	r3, #14
 80019d8:	d015      	beq.n	8001a06 <SPI2_Periph_Enable+0xfa>
 80019da:	e029      	b.n	8001a30 <SPI2_Periph_Enable+0x124>
	case 2:
		GPIO_Config(&SPI2_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80019dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019e0:	f107 000c 	add.w	r0, r7, #12
 80019e4:	2300      	movs	r3, #0
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	2300      	movs	r3, #0
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	2300      	movs	r3, #0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2302      	movs	r3, #2
 80019f2:	492c      	ldr	r1, [pc, #176]	; (8001aa4 <SPI2_Periph_Enable+0x198>)
 80019f4:	f7ff fcbf 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2105      	movs	r1, #5
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fda2 	bl	8001548 <GPIO_Init>
		break;
 8001a04:	e014      	b.n	8001a30 <SPI2_Periph_Enable+0x124>
	case 14:
		GPIO_Config(&SPI2_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001a06:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a0a:	f107 000c 	add.w	r0, r7, #12
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	2300      	movs	r3, #0
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2300      	movs	r3, #0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	491f      	ldr	r1, [pc, #124]	; (8001a9c <SPI2_Periph_Enable+0x190>)
 8001a1e:	f7ff fcaa 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	2105      	movs	r1, #5
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fd8d 	bl	8001548 <GPIO_Init>
		break;
 8001a2e:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8001a30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d002      	beq.n	8001a3e <SPI2_Periph_Enable+0x132>
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d015      	beq.n	8001a68 <SPI2_Periph_Enable+0x15c>
	case 15:
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI2_Periph, AF5);
		break;
	}
}
 8001a3c:	e029      	b.n	8001a92 <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001a3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a42:	f107 000c 	add.w	r0, r7, #12
 8001a46:	2300      	movs	r3, #0
 8001a48:	9302      	str	r3, [sp, #8]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2302      	movs	r3, #2
 8001a54:	4913      	ldr	r1, [pc, #76]	; (8001aa4 <SPI2_Periph_Enable+0x198>)
 8001a56:	f7ff fc8e 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	2105      	movs	r1, #5
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fd71 	bl	8001548 <GPIO_Init>
		break;
 8001a66:	e014      	b.n	8001a92 <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001a68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a6c:	f107 000c 	add.w	r0, r7, #12
 8001a70:	2300      	movs	r3, #0
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2300      	movs	r3, #0
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	4907      	ldr	r1, [pc, #28]	; (8001a9c <SPI2_Periph_Enable+0x190>)
 8001a80:	f7ff fc79 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2105      	movs	r1, #5
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fd5c 	bl	8001548 <GPIO_Init>
		break;
 8001a90:	bf00      	nop
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40020800 	.word	0x40020800

08001aa8 <SPI3_Periph_Enable>:

void SPI3_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af04      	add	r7, sp, #16
 8001aae:	6039      	str	r1, [r7, #0]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	71bb      	strb	r3, [r7, #6]
 8001abc:	4613      	mov	r3, r2
 8001abe:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI3_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d013      	beq.n	8001aee <SPI3_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI3_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8001ac6:	79ba      	ldrb	r2, [r7, #6]
 8001ac8:	f107 000c 	add.w	r0, r7, #12
 8001acc:	2301      	movs	r3, #1
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	6839      	ldr	r1, [r7, #0]
 8001adc:	f7ff fc4b 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, 0x00);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fd2e 	bl	8001548 <GPIO_Init>
 8001aec:	e012      	b.n	8001b14 <SPI3_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI3_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001aee:	79ba      	ldrb	r2, [r7, #6]
 8001af0:	f107 000c 	add.w	r0, r7, #12
 8001af4:	2300      	movs	r3, #0
 8001af6:	9302      	str	r3, [sp, #8]
 8001af8:	2300      	movs	r3, #0
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2302      	movs	r3, #2
 8001b02:	495a      	ldr	r1, [pc, #360]	; (8001c6c <SPI3_Periph_Enable+0x1c4>)
 8001b04:	f7ff fc37 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2106      	movs	r1, #6
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fd1a 	bl	8001548 <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8001b14:	797b      	ldrb	r3, [r7, #5]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d015      	beq.n	8001b46 <SPI3_Periph_Enable+0x9e>
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	d127      	bne.n	8001b6e <SPI3_Periph_Enable+0xc6>
	case 10:
		GPIO_Config(&SPI3_Periph, GPIOC, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001b1e:	797a      	ldrb	r2, [r7, #5]
 8001b20:	f107 000c 	add.w	r0, r7, #12
 8001b24:	2300      	movs	r3, #0
 8001b26:	9302      	str	r3, [sp, #8]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2302      	movs	r3, #2
 8001b32:	494f      	ldr	r1, [pc, #316]	; (8001c70 <SPI3_Periph_Enable+0x1c8>)
 8001b34:	f7ff fc1f 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2106      	movs	r1, #6
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fd02 	bl	8001548 <GPIO_Init>
		break;
 8001b44:	e013      	b.n	8001b6e <SPI3_Periph_Enable+0xc6>
	case 3:
		GPIO_Config(&SPI3_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001b46:	797a      	ldrb	r2, [r7, #5]
 8001b48:	f107 000c 	add.w	r0, r7, #12
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	4946      	ldr	r1, [pc, #280]	; (8001c74 <SPI3_Periph_Enable+0x1cc>)
 8001b5c:	f7ff fc0b 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2106      	movs	r1, #6
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fcee 	bl	8001548 <GPIO_Init>
		break;
 8001b6c:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8001b6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d016      	beq.n	8001ba4 <SPI3_Periph_Enable+0xfc>
 8001b76:	2b0b      	cmp	r3, #11
 8001b78:	d129      	bne.n	8001bce <SPI3_Periph_Enable+0x126>
	case 11:
		GPIO_Config(&SPI3_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001b7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b7e:	f107 000c 	add.w	r0, r7, #12
 8001b82:	2300      	movs	r3, #0
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	4937      	ldr	r1, [pc, #220]	; (8001c70 <SPI3_Periph_Enable+0x1c8>)
 8001b92:	f7ff fbf0 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2106      	movs	r1, #6
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fcd3 	bl	8001548 <GPIO_Init>
		break;
 8001ba2:	e014      	b.n	8001bce <SPI3_Periph_Enable+0x126>
	case 4:
		GPIO_Config(&SPI3_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001ba4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ba8:	f107 000c 	add.w	r0, r7, #12
 8001bac:	2300      	movs	r3, #0
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	492e      	ldr	r1, [pc, #184]	; (8001c74 <SPI3_Periph_Enable+0x1cc>)
 8001bbc:	f7ff fbdb 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2106      	movs	r1, #6
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fcbe 	bl	8001548 <GPIO_Init>
		break;
 8001bcc:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8001bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d006      	beq.n	8001be4 <SPI3_Periph_Enable+0x13c>
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	dc43      	bgt.n	8001c62 <SPI3_Periph_Enable+0x1ba>
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d017      	beq.n	8001c0e <SPI3_Periph_Enable+0x166>
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d02a      	beq.n	8001c38 <SPI3_Periph_Enable+0x190>
		break;
	case 6:
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI3_Periph, AF5);
	}
}
 8001be2:	e03e      	b.n	8001c62 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001be4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001be8:	f107 000c 	add.w	r0, r7, #12
 8001bec:	2300      	movs	r3, #0
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	491d      	ldr	r1, [pc, #116]	; (8001c70 <SPI3_Periph_Enable+0x1c8>)
 8001bfc:	f7ff fbbb 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	2106      	movs	r1, #6
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fc9e 	bl	8001548 <GPIO_Init>
		break;
 8001c0c:	e029      	b.n	8001c62 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001c0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c12:	f107 000c 	add.w	r0, r7, #12
 8001c16:	2300      	movs	r3, #0
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2302      	movs	r3, #2
 8001c24:	4913      	ldr	r1, [pc, #76]	; (8001c74 <SPI3_Periph_Enable+0x1cc>)
 8001c26:	f7ff fba6 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2106      	movs	r1, #6
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fc89 	bl	8001548 <GPIO_Init>
		break;
 8001c36:	e014      	b.n	8001c62 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001c38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c3c:	f107 000c 	add.w	r0, r7, #12
 8001c40:	2300      	movs	r3, #0
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	490a      	ldr	r1, [pc, #40]	; (8001c78 <SPI3_Periph_Enable+0x1d0>)
 8001c50:	f7ff fb91 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF5);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2105      	movs	r1, #5
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fc74 	bl	8001548 <GPIO_Init>
}
 8001c60:	e7ff      	b.n	8001c62 <SPI3_Periph_Enable+0x1ba>
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020c00 	.word	0x40020c00

08001c7c <SPI4_Periph_Enable>:

void SPI4_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af04      	add	r7, sp, #16
 8001c82:	6039      	str	r1, [r7, #0]
 8001c84:	4611      	mov	r1, r2
 8001c86:	461a      	mov	r2, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	71bb      	strb	r3, [r7, #6]
 8001c90:	4613      	mov	r3, r2
 8001c92:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI4_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d013      	beq.n	8001cc2 <SPI4_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI4_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8001c9a:	79ba      	ldrb	r2, [r7, #6]
 8001c9c:	f107 000c 	add.w	r0, r7, #12
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	f7ff fb61 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI4_Periph, 0x00);
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fc44 	bl	8001548 <GPIO_Init>
 8001cc0:	e012      	b.n	8001ce8 <SPI4_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI4_Periph, GPIOE, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001cc2:	79ba      	ldrb	r2, [r7, #6]
 8001cc4:	f107 000c 	add.w	r0, r7, #12
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9302      	str	r3, [sp, #8]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	4924      	ldr	r1, [pc, #144]	; (8001d68 <SPI4_Periph_Enable+0xec>)
 8001cd8:	f7ff fb4d 	bl	8001376 <GPIO_Config>
		GPIO_Init(&SPI4_Periph, AF5);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fc30 	bl	8001548 <GPIO_Init>
	}

	//Configure the SPI clock pin
	GPIO_Config(&SPI4_Periph, GPIOE, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001ce8:	797a      	ldrb	r2, [r7, #5]
 8001cea:	f107 000c 	add.w	r0, r7, #12
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	491a      	ldr	r1, [pc, #104]	; (8001d68 <SPI4_Periph_Enable+0xec>)
 8001cfe:	f7ff fb3a 	bl	8001376 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	2105      	movs	r1, #5
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fc1d 	bl	8001548 <GPIO_Init>

	//Configure MISO Pin
	GPIO_Config(&SPI4_Periph, GPIOE, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001d0e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d12:	f107 000c 	add.w	r0, r7, #12
 8001d16:	2300      	movs	r3, #0
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2302      	movs	r3, #2
 8001d24:	4910      	ldr	r1, [pc, #64]	; (8001d68 <SPI4_Periph_Enable+0xec>)
 8001d26:	f7ff fb26 	bl	8001376 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2105      	movs	r1, #5
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fc09 	bl	8001548 <GPIO_Init>

	//Configure MOSI pin
	GPIO_Config(&SPI4_Periph, GPIOE, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001d36:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d3a:	f107 000c 	add.w	r0, r7, #12
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	4906      	ldr	r1, [pc, #24]	; (8001d68 <SPI4_Periph_Enable+0xec>)
 8001d4e:	f7ff fb12 	bl	8001376 <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2105      	movs	r1, #5
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fbf5 	bl	8001548 <GPIO_Init>

}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000

08001d6c <GPIO_WritePin>:
 *			GPIO_Reset		or		0x2
 *			GPIO_Toggle		or		0x3
 */

void GPIO_WritePin(GPIO_Config_t *GPIO_Config, uint8_t State)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	73fb      	strb	r3, [r7, #15]

	if(State == GPIO_Write)
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d10a      	bne.n	8001d9a <GPIO_WritePin+0x2e>
	{
		GPIO_Config->GPIO_Port->ODR |= (0x1UL << pin);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	6959      	ldr	r1, [r3, #20]
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	615a      	str	r2, [r3, #20]
	else if(State == GPIO_Toggle)
	{
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
	}

}
 8001d98:	e01c      	b.n	8001dd4 <GPIO_WritePin+0x68>
	else if(State == GPIO_Reset)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d10c      	bne.n	8001dba <GPIO_WritePin+0x4e>
		GPIO_Config->GPIO_Port->ODR &= ~(0x1UL << pin);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	6959      	ldr	r1, [r3, #20]
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2201      	movs	r2, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	400a      	ands	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]
}
 8001db8:	e00c      	b.n	8001dd4 <GPIO_WritePin+0x68>
	else if(State == GPIO_Toggle)
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d109      	bne.n	8001dd4 <GPIO_WritePin+0x68>
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	6959      	ldr	r1, [r3, #20]
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	404a      	eors	r2, r1
 8001dd2:	615a      	str	r2, [r3, #20]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d106      	bne.n	8001e00 <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <RCC_AHB1Cmd+0x3c>)
 8001df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df6:	4909      	ldr	r1, [pc, #36]	; (8001e1c <RCC_AHB1Cmd+0x3c>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 8001dfe:	e006      	b.n	8001e0e <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <RCC_AHB1Cmd+0x3c>)
 8001e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4904      	ldr	r1, [pc, #16]	; (8001e1c <RCC_AHB1Cmd+0x3c>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <RCC_APB1Cmd>:
 * @param	APB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB1Cmd(uint32_t APB1_Periph, FunctionalState State)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d106      	bne.n	8001e40 <RCC_APB1Cmd+0x20>
	{
		RCC->APB1ENR |= APB1_Periph;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <RCC_APB1Cmd+0x3c>)
 8001e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e36:	4909      	ldr	r1, [pc, #36]	; (8001e5c <RCC_APB1Cmd+0x3c>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	640b      	str	r3, [r1, #64]	; 0x40

	else
	{
		RCC->APB1ENR &= ~APB1_Periph;
	}
}
 8001e3e:	e006      	b.n	8001e4e <RCC_APB1Cmd+0x2e>
		RCC->APB1ENR &= ~APB1_Periph;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <RCC_APB1Cmd+0x3c>)
 8001e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	4904      	ldr	r1, [pc, #16]	; (8001e5c <RCC_APB1Cmd+0x3c>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <RCC_APB2Cmd>:
 * @param	APB2_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB2Cmd(uint32_t APB2_Periph, FunctionalState State)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d106      	bne.n	8001e80 <RCC_APB2Cmd+0x20>
	{
		RCC->APB2ENR |= APB2_Periph;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <RCC_APB2Cmd+0x3c>)
 8001e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e76:	4909      	ldr	r1, [pc, #36]	; (8001e9c <RCC_APB2Cmd+0x3c>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	644b      	str	r3, [r1, #68]	; 0x44

	else
	{
		RCC->APB2ENR &= ~APB2_Periph;
	}
}
 8001e7e:	e006      	b.n	8001e8e <RCC_APB2Cmd+0x2e>
		RCC->APB2ENR &= ~APB2_Periph;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <RCC_APB2Cmd+0x3c>)
 8001e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	4904      	ldr	r1, [pc, #16]	; (8001e9c <RCC_APB2Cmd+0x3c>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <RCC_GetClockFreq>:
 *
 * @param	ClockSource: Points to the ClockSource data structure which contains the varibales to hold
 * 			the frequencies of the SYSCLCK, HCLCK, PCLCK1, PCLCK2.
 */
void RCC_GetClockFreq(RCC_ClockFrequency_t *ClockSource)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b08b      	sub	sp, #44	; 0x2c
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	uint32_t pll_Value = 0, plln = 0, pllm = 2, pllp = 2, pll_src = 0, pll_fvco = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]

	uint32_t temp_variable, prescaler;

	/*Determine the clock source for the SYSCLCK*/
	if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x0)
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <RCC_GetClockFreq+0x36>
	{
		ClockSource->SYSCLCK = HSI_Value;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a40      	ldr	r2, [pc, #256]	; (8001fd4 <RCC_GetClockFreq+0x134>)
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e03f      	b.n	8001f56 <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x1)
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d103      	bne.n	8001eec <RCC_GetClockFreq+0x4c>
	{
		ClockSource->SYSCLCK = HSE_Value;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3c      	ldr	r2, [pc, #240]	; (8001fd8 <RCC_GetClockFreq+0x138>)
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e034      	b.n	8001f56 <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x2)
 8001eec:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d12d      	bne.n	8001f56 <RCC_GetClockFreq+0xb6>
	{
		/*Determine the input source of the PLL*/
		if(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_Mask)
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <RCC_GetClockFreq+0x6c>
		{
			pll_src = HSE_Value;
 8001f06:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <RCC_GetClockFreq+0x138>)
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0a:	e001      	b.n	8001f10 <RCC_GetClockFreq+0x70>
		}

		else
		{
			pll_src = HSI_Value;
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <RCC_GetClockFreq+0x134>)
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Mask) >> 6);
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1a:	61fb      	str	r3, [r7, #28]
		pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Mask);
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f24:	61bb      	str	r3, [r7, #24]
		pll_fvco = (pll_src/pllm) * plln;
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	613b      	str	r3, [r7, #16]
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP_Mask) >> 16) * 2) + 2);
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	3301      	adds	r3, #1
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
		pll_Value = pll_fvco/pllp;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	623b      	str	r3, [r7, #32]

		ClockSource->SYSCLCK = pll_Value;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a3a      	ldr	r2, [r7, #32]
 8001f54:	601a      	str	r2, [r3, #0]
	}

	/*Determine the frequency of the HCLCK*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_HPRE_Mask) >> 4);
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <RCC_GetClockFreq+0x13c>)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	60bb      	str	r3, [r7, #8]
	ClockSource->HCLCK = (ClockSource->SYSCLCK) >> prescaler;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	40da      	lsrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	605a      	str	r2, [r3, #4]

	/*Determine the frequency of the PCLCK1*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE1_Mask) >> 10);
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <RCC_GetClockFreq+0x13c>)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK1 = (ClockSource->HCLCK) >> prescaler;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	40da      	lsrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]

	/*Determine frequency of PCLCK2*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE2_Mask) >> 13);
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <RCC_GetClockFreq+0x130>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0b5b      	lsrs	r3, r3, #13
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <RCC_GetClockFreq+0x13c>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK2 = (ClockSource->HCLCK) >> prescaler;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	40da      	lsrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60da      	str	r2, [r3, #12]

}
 8001fc2:	bf00      	nop
 8001fc4:	372c      	adds	r7, #44	; 0x2c
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200
 8001fdc:	2000004c 	.word	0x2000004c

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <Check_Flag>:
 * brief	A helper function that keeps track of specific flags in the status register.
 *
 * @retval	Returns status of the flag which is defined in an enumeration.
 */
static Flag_Status Check_Flag(SPI_Handle_t *SPI_Handle, uint32_t flag)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	if(SPI_Handle->SPIx->SR & flag)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <Check_Flag+0x1c>
	{
		return Flag_Set;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <Check_Flag+0x1e>
	}

	else
	{
		return Flag_Unset;
 8002038:	2300      	movs	r3, #0
	}

}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SPI_Init>:
/*
 * @Brief	SPI initialization function that sets all the configurations such as clock phase, polarity, data frame,
 * 			data format and more.
 */
void SPI_Init(SPI_Handle_t *SPI_Handle)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b087      	sub	sp, #28
 800204c:	af02      	add	r7, sp, #8
 800204e:	6078      	str	r0, [r7, #4]
	uint8_t cs_pin, clk_pin, mosi_pin, miso_pin;
	cs_pin = SPI_Handle->SPI_Config.pin_cs;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	73fb      	strb	r3, [r7, #15]
	clk_pin = SPI_Handle->SPI_Config.pin_clk;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	795b      	ldrb	r3, [r3, #5]
 800205a:	73bb      	strb	r3, [r7, #14]
	mosi_pin = SPI_Handle->SPI_Config.pin_mosi;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	799b      	ldrb	r3, [r3, #6]
 8002060:	737b      	strb	r3, [r7, #13]
	miso_pin = SPI_Handle->SPI_Config.pin_miso;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	79db      	ldrb	r3, [r3, #7]
 8002066:	733b      	strb	r3, [r7, #12]
	/*
	 * Set the specified pins based on which SPI peripheral is chosen and whether or not the SSM bit is enabled or
	 * disabled. These functions are called from the "stm32f401_gpio.h" file, and are defined in the stm32f401_gpio.c file.
	 * This also enables clock access to the specified SPI peripheral using functions from the stm32f401_rcc file.
	 */
	if(SPI_Handle->SPIx == SPI1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a5f      	ldr	r2, [pc, #380]	; (80021ec <SPI_Init+0x1a4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d112      	bne.n	8002098 <SPI_Init+0x50>
	{
		SPI1_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7c58      	ldrb	r0, [r3, #17]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6899      	ldr	r1, [r3, #8]
 800207a:	7bbc      	ldrb	r4, [r7, #14]
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	7b3b      	ldrb	r3, [r7, #12]
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	7b7b      	ldrb	r3, [r7, #13]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4623      	mov	r3, r4
 8002088:	f7ff fb88 	bl	800179c <SPI1_Periph_Enable>
		RCC_APB2Cmd(SPI1_Enable, ENABLE);
 800208c:	2101      	movs	r1, #1
 800208e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002092:	f7ff fee5 	bl	8001e60 <RCC_APB2Cmd>
 8002096:	e041      	b.n	800211c <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a54      	ldr	r2, [pc, #336]	; (80021f0 <SPI_Init+0x1a8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d112      	bne.n	80020c8 <SPI_Init+0x80>
	{
		SPI2_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7c58      	ldrb	r0, [r3, #17]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	7bbc      	ldrb	r4, [r7, #14]
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	7b3b      	ldrb	r3, [r7, #12]
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4623      	mov	r3, r4
 80020b8:	f7ff fc28 	bl	800190c <SPI2_Periph_Enable>
		RCC_APB1Cmd(SPI2_Enable, ENABLE);
 80020bc:	2101      	movs	r1, #1
 80020be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020c2:	f7ff fead 	bl	8001e20 <RCC_APB1Cmd>
 80020c6:	e029      	b.n	800211c <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a49      	ldr	r2, [pc, #292]	; (80021f4 <SPI_Init+0x1ac>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d112      	bne.n	80020f8 <SPI_Init+0xb0>
	{
		SPI3_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7c58      	ldrb	r0, [r3, #17]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	7bbc      	ldrb	r4, [r7, #14]
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	7b3b      	ldrb	r3, [r7, #12]
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	7b7b      	ldrb	r3, [r7, #13]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	4623      	mov	r3, r4
 80020e8:	f7ff fcde 	bl	8001aa8 <SPI3_Periph_Enable>
		RCC_APB1Cmd(SPI3_Enable, ENABLE);
 80020ec:	2101      	movs	r1, #1
 80020ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020f2:	f7ff fe95 	bl	8001e20 <RCC_APB1Cmd>
 80020f6:	e011      	b.n	800211c <SPI_Init+0xd4>
	}
	else
	{
		SPI4_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7c58      	ldrb	r0, [r3, #17]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	7bbc      	ldrb	r4, [r7, #14]
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	7b3b      	ldrb	r3, [r7, #12]
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	7b7b      	ldrb	r3, [r7, #13]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	4623      	mov	r3, r4
 800210e:	f7ff fdb5 	bl	8001c7c <SPI4_Periph_Enable>
		RCC_APB2Cmd(SPI4_Enable, ENABLE);
 8002112:	2101      	movs	r1, #1
 8002114:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002118:	f7ff fea2 	bl	8001e60 <RCC_APB2Cmd>
	}

	//Set BaudRate control
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.baudrate_ctrl) << CR1_BR_Pos);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7b1b      	ldrb	r3, [r3, #12]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4619      	mov	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

	//Set CPOL and CHPA
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpha);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7b9b      	ldrb	r3, [r3, #14]
 800213c:	4619      	mov	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpol);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7b5b      	ldrb	r3, [r3, #13]
 8002150:	4619      	mov	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

	//Set Data format to either LSB or MSB first
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.data_format);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7bdb      	ldrb	r3, [r3, #15]
 8002164:	4619      	mov	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

	//Set mode to master
	SPI_Handle->SPIx->CR1 |= CR1_MSTR_Enable;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0204 	orr.w	r2, r2, #4
 800217c:	601a      	str	r2, [r3, #0]

	//Set 8 bit
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->data_frame) << CR1_DFF_Pos);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7c1b      	ldrb	r3, [r3, #16]
 8002188:	02db      	lsls	r3, r3, #11
 800218a:	4619      	mov	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
	 * If SSM is not enabled, then SSOE (slave select output enabled) is used which uses the NSS pin as the CS and
	 * it automatically handled by the MCU. When this mode is selected, as soon as the SPI is enabled in master mode, the
	 * CS will go low and will only go high when SPI is disabled. This is why if SSM is enabled, the SPI is enabled also but
	 * if SSOE is enabled it is not enabled in the Init function.
	 */
	if(SPI_Handle->ssm)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7c5b      	ldrb	r3, [r3, #17]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01b      	beq.n	80021d4 <SPI_Init+0x18c>
	{
		//Set SSM and SSI high
		SPI_Handle->SPIx->CR1 |= ((SPI_Handle->ssm) << CR1_SSM_Pos);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7c5b      	ldrb	r3, [r3, #17]
 80021a6:	025b      	lsls	r3, r3, #9
 80021a8:	4619      	mov	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
		SPI_Handle->SPIx->CR1 |= CR1_SSI_Enable;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c0:	601a      	str	r2, [r3, #0]
		//Enable SPI periph
		SPI_Handle->SPIx->CR1 |= CR1_SPE_Enable;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d0:	601a      	str	r2, [r3, #0]
	{
		//Set SSOE high
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
	}

}
 80021d2:	e007      	b.n	80021e4 <SPI_Init+0x19c>
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0204 	orr.w	r2, r2, #4
 80021e2:	605a      	str	r2, [r3, #4]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	40013000 	.word	0x40013000
 80021f0:	40003800 	.word	0x40003800
 80021f4:	40003c00 	.word	0x40003c00

080021f8 <Enable_NVIC>:

/*
 * @brief	Support function used to enable the NVIC interrupts
 */
static void Enable_NVIC(SPI_Handle_t *SPI_Handle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	if(SPI_Handle->SPIx == SPI1){
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <Enable_NVIC+0x4c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d103      	bne.n	8002212 <Enable_NVIC+0x1a>
		NVIC_EnableIRQ(SPI1_IRQn);
 800220a:	2023      	movs	r0, #35	; 0x23
 800220c:	f7ff fee8 	bl	8001fe0 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(SPI3_IRQn);
	}
	else{
		NVIC_EnableIRQ(SPI4_IRQn);
	}
}
 8002210:	e014      	b.n	800223c <Enable_NVIC+0x44>
	else if(SPI_Handle->SPIx == SPI2){
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <Enable_NVIC+0x50>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d103      	bne.n	8002224 <Enable_NVIC+0x2c>
		NVIC_EnableIRQ(SPI2_IRQn);
 800221c:	2024      	movs	r0, #36	; 0x24
 800221e:	f7ff fedf 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 8002222:	e00b      	b.n	800223c <Enable_NVIC+0x44>
	else if(SPI_Handle->SPIx == SPI3){
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <Enable_NVIC+0x54>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d103      	bne.n	8002236 <Enable_NVIC+0x3e>
		NVIC_EnableIRQ(SPI3_IRQn);
 800222e:	2033      	movs	r0, #51	; 0x33
 8002230:	f7ff fed6 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 8002234:	e002      	b.n	800223c <Enable_NVIC+0x44>
		NVIC_EnableIRQ(SPI4_IRQn);
 8002236:	2054      	movs	r0, #84	; 0x54
 8002238:	f7ff fed2 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40013000 	.word	0x40013000
 8002248:	40003800 	.word	0x40003800
 800224c:	40003c00 	.word	0x40003c00

08002250 <Disable_SPI_Transmission>:
/*
 * @brief	Support function used to disable interrupt transmission only when SSOE
 * is being used.
 */
static void Disable_SPI_Transmission(SPI_Handle_t *SPI_Handle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	/*Temporary variable to clear the overrun flag - the overrun flag is cleared
	 * by reading the DR followed by the SR.
	 */
	uint32_t clear_overrun;

	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 8002258:	bf00      	nop
 800225a:	2102      	movs	r1, #2
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fedd 	bl	800201c <Check_Flag>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f8      	beq.n	800225a <Disable_SPI_Transmission+0xa>
	//Disable TXEIE bit in CR2
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002276:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 8002278:	bf00      	nop
 800227a:	2180      	movs	r1, #128	; 0x80
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fecd 	bl	800201c <Check_Flag>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f8      	bne.n	800227a <Disable_SPI_Transmission+0x2a>

	//Clear overrun flag
	clear_overrun = SPI_Handle->SPIx->DR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	60fb      	str	r3, [r7, #12]
	clear_overrun = SPI_Handle->SPIx->SR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	60fb      	str	r3, [r7, #12]

	//Disable SPI periph
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]

	//Reset bus state back to SPI_Ready to allow another communication to begin.
	SPI_Handle->bus_state = SPI_Ready;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	765a      	strb	r2, [r3, #25]
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <Disable_SPI_Reception>:

/*
 * @brief	Support function used to disable SPI reception when using interrupts with SSOE.
 */
static void Disable_SPI_Reception(SPI_Handle_t *SPI_Handle)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 80022be:	bf00      	nop
 80022c0:	2102      	movs	r1, #2
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff feaa 	bl	800201c <Check_Flag>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f8      	beq.n	80022c0 <Disable_SPI_Reception+0xa>

	//Disable TXEIE and RXNEIE bit
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022dc:	605a      	str	r2, [r3, #4]
	SPI_Handle->SPIx->CR2 &= ~CR2_RXNEIE_Enable;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ec:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 80022ee:	bf00      	nop
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fe92 	bl	800201c <Check_Flag>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f8      	bne.n	80022f0 <Disable_SPI_Reception+0x3a>

	//Disable SPI periph
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800230c:	601a      	str	r2, [r3, #0]

	//Set the SPI bus state back to SPI_Ready to allow for another seperate SPI transmission
	SPI_Handle->bus_state = SPI_Ready;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	765a      	strb	r2, [r3, #25]
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <TXE_Interrupt_Handler>:
 * @brief	Support function to transmit data when an interrupt is generated by the TXE flag.
 *
 * @note	This function is called directly from the interrupt service routine.
 */
static void TXE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	//Check if the bus state is currently in SPI_Transmitting
	if(SPI_Handle->bus_state == SPI_Transmitting)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7e5b      	ldrb	r3, [r3, #25]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d153      	bne.n	80023d4 <TXE_Interrupt_Handler+0xb8>
	{
		//16 bit data mode
		if(SPI_Handle->data_frame == Data_16_Bits)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7c1b      	ldrb	r3, [r3, #16]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d11e      	bne.n	8002372 <TXE_Interrupt_Handler+0x56>
		{
			if(SPI_Handle->tx_length)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e1b      	ldrb	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <TXE_Interrupt_Handler+0x3e>
			{
				//Write values from the data buffer into the data register to be transmitted
				SPI_Handle->SPIx->DR = *((uint16_t *)SPI_Handle->pTxBuffer++);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	1c59      	adds	r1, r3, #1
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6151      	str	r1, [r2, #20]
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60da      	str	r2, [r3, #12]
				SPI_Handle->tx_length--;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7e1b      	ldrb	r3, [r3, #24]
 8002352:	3b01      	subs	r3, #1
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	761a      	strb	r2, [r3, #24]
			}

			if(SPI_Handle->tx_length == 0 && (!SPI_Handle->ssm))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7e1b      	ldrb	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d13e      	bne.n	80023e0 <TXE_Interrupt_Handler+0xc4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7c5b      	ldrb	r3, [r3, #17]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13a      	bne.n	80023e0 <TXE_Interrupt_Handler+0xc4>
			{
				Disable_SPI_Transmission(SPI_Handle);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff70 	bl	8002250 <Disable_SPI_Transmission>
	{
		//Transmit the address of the register to read from
		SPI_Handle->SPIx->DR = SPI_Handle->reg_address;

	}
}
 8002370:	e036      	b.n	80023e0 <TXE_Interrupt_Handler+0xc4>
			if(SPI_Handle->tx_length)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7e1b      	ldrb	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00e      	beq.n	8002398 <TXE_Interrupt_Handler+0x7c>
				SPI_Handle->SPIx->DR = *(SPI_Handle->pTxBuffer++);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	1c59      	adds	r1, r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6151      	str	r1, [r2, #20]
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60da      	str	r2, [r3, #12]
				SPI_Handle->tx_length--;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e1b      	ldrb	r3, [r3, #24]
 8002390:	3b01      	subs	r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	761a      	strb	r2, [r3, #24]
			if(SPI_Handle->tx_length == 0)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e1b      	ldrb	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11f      	bne.n	80023e0 <TXE_Interrupt_Handler+0xc4>
				SPI_Handle->bus_state = SPI_Ready;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	765a      	strb	r2, [r3, #25]
				if(!SPI_Handle->ssm)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7c5b      	ldrb	r3, [r3, #17]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <TXE_Interrupt_Handler+0x9a>
					Disable_SPI_Transmission(SPI_Handle);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ff4e 	bl	8002250 <Disable_SPI_Transmission>
}
 80023b4:	e014      	b.n	80023e0 <TXE_Interrupt_Handler+0xc4>
					SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c4:	605a      	str	r2, [r3, #4]
					GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fccd 	bl	8001d6c <GPIO_WritePin>
}
 80023d2:	e005      	b.n	80023e0 <TXE_Interrupt_Handler+0xc4>
		SPI_Handle->SPIx->DR = SPI_Handle->reg_address;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60da      	str	r2, [r3, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <RXNE_Interrupt_Handler>:
/*
 * @Brief	Support function called from the interrupt service handler when the RXNE flag
 * 			is raised.
 */
static void RXNE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	//For 16 bit data transmission
	if(SPI_Handle->data_frame == Data_16_Bits)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7c1b      	ldrb	r3, [r3, #16]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d117      	bne.n	8002428 <RXNE_Interrupt_Handler+0x40>
	{
		//If rx_length is greater than 0
		if(SPI_Handle->rx_length)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d029      	beq.n	8002456 <RXNE_Interrupt_Handler+0x6e>
		{
			//Read value from Data register inot buffer
			*((uint16_t *)SPI_Handle->pRxBuffer++) = SPI_Handle->SPIx->DR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68d8      	ldr	r0, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	1c59      	adds	r1, r3, #1
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	61d1      	str	r1, [r2, #28]
 8002412:	b282      	uxth	r2, r0
 8002414:	801a      	strh	r2, [r3, #0]
			SPI_Handle->rx_length--;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241c:	3b01      	subs	r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f883 2020 	strb.w	r2, [r3, #32]
 8002426:	e016      	b.n	8002456 <RXNE_Interrupt_Handler+0x6e>

	//For 8 bit data transmission
	else
	{
		//If rx_length is greater than 0
		if(SPI_Handle->rx_length)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d011      	beq.n	8002456 <RXNE_Interrupt_Handler+0x6e>
		{
			//Read value from Data register inot buffer
			*(SPI_Handle->pRxBuffer++) = SPI_Handle->SPIx->DR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68d8      	ldr	r0, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	1c59      	adds	r1, r3, #1
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	61d1      	str	r1, [r2, #28]
 8002442:	b2c2      	uxtb	r2, r0
 8002444:	701a      	strb	r2, [r3, #0]
			SPI_Handle->rx_length--;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244c:	3b01      	subs	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}


	if(SPI_Handle->rx_length == 0)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d120      	bne.n	80024a2 <RXNE_Interrupt_Handler+0xba>
	{
		//Set the spi bus back to SPI_Ready
		SPI_Handle->bus_state = SPI_Ready;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	765a      	strb	r2, [r3, #25]

		//If SSM is disabled
		if(!SPI_Handle->ssm)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7c5b      	ldrb	r3, [r3, #17]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <RXNE_Interrupt_Handler+0x8e>
		{
			Disable_SPI_Reception(SPI_Handle);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ff21 	bl	80022b6 <Disable_SPI_Reception>

			//Pull chip select high
			GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
		}
	}
}
 8002474:	e015      	b.n	80024a2 <RXNE_Interrupt_Handler+0xba>
			SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002484:	605a      	str	r2, [r3, #4]
			SPI_Handle->SPIx->CR2 &= ~CR2_RXNEIE_Enable;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002494:	605a      	str	r2, [r3, #4]
			GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2101      	movs	r1, #1
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fc65 	bl	8001d6c <GPIO_WritePin>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <SPI_MultiSlave_TransmitIT>:
 *
 * @note	This requires a GPIO slave device to be passed in, which is created form the GPIO driver included in this file.
 * 			This function will handle pulling the CS low, all that is needed, is to specifcy which slave to interact with.
 */
void SPI_MultiSlave_TransmitIT(SPI_Handle_t *SPI_Handle, GPIO_Config_t *Slave_Device, uint8_t *input_buffer, uint8_t num_of_bytes)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	70fb      	strb	r3, [r7, #3]
	if(SPI_Handle->bus_state == SPI_Ready)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	7e5b      	ldrb	r3, [r3, #25]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d11a      	bne.n	80024f6 <SPI_MultiSlave_TransmitIT+0x4c>
	{
		SPI_Handle->pTxBuffer = input_buffer;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	615a      	str	r2, [r3, #20]
		SPI_Handle->tx_length = num_of_bytes;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	761a      	strb	r2, [r3, #24]
		SPI_Handle->bus_state = SPI_Transmitting;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	765a      	strb	r2, [r3, #25]
		SPI_Handle->Slave = Slave_Device;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24

		//Enable NVIC interrupts
		Enable_NVIC(SPI_Handle);
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7ff fe8d 	bl	80021f8 <Enable_NVIC>

		//Pull Slave Device Low to begin data transmission
		GPIO_WritePin(Slave_Device, GPIO_Reset);
 80024de:	2102      	movs	r1, #2
 80024e0:	68b8      	ldr	r0, [r7, #8]
 80024e2:	f7ff fc43 	bl	8001d6c <GPIO_WritePin>

		//Enable TXEIE and RXNEIE bit in CR2
		SPI_Handle->SPIx->CR2 |= CR2_TXEIE_Enable;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024f4:	605a      	str	r2, [r3, #4]
	}
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <SPI_MultiSlave_RecieveIT>:
 *
 * @note	This requires a GPIO slave device to be passed in, which is created form the GPIO driver included in this file.
 * 			This function will handle pulling the CS low, all that is needed, is to specifcy which slave to interact with.
 */
void SPI_MultiSlave_RecieveIT(SPI_Handle_t *SPI_Handle, GPIO_Config_t *Slave_Device, uint8_t *output_buffer, uint8_t num_of_bytes, uint8_t address)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	70fb      	strb	r3, [r7, #3]
	if(SPI_Handle->bus_state == SPI_Ready)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	7e5b      	ldrb	r3, [r3, #25]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d127      	bne.n	8002564 <SPI_MultiSlave_RecieveIT+0x66>
	{
		SPI_Handle->pRxBuffer = output_buffer;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	61da      	str	r2, [r3, #28]
		SPI_Handle->rx_length = num_of_bytes;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	f883 2020 	strb.w	r2, [r3, #32]
		SPI_Handle->bus_state = SPI_Receiving;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2202      	movs	r2, #2
 8002526:	765a      	strb	r2, [r3, #25]
		SPI_Handle->reg_address = address;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	7e3a      	ldrb	r2, [r7, #24]
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		SPI_Handle->Slave = Slave_Device;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

		//Enable NVIC interrupts
		Enable_NVIC(SPI_Handle);
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7ff fe5e 	bl	80021f8 <Enable_NVIC>

		//Pull Slave Device Low to begin data transmission
		GPIO_WritePin(Slave_Device, GPIO_Reset);
 800253c:	2102      	movs	r1, #2
 800253e:	68b8      	ldr	r0, [r7, #8]
 8002540:	f7ff fc14 	bl	8001d6c <GPIO_WritePin>

		//Enable TXEIE and RXNEIE bit in CR2
		SPI_Handle->SPIx->CR2 |= CR2_RXNEIE_Enable;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002552:	605a      	str	r2, [r3, #4]
		SPI_Handle->SPIx->CR2 |= CR2_TXEIE_Enable;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002562:	605a      	str	r2, [r3, #4]
	}
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <SPI_IRQ_Handler>:
 *
 * @note	This function is called whenever an interrupt occurs generated by the TXE or RXNE flag. It also
 * 			services both the TXE and RXNE interrupts.
 */
void SPI_IRQ_Handler(SPI_Handle_t *SPI_Handle)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2;

	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_RXNEIE_Enable) >> 6);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
	temp2 = (SPI_Handle->SPIx->SR & SR_RXNE_Flag);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
	//If the RXNE flag is raised and the RXNEIE bit is set - call the RXNE interrupt support function
	if(temp1 && temp2)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <SPI_IRQ_Handler+0x34>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <SPI_IRQ_Handler+0x34>
	{
		RXNE_Interrupt_Handler(SPI_Handle);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff24 	bl	80023e8 <RXNE_Interrupt_Handler>
	}


	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_TXEIE_Enable) >> 7);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	09db      	lsrs	r3, r3, #7
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
	temp2 = ((SPI_Handle->SPIx->SR & SR_TXE_Flag) >> 1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
	//If the TXE flag is raised and the TXEIE bit is set - call the TXE interrupt support function
	if(temp1 && temp2)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <SPI_IRQ_Handler+0x62>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <SPI_IRQ_Handler+0x62>
	{
		TXE_Interrupt_Handler(SPI_Handle);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fea7 	bl	800231c <TXE_Interrupt_Handler>
	}


}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <UART_Config>:
 *
 * @param	baudrate: Allows the user to input their desired baud-rate for the UART peripheral.
 *
 */
void UART_Config(UART_Config_t *UART_Config, USART_TypeDef *UARTx, uint16_t mode, uint32_t baudrate)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
	UART_Config->UARTx = UARTx;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	611a      	str	r2, [r3, #16]
	UART_Config->Mode = mode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	88fa      	ldrh	r2, [r7, #6]
 80025f0:	819a      	strh	r2, [r3, #12]
	UART_Config->BaudRate = baudrate;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	609a      	str	r2, [r3, #8]
	UART_Config->World_Length = UART_WORDLEN_8BITS;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	805a      	strh	r2, [r3, #2]
	UART_Config->Parity = UART_PARITY_DISABLED;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	80da      	strh	r2, [r3, #6]
	UART_Config->oversampling = UART_OVERSAMPLING_16;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	809a      	strh	r2, [r3, #4]
	UART_Config->Stop_Bits = UART_STOPBITS_1;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	801a      	strh	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <Select_UART_Periph>:
 *
 * @param	alt_function: Defines the alternate function value to input into the Alternate function register.
 *
 */
void Select_UART_Periph(GPIO_TypeDef *GPIOx, uint8_t pin, AFR_Config_t alt_function)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af04      	add	r7, sp, #16
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
 8002628:	4613      	mov	r3, r2
 800262a:	70bb      	strb	r3, [r7, #2]
	GPIO_Config_t GPIOx_UARTx_Tx, GPIOx_UARTx_Rx;

	GPIO_Config(&GPIOx_UARTx_Tx, GPIOx, pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	f107 0014 	add.w	r0, r7, #20
 8002632:	2300      	movs	r3, #0
 8002634:	9302      	str	r3, [sp, #8]
 8002636:	2300      	movs	r3, #0
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2300      	movs	r3, #0
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2302      	movs	r3, #2
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	f7fe fe98 	bl	8001376 <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Tx, alt_function);
 8002646:	78ba      	ldrb	r2, [r7, #2]
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe ff7a 	bl	8001548 <GPIO_Init>

	GPIO_Config(&GPIOx_UARTx_Rx, GPIOx, (pin + 1), GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	3301      	adds	r3, #1
 8002658:	b2da      	uxtb	r2, r3
 800265a:	f107 0008 	add.w	r0, r7, #8
 800265e:	2300      	movs	r3, #0
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	2300      	movs	r3, #0
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2302      	movs	r3, #2
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	f7fe fe82 	bl	8001376 <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Rx, alt_function);
 8002672:	78ba      	ldrb	r2, [r7, #2]
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe ff64 	bl	8001548 <GPIO_Init>
}
 8002680:	bf00      	nop
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <Enable_UART_Periph>:
 * 			based on the peripheral selected by the user.
 *
 * @param	UARTx: Defines which UART peripheral the user chooses, this can be: USART1, USART2 or USART6.
 */
void Enable_UART_Periph(USART_TypeDef *UARTx)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	if(UARTx == USART2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <Enable_UART_Periph+0x7c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d10f      	bne.n	80026b8 <Enable_UART_Periph+0x30>
	{

		Select_UART_Periph(GPIOA, Pin2, AF7);
 8002698:	2207      	movs	r2, #7
 800269a:	2102      	movs	r1, #2
 800269c:	481a      	ldr	r0, [pc, #104]	; (8002708 <Enable_UART_Periph+0x80>)
 800269e:	f7ff ffbd 	bl	800261c <Select_UART_Periph>
		Select_UART_Periph(GPIOD, Pin5, AF7);
 80026a2:	2207      	movs	r2, #7
 80026a4:	2105      	movs	r1, #5
 80026a6:	4819      	ldr	r0, [pc, #100]	; (800270c <Enable_UART_Periph+0x84>)
 80026a8:	f7ff ffb8 	bl	800261c <Select_UART_Periph>

		RCC_APB1Cmd(USART2_Enable, ENABLE);
 80026ac:	2101      	movs	r1, #1
 80026ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80026b2:	f7ff fbb5 	bl	8001e20 <RCC_APB1Cmd>
		Select_UART_Periph(GPIOC, Pin6, AF7);

		RCC_APB2Cmd(USART6_Enable, ENABLE);

	}
}
 80026b6:	e020      	b.n	80026fa <Enable_UART_Periph+0x72>
	else if(UARTx == USART1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <Enable_UART_Periph+0x88>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10e      	bne.n	80026de <Enable_UART_Periph+0x56>
		Select_UART_Periph(GPIOA, Pin9, AF7);
 80026c0:	2207      	movs	r2, #7
 80026c2:	2109      	movs	r1, #9
 80026c4:	4810      	ldr	r0, [pc, #64]	; (8002708 <Enable_UART_Periph+0x80>)
 80026c6:	f7ff ffa9 	bl	800261c <Select_UART_Periph>
		Select_UART_Periph(GPIOB, Pin6, AF7);
 80026ca:	2207      	movs	r2, #7
 80026cc:	2106      	movs	r1, #6
 80026ce:	4811      	ldr	r0, [pc, #68]	; (8002714 <Enable_UART_Periph+0x8c>)
 80026d0:	f7ff ffa4 	bl	800261c <Select_UART_Periph>
		RCC_APB2Cmd(USART1_Enable, ENABLE);
 80026d4:	2101      	movs	r1, #1
 80026d6:	2010      	movs	r0, #16
 80026d8:	f7ff fbc2 	bl	8001e60 <RCC_APB2Cmd>
}
 80026dc:	e00d      	b.n	80026fa <Enable_UART_Periph+0x72>
		Select_UART_Periph(GPIOA, Pin11, AF8);
 80026de:	2208      	movs	r2, #8
 80026e0:	210b      	movs	r1, #11
 80026e2:	4809      	ldr	r0, [pc, #36]	; (8002708 <Enable_UART_Periph+0x80>)
 80026e4:	f7ff ff9a 	bl	800261c <Select_UART_Periph>
		Select_UART_Periph(GPIOC, Pin6, AF7);
 80026e8:	2207      	movs	r2, #7
 80026ea:	2106      	movs	r1, #6
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <Enable_UART_Periph+0x90>)
 80026ee:	f7ff ff95 	bl	800261c <Select_UART_Periph>
		RCC_APB2Cmd(USART6_Enable, ENABLE);
 80026f2:	2101      	movs	r1, #1
 80026f4:	2020      	movs	r0, #32
 80026f6:	f7ff fbb3 	bl	8001e60 <RCC_APB2Cmd>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40004400 	.word	0x40004400
 8002708:	40020000 	.word	0x40020000
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40011000 	.word	0x40011000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800

0800271c <Set_BaudRate>:
 *@param	ClockSource: Defines the specific clock source for the MCU which includes SYSCLK,
 *			HCLK, PCLK1, PCLK2.
 *
 */
void Set_BaudRate(RCC_ClockFrequency_t *ClockSource, UART_Config_t *UART_Config)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
	RCC_GetClockFreq(ClockSource);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fbba 	bl	8001ea0 <RCC_GetClockFreq>

	uint32_t periph_clk, over8, usartdiv, baudrate;
	uint32_t mantissa_value, fraction_value, tempvariable = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]

	over8 = (UART_Config->UARTx->CR1) & (UART_CR1_OVER8_Mask);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800273a:	61fb      	str	r3, [r7, #28]
	baudrate = UART_Config->BaudRate;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	61bb      	str	r3, [r7, #24]

	if(UART_Config->UARTx == USART2)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	4a32      	ldr	r2, [pc, #200]	; (8002810 <Set_BaudRate+0xf4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d103      	bne.n	8002754 <Set_BaudRate+0x38>
	{
		periph_clk = ClockSource->PCLCK1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	e002      	b.n	800275a <Set_BaudRate+0x3e>
	}

	else
	{
		periph_clk = ClockSource->PCLCK2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/*Over-sampling by 16*/
	if(over8 == 0)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d125      	bne.n	80027ac <Set_BaudRate+0x90>
	{
		usartdiv = (periph_clk * 100)/(16 * baudrate);
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	2264      	movs	r2, #100	; 0x64
 8002764:	fb03 f202 	mul.w	r2, r3, r2
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	4a27      	ldr	r2, [pc, #156]	; (8002814 <Set_BaudRate+0xf8>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	613b      	str	r3, [r7, #16]
		tempvariable |= mantissa_value << 4;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	4313      	orrs	r3, r2
 8002786:	623b      	str	r3, [r7, #32]

		fraction_value = (((usartdiv - (mantissa_value * 100)) * 16) + 50)/100;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2264      	movs	r2, #100	; 0x64
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	3332      	adds	r3, #50	; 0x32
 8002798:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <Set_BaudRate+0xf8>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 80027a2:	6a3a      	ldr	r2, [r7, #32]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	623b      	str	r3, [r7, #32]
 80027aa:	e024      	b.n	80027f6 <Set_BaudRate+0xda>
	}

	/*Over-sampling by 8*/
	else
	{
		usartdiv = ((periph_clk * 100)/(8 * baudrate));
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	2264      	movs	r2, #100	; 0x64
 80027b0:	fb03 f202 	mul.w	r2, r3, r2
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <Set_BaudRate+0xf8>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	613b      	str	r3, [r7, #16]
		tempvariable |= (mantissa_value << 4);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	6a3a      	ldr	r2, [r7, #32]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	623b      	str	r3, [r7, #32]
		fraction_value = (((usartdiv - (mantissa_value * 100)) * 8) + 50)/100;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2264      	movs	r2, #100	; 0x64
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <Set_BaudRate+0xf8>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 80027ee:	6a3a      	ldr	r2, [r7, #32]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	623b      	str	r3, [r7, #32]
	}

	UART_Config->UARTx->BRR |= tempvariable;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	6a3a      	ldr	r2, [r7, #32]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	; 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40004400 	.word	0x40004400
 8002814:	51eb851f 	.word	0x51eb851f

08002818 <UART_Init>:
 *
 * @param	UART_Config_t: This points to the UART_Config_t data structure that holds all of the information for the
 * 			specific UART peripheral.
 */
void UART_Init(UART_Config_t *UART_Config)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	RCC_ClockFrequency_t Clock_Source;

	Enable_UART_Periph(UART_Config->UARTx);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff2f 	bl	8002688 <Enable_UART_Periph>

	/**Configuring UART**/

	/*Select the Word-Length (8 bits/9 bits)*/
	UART_Config->UARTx->CR1 &= ~UART_WORDLEN_9BITS;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002838:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->World_Length;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	885b      	ldrh	r3, [r3, #2]
 8002844:	4619      	mov	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	430a      	orrs	r2, r1
 800284c:	60da      	str	r2, [r3, #12]

	/*Select over-sampling (8 or 16)*/
	UART_Config->UARTx->CR1 &= ~UART_OVERSAMPLING_8;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800285c:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->oversampling;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	889b      	ldrh	r3, [r3, #4]
 8002868:	4619      	mov	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	430a      	orrs	r2, r1
 8002870:	60da      	str	r2, [r3, #12]

	/*Select transmission direction (Tx, Rx or Tx & Rx)*/
	UART_Config->UARTx->CR1 &= ~UART_MODE_TXRX;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f022 020c 	bic.w	r2, r2, #12
 8002880:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Mode;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	899b      	ldrh	r3, [r3, #12]
 800288c:	4619      	mov	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	430a      	orrs	r2, r1
 8002894:	60da      	str	r2, [r3, #12]

	/*Select parity (odd or even)*/
	UART_Config->UARTx->CR1 &= ~UART_PARITY_ODD;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80028a4:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Parity;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	88db      	ldrh	r3, [r3, #6]
 80028b0:	4619      	mov	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	60da      	str	r2, [r3, #12]

	/*Select number of stop bits (0.5, 1, 1.5, 2)*/
	UART_Config->UARTx->CR2 &= ~UART_STOPBITS_1_5;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028c8:	611a      	str	r2, [r3, #16]
	UART_Config->UARTx->CR2 |= UART_Config->Stop_Bits;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	430a      	orrs	r2, r1
 80028dc:	611a      	str	r2, [r3, #16]

	/*Calculate and set baud-rate*/
	Set_BaudRate(&Clock_Source, UART_Config);
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff19 	bl	800271c <Set_BaudRate>

	/*Enable UART*/
	UART_Config->UARTx->CR1 |= UART_CR1_Enable;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f8:	60da      	str	r2, [r3, #12]

}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <WriteByte>:
 * 			specific UART peripheral.
 *
 * @param	data: This specifies the data the user wishes to transmit.
 */
void WriteByte(UART_Config_t *UART_Config, uint16_t data)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	807b      	strh	r3, [r7, #2]
	while(!(UART_Config->UARTx->SR) && (UART_SR_TXE_Mask)){}
 800290e:	bf00      	nop
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0fa      	beq.n	8002910 <WriteByte+0xe>

	//Word length is 9 bits
	if(UART_Config->UARTx->CR1 & UART_WORDLEN_9BITS)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01a      	beq.n	800295e <WriteByte+0x5c>
	{
		//If parity is enabled 8 bits of data are sent with the 9th bit being the parity bit
		if((UART_Config->UARTx->CR1 & UART_PARITY_EVEN) || (UART_Config->UARTx->CR1 & UART_PARITY_ODD))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <WriteByte+0x42>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <WriteByte+0x4e>
		{
			UART_Config->UARTx->DR = ((uint8_t)data);
 8002944:	887b      	ldrh	r3, [r7, #2]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	e021      	b.n	8002994 <WriteByte+0x92>
		}

		//If parity is disabled then all 9 bits of data will be read as information
		else
		{
			UART_Config->UARTx->DR = (data & 0x1FF);
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800295a:	605a      	str	r2, [r3, #4]
		else
		{
			UART_Config->UARTx->DR = ((uint8_t)data);
		}
	}
}
 800295c:	e01a      	b.n	8002994 <WriteByte+0x92>
		if((UART_Config->UARTx->CR1 & UART_PARITY_EVEN) || (UART_Config->UARTx->CR1 & UART_PARITY_ODD))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <WriteByte+0x78>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <WriteByte+0x86>
			UART_Config->UARTx->DR = (data & 0x7F);
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	e005      	b.n	8002994 <WriteByte+0x92>
			UART_Config->UARTx->DR = ((uint8_t)data);
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	605a      	str	r2, [r3, #4]
}
 8002992:	e7ff      	b.n	8002994 <WriteByte+0x92>
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SysTick_Handler+0x1c>)
 80029a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029a8:	f001 fc02 	bl	80041b0 <xTaskGetSchedulerState>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d001      	beq.n	80029b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029b2:	f002 f9e9 	bl	8004d88 <xPortSysTickHandler>
  }
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <vApplicationGetIdleTaskMemory+0x2c>)
 80029d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <vApplicationGetIdleTaskMemory+0x30>)
 80029d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	601a      	str	r2, [r3, #0]
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	200002a8 	.word	0x200002a8
 80029f0:	20000304 	.word	0x20000304

080029f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <vApplicationGetTimerTaskMemory+0x30>)
 8002a0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	20000504 	.word	0x20000504
 8002a24:	20000560 	.word	0x20000560

08002a28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f103 0208 	add.w	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f103 0208 	add.w	r2, r3, #8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f103 0208 	add.w	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d103      	bne.n	8002aea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e00c      	b.n	8002b04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3308      	adds	r3, #8
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e002      	b.n	8002af8 <vListInsert+0x2e>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d2f6      	bcs.n	8002af2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6852      	ldr	r2, [r2, #4]
 8002b5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d103      	bne.n	8002b70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bba:	f002 f853 	bl	8004c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	441a      	add	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	3b01      	subs	r3, #1
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	22ff      	movs	r2, #255	; 0xff
 8002bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d114      	bne.n	8002c3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01a      	beq.n	8002c4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3310      	adds	r3, #16
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 f909 	bl	8003e34 <xTaskRemoveFromEventList>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <xQueueGenericReset+0xcc>)
 8002c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	e009      	b.n	8002c4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fef2 	bl	8002a28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3324      	adds	r3, #36	; 0x24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff feed 	bl	8002a28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c4e:	f002 f839 	bl	8004cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ca2:	bf00      	nop
 8002ca4:	e7fe      	b.n	8002ca4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <xQueueGenericCreateStatic+0x52>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <xQueueGenericCreateStatic+0x56>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <xQueueGenericCreateStatic+0x58>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	623b      	str	r3, [r7, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <xQueueGenericCreateStatic+0x7e>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <xQueueGenericCreateStatic+0x82>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <xQueueGenericCreateStatic+0x84>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	61fb      	str	r3, [r7, #28]
}
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cfe:	2350      	movs	r3, #80	; 0x50
 8002d00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b50      	cmp	r3, #80	; 0x50
 8002d06:	d00a      	beq.n	8002d1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	61bb      	str	r3, [r7, #24]
}
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f83f 	bl	8002dc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3730      	adds	r7, #48	; 0x30
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	613b      	str	r3, [r7, #16]
}
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	3350      	adds	r3, #80	; 0x50
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f002 f88d 	bl	8004ea8 <pvPortMalloc>
 8002d8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d011      	beq.n	8002dba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3350      	adds	r3, #80	; 0x50
 8002d9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f805 	bl	8002dc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dba:	69bb      	ldr	r3, [r7, #24]
	}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e002      	b.n	8002de6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002df2:	2101      	movs	r1, #1
 8002df4:	69b8      	ldr	r0, [r7, #24]
 8002df6:	f7ff fecb 	bl	8002b90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08e      	sub	sp, #56	; 0x38
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <xQueueGenericSend+0x32>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d103      	bne.n	8002e4c <xQueueGenericSend+0x40>
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <xQueueGenericSend+0x44>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <xQueueGenericSend+0x46>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <xQueueGenericSend+0x60>
	__asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d103      	bne.n	8002e7a <xQueueGenericSend+0x6e>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <xQueueGenericSend+0x72>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <xQueueGenericSend+0x74>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <xQueueGenericSend+0x8e>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	623b      	str	r3, [r7, #32]
}
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e9a:	f001 f989 	bl	80041b0 <xTaskGetSchedulerState>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <xQueueGenericSend+0x9e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <xQueueGenericSend+0xa2>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <xQueueGenericSend+0xa4>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <xQueueGenericSend+0xbe>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	61fb      	str	r3, [r7, #28]
}
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eca:	f001 fecb 	bl	8004c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <xQueueGenericSend+0xd4>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d129      	bne.n	8002f34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ee6:	f000 fa0b 	bl	8003300 <prvCopyDataToQueue>
 8002eea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	3324      	adds	r3, #36	; 0x24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 ff9b 	bl	8003e34 <xTaskRemoveFromEventList>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f04:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <xQueueGenericSend+0x1f8>)
 8002f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	e00a      	b.n	8002f2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <xQueueGenericSend+0x1f8>)
 8002f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f2c:	f001 feca 	bl	8004cc4 <vPortExitCritical>
				return pdPASS;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e063      	b.n	8002ffc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f3a:	f001 fec3 	bl	8004cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e05c      	b.n	8002ffc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 ffd5 	bl	8003efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f52:	2301      	movs	r3, #1
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f56:	f001 feb5 	bl	8004cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f5a:	f000 fd47 	bl	80039ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f5e:	f001 fe81 	bl	8004c64 <vPortEnterCritical>
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d103      	bne.n	8002f78 <xQueueGenericSend+0x16c>
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f7e:	b25b      	sxtb	r3, r3
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d103      	bne.n	8002f8e <xQueueGenericSend+0x182>
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f8e:	f001 fe99 	bl	8004cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f92:	1d3a      	adds	r2, r7, #4
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 ffc4 	bl	8003f28 <xTaskCheckForTimeOut>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d124      	bne.n	8002ff0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fa8:	f000 faa2 	bl	80034f0 <prvIsQueueFull>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 feea 	bl	8003d94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc2:	f000 fa2d 	bl	8003420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fc6:	f000 fd1f 	bl	8003a08 <xTaskResumeAll>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f47f af7c 	bne.w	8002eca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <xQueueGenericSend+0x1f8>)
 8002fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	e772      	b.n	8002eca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe6:	f000 fa1b 	bl	8003420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fea:	f000 fd0d 	bl	8003a08 <xTaskResumeAll>
 8002fee:	e76c      	b.n	8002eca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff2:	f000 fa15 	bl	8003420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ff6:	f000 fd07 	bl	8003a08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ffa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3738      	adds	r7, #56	; 0x38
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b090      	sub	sp, #64	; 0x40
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003032:	bf00      	nop
 8003034:	e7fe      	b.n	8003034 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d103      	bne.n	8003044 <xQueueGenericSendFromISR+0x3c>
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <xQueueGenericSendFromISR+0x40>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <xQueueGenericSendFromISR+0x42>
 8003048:	2300      	movs	r3, #0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d103      	bne.n	8003072 <xQueueGenericSendFromISR+0x6a>
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <xQueueGenericSendFromISR+0x6e>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <xQueueGenericSendFromISR+0x70>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	623b      	str	r3, [r7, #32]
}
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003092:	f001 fec9 	bl	8004e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003096:	f3ef 8211 	mrs	r2, BASEPRI
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	61fa      	str	r2, [r7, #28]
 80030ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <xQueueGenericSendFromISR+0xbc>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d12f      	bne.n	8003124 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030da:	f000 f911 	bl	8003300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d112      	bne.n	800310e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d016      	beq.n	800311e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	3324      	adds	r3, #36	; 0x24
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fe9d 	bl	8003e34 <xTaskRemoveFromEventList>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e007      	b.n	800311e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800310e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003112:	3301      	adds	r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	b25a      	sxtb	r2, r3
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800311e:	2301      	movs	r3, #1
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003122:	e001      	b.n	8003128 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003132:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003136:	4618      	mov	r0, r3
 8003138:	3740      	adds	r7, #64	; 0x40
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08c      	sub	sp, #48	; 0x30
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <xQueueReceive+0x30>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	623b      	str	r3, [r7, #32]
}
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <xQueueReceive+0x3e>
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <xQueueReceive+0x42>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <xQueueReceive+0x44>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <xQueueReceive+0x5e>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	61fb      	str	r3, [r7, #28]
}
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800319e:	f001 f807 	bl	80041b0 <xTaskGetSchedulerState>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <xQueueReceive+0x6e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <xQueueReceive+0x72>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <xQueueReceive+0x74>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <xQueueReceive+0x8e>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	61bb      	str	r3, [r7, #24]
}
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ce:	f001 fd49 	bl	8004c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01f      	beq.n	800321e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031de:	68b9      	ldr	r1, [r7, #8]
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	f000 f8f7 	bl	80033d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00f      	beq.n	8003216 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	3310      	adds	r3, #16
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fe1a 	bl	8003e34 <xTaskRemoveFromEventList>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <xQueueReceive+0x1bc>)
 8003208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003216:	f001 fd55 	bl	8004cc4 <vPortExitCritical>
				return pdPASS;
 800321a:	2301      	movs	r3, #1
 800321c:	e069      	b.n	80032f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003224:	f001 fd4e 	bl	8004cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003228:	2300      	movs	r3, #0
 800322a:	e062      	b.n	80032f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fe60 	bl	8003efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800323c:	2301      	movs	r3, #1
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003240:	f001 fd40 	bl	8004cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003244:	f000 fbd2 	bl	80039ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003248:	f001 fd0c 	bl	8004c64 <vPortEnterCritical>
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003252:	b25b      	sxtb	r3, r3
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d103      	bne.n	8003262 <xQueueReceive+0x122>
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003268:	b25b      	sxtb	r3, r3
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d103      	bne.n	8003278 <xQueueReceive+0x138>
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003278:	f001 fd24 	bl	8004cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800327c:	1d3a      	adds	r2, r7, #4
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fe4f 	bl	8003f28 <xTaskCheckForTimeOut>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d123      	bne.n	80032d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003292:	f000 f917 	bl	80034c4 <prvIsQueueEmpty>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d017      	beq.n	80032cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	3324      	adds	r3, #36	; 0x24
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fd75 	bl	8003d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ac:	f000 f8b8 	bl	8003420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032b0:	f000 fbaa 	bl	8003a08 <xTaskResumeAll>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d189      	bne.n	80031ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <xQueueReceive+0x1bc>)
 80032bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	e780      	b.n	80031ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ce:	f000 f8a7 	bl	8003420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032d2:	f000 fb99 	bl	8003a08 <xTaskResumeAll>
 80032d6:	e77a      	b.n	80031ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032da:	f000 f8a1 	bl	8003420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032de:	f000 fb93 	bl	8003a08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032e4:	f000 f8ee 	bl	80034c4 <prvIsQueueEmpty>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f43f af6f 	beq.w	80031ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3730      	adds	r7, #48	; 0x30
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d14d      	bne.n	80033c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 ff5e 	bl	80041ec <xTaskPriorityDisinherit>
 8003330:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e043      	b.n	80033c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d119      	bne.n	8003374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6858      	ldr	r0, [r3, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	461a      	mov	r2, r3
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	f002 fd93 	bl	8005e76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	441a      	add	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	d32b      	bcc.n	80033c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	e026      	b.n	80033c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68d8      	ldr	r0, [r3, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	461a      	mov	r2, r3
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	f002 fd79 	bl	8005e76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	425b      	negs	r3, r3
 800338e:	441a      	add	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d207      	bcs.n	80033b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	425b      	negs	r3, r3
 80033aa:	441a      	add	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d105      	bne.n	80033c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	3b01      	subs	r3, #1
 80033c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033ca:	697b      	ldr	r3, [r7, #20]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d018      	beq.n	8003418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d303      	bcc.n	8003408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68d9      	ldr	r1, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	461a      	mov	r2, r3
 8003412:	6838      	ldr	r0, [r7, #0]
 8003414:	f002 fd2f 	bl	8005e76 <memcpy>
	}
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003428:	f001 fc1c 	bl	8004c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003434:	e011      	b.n	800345a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3324      	adds	r3, #36	; 0x24
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fcf6 	bl	8003e34 <xTaskRemoveFromEventList>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800344e:	f000 fdcd 	bl	8003fec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	3b01      	subs	r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	2b00      	cmp	r3, #0
 8003460:	dce9      	bgt.n	8003436 <prvUnlockQueue+0x16>
 8003462:	e000      	b.n	8003466 <prvUnlockQueue+0x46>
					break;
 8003464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	22ff      	movs	r2, #255	; 0xff
 800346a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800346e:	f001 fc29 	bl	8004cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003472:	f001 fbf7 	bl	8004c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800347c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800347e:	e011      	b.n	80034a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3310      	adds	r3, #16
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fcd1 	bl	8003e34 <xTaskRemoveFromEventList>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003498:	f000 fda8 	bl	8003fec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800349c:	7bbb      	ldrb	r3, [r7, #14]
 800349e:	3b01      	subs	r3, #1
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	dce9      	bgt.n	8003480 <prvUnlockQueue+0x60>
 80034ac:	e000      	b.n	80034b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	22ff      	movs	r2, #255	; 0xff
 80034b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034b8:	f001 fc04 	bl	8004cc4 <vPortExitCritical>
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034cc:	f001 fbca 	bl	8004c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e001      	b.n	80034e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034e2:	f001 fbef 	bl	8004cc4 <vPortExitCritical>

	return xReturn;
 80034e6:	68fb      	ldr	r3, [r7, #12]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034f8:	f001 fbb4 	bl	8004c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003504:	429a      	cmp	r2, r3
 8003506:	d102      	bne.n	800350e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e001      	b.n	8003512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003512:	f001 fbd7 	bl	8004cc4 <vPortExitCritical>

	return xReturn;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e014      	b.n	800355a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003530:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <vQueueAddToRegistry+0x50>)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <vQueueAddToRegistry+0x50>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <vQueueAddToRegistry+0x50>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003552:	e006      	b.n	8003562 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	3301      	adds	r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b07      	cmp	r3, #7
 800355e:	d9e7      	bls.n	8003530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000960 	.word	0x20000960

08003574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003584:	f001 fb6e 	bl	8004c64 <vPortEnterCritical>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800358e:	b25b      	sxtb	r3, r3
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d103      	bne.n	800359e <vQueueWaitForMessageRestricted+0x2a>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d103      	bne.n	80035b4 <vQueueWaitForMessageRestricted+0x40>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b4:	f001 fb86 	bl	8004cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	3324      	adds	r3, #36	; 0x24
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fc07 	bl	8003ddc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035ce:	6978      	ldr	r0, [r7, #20]
 80035d0:	f7ff ff26 	bl	8003420 <prvUnlockQueue>
	}
 80035d4:	bf00      	nop
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08e      	sub	sp, #56	; 0x38
 80035e0:	af04      	add	r7, sp, #16
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <xTaskCreateStatic+0x2a>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	623b      	str	r3, [r7, #32]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xTaskCreateStatic+0x46>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	61fb      	str	r3, [r7, #28]
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003622:	235c      	movs	r3, #92	; 0x5c
 8003624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b5c      	cmp	r3, #92	; 0x5c
 800362a:	d00a      	beq.n	8003642 <xTaskCreateStatic+0x66>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	61bb      	str	r3, [r7, #24]
}
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003642:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01e      	beq.n	8003688 <xTaskCreateStatic+0xac>
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01b      	beq.n	8003688 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003658:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003662:	2300      	movs	r3, #0
 8003664:	9303      	str	r3, [sp, #12]
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	9302      	str	r3, [sp, #8]
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f850 	bl	8003720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003682:	f000 f8dd 	bl	8003840 <prvAddNewTaskToReadyList>
 8003686:	e001      	b.n	800368c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800368c:	697b      	ldr	r3, [r7, #20]
	}
 800368e:	4618      	mov	r0, r3
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08c      	sub	sp, #48	; 0x30
 800369a:	af04      	add	r7, sp, #16
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fbfc 	bl	8004ea8 <pvPortMalloc>
 80036b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036b8:	205c      	movs	r0, #92	; 0x5c
 80036ba:	f001 fbf5 	bl	8004ea8 <pvPortMalloc>
 80036be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
 80036cc:	e005      	b.n	80036da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036ce:	6978      	ldr	r0, [r7, #20]
 80036d0:	f001 fcb6 	bl	8005040 <vPortFree>
 80036d4:	e001      	b.n	80036da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d017      	beq.n	8003710 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036e8:	88fa      	ldrh	r2, [r7, #6]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	9302      	str	r3, [sp, #8]
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f80e 	bl	8003720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003704:	69f8      	ldr	r0, [r7, #28]
 8003706:	f000 f89b 	bl	8003840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800370a:	2301      	movs	r3, #1
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	e002      	b.n	8003716 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
 8003714:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003716:	69bb      	ldr	r3, [r7, #24]
	}
 8003718:	4618      	mov	r0, r3
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	461a      	mov	r2, r3
 8003738:	21a5      	movs	r1, #165	; 0xa5
 800373a:	f002 fb1c 	bl	8005d76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003748:	3b01      	subs	r3, #1
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f023 0307 	bic.w	r3, r3, #7
 8003756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	617b      	str	r3, [r7, #20]
}
 8003774:	bf00      	nop
 8003776:	e7fe      	b.n	8003776 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01f      	beq.n	80037be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	e012      	b.n	80037aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	7819      	ldrb	r1, [r3, #0]
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	3334      	adds	r3, #52	; 0x34
 8003794:	460a      	mov	r2, r1
 8003796:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d9e9      	bls.n	8003784 <prvInitialiseNewTask+0x64>
 80037b0:	e000      	b.n	80037b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80037b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037bc:	e003      	b.n	80037c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	2b37      	cmp	r3, #55	; 0x37
 80037ca:	d901      	bls.n	80037d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037cc:	2337      	movs	r3, #55	; 0x37
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	2200      	movs	r2, #0
 80037e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff f93e 	bl	8002a68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	3318      	adds	r3, #24
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f939 	bl	8002a68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	69b8      	ldr	r0, [r7, #24]
 8003820:	f001 f8f4 	bl	8004a0c <pxPortInitialiseStack>
 8003824:	4602      	mov	r2, r0
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003836:	bf00      	nop
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003848:	f001 fa0c 	bl	8004c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800384c:	4b2d      	ldr	r3, [pc, #180]	; (8003904 <prvAddNewTaskToReadyList+0xc4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <prvAddNewTaskToReadyList+0xc4>)
 8003854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003856:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <prvAddNewTaskToReadyList+0xc8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800385e:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <prvAddNewTaskToReadyList+0xc8>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <prvAddNewTaskToReadyList+0xc4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d110      	bne.n	800388e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800386c:	f000 fbe2 	bl	8004034 <prvInitialiseTaskLists>
 8003870:	e00d      	b.n	800388e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <prvAddNewTaskToReadyList+0xcc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <prvAddNewTaskToReadyList+0xc8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	429a      	cmp	r2, r3
 8003886:	d802      	bhi.n	800388e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003888:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <prvAddNewTaskToReadyList+0xc8>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <prvAddNewTaskToReadyList+0xd0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <prvAddNewTaskToReadyList+0xd0>)
 8003896:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <prvAddNewTaskToReadyList+0xd0>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <prvAddNewTaskToReadyList+0xd4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d903      	bls.n	80038b4 <prvAddNewTaskToReadyList+0x74>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <prvAddNewTaskToReadyList+0xd4>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <prvAddNewTaskToReadyList+0xd8>)
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7ff f8d9 	bl	8002a82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038d0:	f001 f9f8 	bl	8004cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <prvAddNewTaskToReadyList+0xcc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00e      	beq.n	80038fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <prvAddNewTaskToReadyList+0xc8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d207      	bcs.n	80038fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <prvAddNewTaskToReadyList+0xdc>)
 80038ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000e74 	.word	0x20000e74
 8003908:	200009a0 	.word	0x200009a0
 800390c:	20000e80 	.word	0x20000e80
 8003910:	20000e90 	.word	0x20000e90
 8003914:	20000e7c 	.word	0x20000e7c
 8003918:	200009a4 	.word	0x200009a4
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800392e:	463a      	mov	r2, r7
 8003930:	1d39      	adds	r1, r7, #4
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff f842 	bl	80029c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800393c:	6839      	ldr	r1, [r7, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	9202      	str	r2, [sp, #8]
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	2300      	movs	r3, #0
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2300      	movs	r3, #0
 800394c:	460a      	mov	r2, r1
 800394e:	4921      	ldr	r1, [pc, #132]	; (80039d4 <vTaskStartScheduler+0xb4>)
 8003950:	4821      	ldr	r0, [pc, #132]	; (80039d8 <vTaskStartScheduler+0xb8>)
 8003952:	f7ff fe43 	bl	80035dc <xTaskCreateStatic>
 8003956:	4603      	mov	r3, r0
 8003958:	4a20      	ldr	r2, [pc, #128]	; (80039dc <vTaskStartScheduler+0xbc>)
 800395a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800395c:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <vTaskStartScheduler+0xbc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e001      	b.n	800396e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d102      	bne.n	800397a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003974:	f000 fcfc 	bl	8004370 <xTimerCreateTimerTask>
 8003978:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d116      	bne.n	80039ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
}
 8003992:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <vTaskStartScheduler+0xc0>)
 8003996:	f04f 32ff 	mov.w	r2, #4294967295
 800399a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <vTaskStartScheduler+0xc4>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <vTaskStartScheduler+0xc8>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039a8:	f001 f8ba 	bl	8004b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039ac:	e00e      	b.n	80039cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d10a      	bne.n	80039cc <vTaskStartScheduler+0xac>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	60fb      	str	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	e7fe      	b.n	80039ca <vTaskStartScheduler+0xaa>
}
 80039cc:	bf00      	nop
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	08007c6c 	.word	0x08007c6c
 80039d8:	08004005 	.word	0x08004005
 80039dc:	20000e98 	.word	0x20000e98
 80039e0:	20000e94 	.word	0x20000e94
 80039e4:	20000e80 	.word	0x20000e80
 80039e8:	20000e78 	.word	0x20000e78

080039ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <vTaskSuspendAll+0x18>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <vTaskSuspendAll+0x18>)
 80039f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000e9c 	.word	0x20000e9c

08003a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a16:	4b42      	ldr	r3, [pc, #264]	; (8003b20 <xTaskResumeAll+0x118>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	603b      	str	r3, [r7, #0]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a34:	f001 f916 	bl	8004c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a38:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <xTaskResumeAll+0x118>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <xTaskResumeAll+0x118>)
 8003a40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a42:	4b37      	ldr	r3, [pc, #220]	; (8003b20 <xTaskResumeAll+0x118>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d162      	bne.n	8003b10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a4a:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <xTaskResumeAll+0x11c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d05e      	beq.n	8003b10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a52:	e02f      	b.n	8003ab4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a54:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <xTaskResumeAll+0x120>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3318      	adds	r3, #24
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff f86b 	bl	8002b3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff f866 	bl	8002b3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a74:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <xTaskResumeAll+0x124>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d903      	bls.n	8003a84 <xTaskResumeAll+0x7c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <xTaskResumeAll+0x124>)
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <xTaskResumeAll+0x128>)
 8003a92:	441a      	add	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7fe fff1 	bl	8002a82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <xTaskResumeAll+0x12c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <xTaskResumeAll+0x130>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <xTaskResumeAll+0x120>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1cb      	bne.n	8003a54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ac2:	f000 fb55 	bl	8004170 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <xTaskResumeAll+0x134>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ad2:	f000 f847 	bl	8003b64 <xTaskIncrementTick>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <xTaskResumeAll+0x130>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f1      	bne.n	8003ad2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <xTaskResumeAll+0x134>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <xTaskResumeAll+0x130>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <xTaskResumeAll+0x138>)
 8003b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b10:	f001 f8d8 	bl	8004cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b14:	68bb      	ldr	r3, [r7, #8]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000e9c 	.word	0x20000e9c
 8003b24:	20000e74 	.word	0x20000e74
 8003b28:	20000e34 	.word	0x20000e34
 8003b2c:	20000e7c 	.word	0x20000e7c
 8003b30:	200009a4 	.word	0x200009a4
 8003b34:	200009a0 	.word	0x200009a0
 8003b38:	20000e88 	.word	0x20000e88
 8003b3c:	20000e84 	.word	0x20000e84
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <xTaskGetTickCount+0x1c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b50:	687b      	ldr	r3, [r7, #4]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000e78 	.word	0x20000e78

08003b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b6e:	4b4f      	ldr	r3, [pc, #316]	; (8003cac <xTaskIncrementTick+0x148>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 808f 	bne.w	8003c96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b78:	4b4d      	ldr	r3, [pc, #308]	; (8003cb0 <xTaskIncrementTick+0x14c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b80:	4a4b      	ldr	r2, [pc, #300]	; (8003cb0 <xTaskIncrementTick+0x14c>)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d120      	bne.n	8003bce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b8c:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <xTaskIncrementTick+0x150>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <xTaskIncrementTick+0x48>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	603b      	str	r3, [r7, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xTaskIncrementTick+0x46>
 8003bac:	4b41      	ldr	r3, [pc, #260]	; (8003cb4 <xTaskIncrementTick+0x150>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <xTaskIncrementTick+0x154>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a3f      	ldr	r2, [pc, #252]	; (8003cb4 <xTaskIncrementTick+0x150>)
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4a3f      	ldr	r2, [pc, #252]	; (8003cb8 <xTaskIncrementTick+0x154>)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b3e      	ldr	r3, [pc, #248]	; (8003cbc <xTaskIncrementTick+0x158>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	4a3d      	ldr	r2, [pc, #244]	; (8003cbc <xTaskIncrementTick+0x158>)
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	f000 fad1 	bl	8004170 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bce:	4b3c      	ldr	r3, [pc, #240]	; (8003cc0 <xTaskIncrementTick+0x15c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d349      	bcc.n	8003c6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd8:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <xTaskIncrementTick+0x150>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d104      	bne.n	8003bec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be2:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <xTaskIncrementTick+0x15c>)
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	601a      	str	r2, [r3, #0]
					break;
 8003bea:	e03f      	b.n	8003c6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bec:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <xTaskIncrementTick+0x150>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d203      	bcs.n	8003c0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c04:	4a2e      	ldr	r2, [pc, #184]	; (8003cc0 <xTaskIncrementTick+0x15c>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c0a:	e02f      	b.n	8003c6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe ff93 	bl	8002b3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3318      	adds	r3, #24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe ff8a 	bl	8002b3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <xTaskIncrementTick+0x160>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d903      	bls.n	8003c3c <xTaskIncrementTick+0xd8>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	4a22      	ldr	r2, [pc, #136]	; (8003cc4 <xTaskIncrementTick+0x160>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <xTaskIncrementTick+0x164>)
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7fe ff15 	bl	8002a82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <xTaskIncrementTick+0x168>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d3b8      	bcc.n	8003bd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c6a:	e7b5      	b.n	8003bd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <xTaskIncrementTick+0x168>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c72:	4915      	ldr	r1, [pc, #84]	; (8003cc8 <xTaskIncrementTick+0x164>)
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d901      	bls.n	8003c88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <xTaskIncrementTick+0x16c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e004      	b.n	8003ca0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <xTaskIncrementTick+0x170>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	4a0d      	ldr	r2, [pc, #52]	; (8003cd4 <xTaskIncrementTick+0x170>)
 8003c9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ca0:	697b      	ldr	r3, [r7, #20]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000e9c 	.word	0x20000e9c
 8003cb0:	20000e78 	.word	0x20000e78
 8003cb4:	20000e2c 	.word	0x20000e2c
 8003cb8:	20000e30 	.word	0x20000e30
 8003cbc:	20000e8c 	.word	0x20000e8c
 8003cc0:	20000e94 	.word	0x20000e94
 8003cc4:	20000e7c 	.word	0x20000e7c
 8003cc8:	200009a4 	.word	0x200009a4
 8003ccc:	200009a0 	.word	0x200009a0
 8003cd0:	20000e88 	.word	0x20000e88
 8003cd4:	20000e84 	.word	0x20000e84

08003cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <vTaskSwitchContext+0xa8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <vTaskSwitchContext+0xac>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cec:	e041      	b.n	8003d72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003cee:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <vTaskSwitchContext+0xac>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <vTaskSwitchContext+0xb0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e010      	b.n	8003d1e <vTaskSwitchContext+0x46>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	607b      	str	r3, [r7, #4]
}
 8003d14:	bf00      	nop
 8003d16:	e7fe      	b.n	8003d16 <vTaskSwitchContext+0x3e>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	491b      	ldr	r1, [pc, #108]	; (8003d8c <vTaskSwitchContext+0xb4>)
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0e4      	beq.n	8003cfc <vTaskSwitchContext+0x24>
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <vTaskSwitchContext+0xb4>)
 8003d3e:	4413      	add	r3, r2
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	3308      	adds	r3, #8
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d104      	bne.n	8003d62 <vTaskSwitchContext+0x8a>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <vTaskSwitchContext+0xb8>)
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4a06      	ldr	r2, [pc, #24]	; (8003d88 <vTaskSwitchContext+0xb0>)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6013      	str	r3, [r2, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000e9c 	.word	0x20000e9c
 8003d84:	20000e88 	.word	0x20000e88
 8003d88:	20000e7c 	.word	0x20000e7c
 8003d8c:	200009a4 	.word	0x200009a4
 8003d90:	200009a0 	.word	0x200009a0

08003d94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	60fb      	str	r3, [r7, #12]
}
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <vTaskPlaceOnEventList+0x44>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fe fe81 	bl	8002aca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dc8:	2101      	movs	r1, #1
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f000 fa7c 	bl	80042c8 <prvAddCurrentTaskToDelayedList>
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	200009a0 	.word	0x200009a0

08003ddc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	617b      	str	r3, [r7, #20]
}
 8003e00:	bf00      	nop
 8003e02:	e7fe      	b.n	8003e02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3318      	adds	r3, #24
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7fe fe38 	bl	8002a82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	68b8      	ldr	r0, [r7, #8]
 8003e22:	f000 fa51 	bl	80042c8 <prvAddCurrentTaskToDelayedList>
	}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200009a0 	.word	0x200009a0

08003e34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60fb      	str	r3, [r7, #12]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	3318      	adds	r3, #24
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fe69 	bl	8002b3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <xTaskRemoveFromEventList+0xb0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d11d      	bne.n	8003eae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fe60 	bl	8002b3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <xTaskRemoveFromEventList+0xb4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d903      	bls.n	8003e90 <xTaskRemoveFromEventList+0x5c>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <xTaskRemoveFromEventList+0xb4>)
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4a13      	ldr	r2, [pc, #76]	; (8003eec <xTaskRemoveFromEventList+0xb8>)
 8003e9e:	441a      	add	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f7fe fdeb 	bl	8002a82 <vListInsertEnd>
 8003eac:	e005      	b.n	8003eba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	3318      	adds	r3, #24
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	480e      	ldr	r0, [pc, #56]	; (8003ef0 <xTaskRemoveFromEventList+0xbc>)
 8003eb6:	f7fe fde4 	bl	8002a82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <xTaskRemoveFromEventList+0xc0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d905      	bls.n	8003ed4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <xTaskRemoveFromEventList+0xc4>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e001      	b.n	8003ed8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ed8:	697b      	ldr	r3, [r7, #20]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000e9c 	.word	0x20000e9c
 8003ee8:	20000e7c 	.word	0x20000e7c
 8003eec:	200009a4 	.word	0x200009a4
 8003ef0:	20000e34 	.word	0x20000e34
 8003ef4:	200009a0 	.word	0x200009a0
 8003ef8:	20000e88 	.word	0x20000e88

08003efc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <vTaskInternalSetTimeOutState+0x24>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <vTaskInternalSetTimeOutState+0x28>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	605a      	str	r2, [r3, #4]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	20000e8c 	.word	0x20000e8c
 8003f24:	20000e78 	.word	0x20000e78

08003f28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	613b      	str	r3, [r7, #16]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	60fb      	str	r3, [r7, #12]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f6a:	f000 fe7b 	bl	8004c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <xTaskCheckForTimeOut+0xbc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d102      	bne.n	8003f8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	e023      	b.n	8003fd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <xTaskCheckForTimeOut+0xc0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d007      	beq.n	8003faa <xTaskCheckForTimeOut+0x82>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	e015      	b.n	8003fd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d20b      	bcs.n	8003fcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	1ad2      	subs	r2, r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ff9b 	bl	8003efc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e004      	b.n	8003fd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fd6:	f000 fe75 	bl	8004cc4 <vPortExitCritical>

	return xReturn;
 8003fda:	69fb      	ldr	r3, [r7, #28]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000e78 	.word	0x20000e78
 8003fe8:	20000e8c 	.word	0x20000e8c

08003fec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <vTaskMissedYield+0x14>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	20000e88 	.word	0x20000e88

08004004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800400c:	f000 f852 	bl	80040b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <prvIdleTask+0x28>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d9f9      	bls.n	800400c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <prvIdleTask+0x2c>)
 800401a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004028:	e7f0      	b.n	800400c <prvIdleTask+0x8>
 800402a:	bf00      	nop
 800402c:	200009a4 	.word	0x200009a4
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	e00c      	b.n	800405a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <prvInitialiseTaskLists+0x60>)
 800404c:	4413      	add	r3, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fcea 	bl	8002a28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3301      	adds	r3, #1
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b37      	cmp	r3, #55	; 0x37
 800405e:	d9ef      	bls.n	8004040 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004060:	480d      	ldr	r0, [pc, #52]	; (8004098 <prvInitialiseTaskLists+0x64>)
 8004062:	f7fe fce1 	bl	8002a28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004066:	480d      	ldr	r0, [pc, #52]	; (800409c <prvInitialiseTaskLists+0x68>)
 8004068:	f7fe fcde 	bl	8002a28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800406c:	480c      	ldr	r0, [pc, #48]	; (80040a0 <prvInitialiseTaskLists+0x6c>)
 800406e:	f7fe fcdb 	bl	8002a28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004072:	480c      	ldr	r0, [pc, #48]	; (80040a4 <prvInitialiseTaskLists+0x70>)
 8004074:	f7fe fcd8 	bl	8002a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004078:	480b      	ldr	r0, [pc, #44]	; (80040a8 <prvInitialiseTaskLists+0x74>)
 800407a:	f7fe fcd5 	bl	8002a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <prvInitialiseTaskLists+0x78>)
 8004080:	4a05      	ldr	r2, [pc, #20]	; (8004098 <prvInitialiseTaskLists+0x64>)
 8004082:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004084:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <prvInitialiseTaskLists+0x7c>)
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <prvInitialiseTaskLists+0x68>)
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	200009a4 	.word	0x200009a4
 8004098:	20000e04 	.word	0x20000e04
 800409c:	20000e18 	.word	0x20000e18
 80040a0:	20000e34 	.word	0x20000e34
 80040a4:	20000e48 	.word	0x20000e48
 80040a8:	20000e60 	.word	0x20000e60
 80040ac:	20000e2c 	.word	0x20000e2c
 80040b0:	20000e30 	.word	0x20000e30

080040b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040ba:	e019      	b.n	80040f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040bc:	f000 fdd2 	bl	8004c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <prvCheckTasksWaitingTermination+0x50>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fd35 	bl	8002b3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040d2:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <prvCheckTasksWaitingTermination+0x54>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <prvCheckTasksWaitingTermination+0x54>)
 80040da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <prvCheckTasksWaitingTermination+0x58>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	4a0a      	ldr	r2, [pc, #40]	; (800410c <prvCheckTasksWaitingTermination+0x58>)
 80040e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040e6:	f000 fded 	bl	8004cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f810 	bl	8004110 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <prvCheckTasksWaitingTermination+0x58>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e1      	bne.n	80040bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000e48 	.word	0x20000e48
 8004108:	20000e74 	.word	0x20000e74
 800410c:	20000e5c 	.word	0x20000e5c

08004110 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	4618      	mov	r0, r3
 8004128:	f000 ff8a 	bl	8005040 <vPortFree>
				vPortFree( pxTCB );
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 ff87 	bl	8005040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004132:	e018      	b.n	8004166 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800413a:	2b01      	cmp	r3, #1
 800413c:	d103      	bne.n	8004146 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 ff7e 	bl	8005040 <vPortFree>
	}
 8004144:	e00f      	b.n	8004166 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800414c:	2b02      	cmp	r3, #2
 800414e:	d00a      	beq.n	8004166 <prvDeleteTCB+0x56>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60fb      	str	r3, [r7, #12]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <prvDeleteTCB+0x54>
	}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <prvResetNextTaskUnblockTime+0x38>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <prvResetNextTaskUnblockTime+0x3c>)
 8004182:	f04f 32ff 	mov.w	r2, #4294967295
 8004186:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004188:	e008      	b.n	800419c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <prvResetNextTaskUnblockTime+0x38>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a04      	ldr	r2, [pc, #16]	; (80041ac <prvResetNextTaskUnblockTime+0x3c>)
 800419a:	6013      	str	r3, [r2, #0]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	20000e2c 	.word	0x20000e2c
 80041ac:	20000e94 	.word	0x20000e94

080041b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <xTaskGetSchedulerState+0x34>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041be:	2301      	movs	r3, #1
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	e008      	b.n	80041d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <xTaskGetSchedulerState+0x38>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041cc:	2302      	movs	r3, #2
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	e001      	b.n	80041d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041d6:	687b      	ldr	r3, [r7, #4]
	}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	20000e80 	.word	0x20000e80
 80041e8:	20000e9c 	.word	0x20000e9c

080041ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d056      	beq.n	80042b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004202:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <xTaskPriorityDisinherit+0xd0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	429a      	cmp	r2, r3
 800420a:	d00a      	beq.n	8004222 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60fb      	str	r3, [r7, #12]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60bb      	str	r3, [r7, #8]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	1e5a      	subs	r2, r3, #1
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004252:	429a      	cmp	r2, r3
 8004254:	d02c      	beq.n	80042b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d128      	bne.n	80042b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3304      	adds	r3, #4
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fc6a 	bl	8002b3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <xTaskPriorityDisinherit+0xd4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d903      	bls.n	8004290 <xTaskPriorityDisinherit+0xa4>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <xTaskPriorityDisinherit+0xd4>)
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <xTaskPriorityDisinherit+0xd8>)
 800429e:	441a      	add	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f7fe fbeb 	bl	8002a82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042ac:	2301      	movs	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042b0:	697b      	ldr	r3, [r7, #20]
	}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200009a0 	.word	0x200009a0
 80042c0:	20000e7c 	.word	0x20000e7c
 80042c4:	200009a4 	.word	0x200009a4

080042c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042d2:	4b21      	ldr	r3, [pc, #132]	; (8004358 <prvAddCurrentTaskToDelayedList+0x90>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042d8:	4b20      	ldr	r3, [pc, #128]	; (800435c <prvAddCurrentTaskToDelayedList+0x94>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fc2c 	bl	8002b3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d10a      	bne.n	8004302 <prvAddCurrentTaskToDelayedList+0x3a>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042f2:	4b1a      	ldr	r3, [pc, #104]	; (800435c <prvAddCurrentTaskToDelayedList+0x94>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	4819      	ldr	r0, [pc, #100]	; (8004360 <prvAddCurrentTaskToDelayedList+0x98>)
 80042fc:	f7fe fbc1 	bl	8002a82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004300:	e026      	b.n	8004350 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4413      	add	r3, r2
 8004308:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <prvAddCurrentTaskToDelayedList+0x94>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	429a      	cmp	r2, r3
 8004318:	d209      	bcs.n	800432e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <prvAddCurrentTaskToDelayedList+0x9c>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <prvAddCurrentTaskToDelayedList+0x94>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fe fbcf 	bl	8002aca <vListInsert>
}
 800432c:	e010      	b.n	8004350 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <prvAddCurrentTaskToDelayedList+0x94>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f7fe fbc5 	bl	8002aca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	d202      	bcs.n	8004350 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <prvAddCurrentTaskToDelayedList+0xa4>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000e78 	.word	0x20000e78
 800435c:	200009a0 	.word	0x200009a0
 8004360:	20000e60 	.word	0x20000e60
 8004364:	20000e30 	.word	0x20000e30
 8004368:	20000e2c 	.word	0x20000e2c
 800436c:	20000e94 	.word	0x20000e94

08004370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800437a:	f000 fb07 	bl	800498c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800437e:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <xTimerCreateTimerTask+0x80>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d021      	beq.n	80043ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800438e:	1d3a      	adds	r2, r7, #4
 8004390:	f107 0108 	add.w	r1, r7, #8
 8004394:	f107 030c 	add.w	r3, r7, #12
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fb2b 	bl	80029f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	9202      	str	r2, [sp, #8]
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	2302      	movs	r3, #2
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	460a      	mov	r2, r1
 80043b0:	4910      	ldr	r1, [pc, #64]	; (80043f4 <xTimerCreateTimerTask+0x84>)
 80043b2:	4811      	ldr	r0, [pc, #68]	; (80043f8 <xTimerCreateTimerTask+0x88>)
 80043b4:	f7ff f912 	bl	80035dc <xTaskCreateStatic>
 80043b8:	4603      	mov	r3, r0
 80043ba:	4a10      	ldr	r2, [pc, #64]	; (80043fc <xTimerCreateTimerTask+0x8c>)
 80043bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <xTimerCreateTimerTask+0x8c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043c6:	2301      	movs	r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	613b      	str	r3, [r7, #16]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043e6:	697b      	ldr	r3, [r7, #20]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000ed0 	.word	0x20000ed0
 80043f4:	08007c74 	.word	0x08007c74
 80043f8:	08004535 	.word	0x08004535
 80043fc:	20000ed4 	.word	0x20000ed4

08004400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	623b      	str	r3, [r7, #32]
}
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <xTimerGenericCommand+0x98>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02a      	beq.n	800448c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b05      	cmp	r3, #5
 8004446:	dc18      	bgt.n	800447a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004448:	f7ff feb2 	bl	80041b0 <xTaskGetSchedulerState>
 800444c:	4603      	mov	r3, r0
 800444e:	2b02      	cmp	r3, #2
 8004450:	d109      	bne.n	8004466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004452:	4b11      	ldr	r3, [pc, #68]	; (8004498 <xTimerGenericCommand+0x98>)
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f107 0110 	add.w	r1, r7, #16
 800445a:	2300      	movs	r3, #0
 800445c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445e:	f7fe fcd5 	bl	8002e0c <xQueueGenericSend>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24
 8004464:	e012      	b.n	800448c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <xTimerGenericCommand+0x98>)
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f107 0110 	add.w	r1, r7, #16
 800446e:	2300      	movs	r3, #0
 8004470:	2200      	movs	r2, #0
 8004472:	f7fe fccb 	bl	8002e0c <xQueueGenericSend>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24
 8004478:	e008      	b.n	800448c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <xTimerGenericCommand+0x98>)
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	f107 0110 	add.w	r1, r7, #16
 8004482:	2300      	movs	r3, #0
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	f7fe fdbf 	bl	8003008 <xQueueGenericSendFromISR>
 800448a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800448e:	4618      	mov	r0, r3
 8004490:	3728      	adds	r7, #40	; 0x28
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000ed0 	.word	0x20000ed0

0800449c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a6:	4b22      	ldr	r3, [pc, #136]	; (8004530 <prvProcessExpiredTimer+0x94>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fb41 	bl	8002b3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d022      	beq.n	800450e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	18d1      	adds	r1, r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	6978      	ldr	r0, [r7, #20]
 80044d6:	f000 f8d1 	bl	800467c <prvInsertTimerInActiveList>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01f      	beq.n	8004520 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044e0:	2300      	movs	r3, #0
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2300      	movs	r3, #0
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	2100      	movs	r1, #0
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7ff ff88 	bl	8004400 <xTimerGenericCommand>
 80044f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d113      	bne.n	8004520 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60fb      	str	r3, [r7, #12]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	b2da      	uxtb	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	6978      	ldr	r0, [r7, #20]
 8004526:	4798      	blx	r3
}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000ec8 	.word	0x20000ec8

08004534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800453c:	f107 0308 	add.w	r3, r7, #8
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f857 	bl	80045f4 <prvGetNextExpireTime>
 8004546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4619      	mov	r1, r3
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f803 	bl	8004558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004552:	f000 f8d5 	bl	8004700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004556:	e7f1      	b.n	800453c <prvTimerTask+0x8>

08004558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004562:	f7ff fa43 	bl	80039ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f866 	bl	800463c <prvSampleTimeNow>
 8004570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d130      	bne.n	80045da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <prvProcessTimerOrBlockTask+0x3c>
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	429a      	cmp	r2, r3
 8004584:	d806      	bhi.n	8004594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004586:	f7ff fa3f 	bl	8003a08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff85 	bl	800449c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004592:	e024      	b.n	80045de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800459a:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <prvProcessTimerOrBlockTask+0x90>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <prvProcessTimerOrBlockTask+0x50>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <prvProcessTimerOrBlockTask+0x52>
 80045a8:	2300      	movs	r3, #0
 80045aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <prvProcessTimerOrBlockTask+0x94>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	4619      	mov	r1, r3
 80045ba:	f7fe ffdb 	bl	8003574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045be:	f7ff fa23 	bl	8003a08 <xTaskResumeAll>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <prvProcessTimerOrBlockTask+0x98>)
 80045ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	f3bf 8f6f 	isb	sy
}
 80045d8:	e001      	b.n	80045de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045da:	f7ff fa15 	bl	8003a08 <xTaskResumeAll>
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000ecc 	.word	0x20000ecc
 80045ec:	20000ed0 	.word	0x20000ed0
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045fc:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <prvGetNextExpireTime+0x44>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <prvGetNextExpireTime+0x16>
 8004606:	2201      	movs	r2, #1
 8004608:	e000      	b.n	800460c <prvGetNextExpireTime+0x18>
 800460a:	2200      	movs	r2, #0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <prvGetNextExpireTime+0x44>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e001      	b.n	8004628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004628:	68fb      	ldr	r3, [r7, #12]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20000ec8 	.word	0x20000ec8

0800463c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004644:	f7ff fa7e 	bl	8003b44 <xTaskGetTickCount>
 8004648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <prvSampleTimeNow+0x3c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	429a      	cmp	r2, r3
 8004652:	d205      	bcs.n	8004660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004654:	f000 f936 	bl	80048c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e002      	b.n	8004666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004666:	4a04      	ldr	r2, [pc, #16]	; (8004678 <prvSampleTimeNow+0x3c>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000ed8 	.word	0x20000ed8

0800467c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d812      	bhi.n	80046c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e01b      	b.n	80046ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <prvInsertTimerInActiveList+0x7c>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3304      	adds	r3, #4
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f7fe fa02 	bl	8002aca <vListInsert>
 80046c6:	e012      	b.n	80046ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d206      	bcs.n	80046de <prvInsertTimerInActiveList+0x62>
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e007      	b.n	80046ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046de:	4b07      	ldr	r3, [pc, #28]	; (80046fc <prvInsertTimerInActiveList+0x80>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f7fe f9ee 	bl	8002aca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046ee:	697b      	ldr	r3, [r7, #20]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000ecc 	.word	0x20000ecc
 80046fc:	20000ec8 	.word	0x20000ec8

08004700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08e      	sub	sp, #56	; 0x38
 8004704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004706:	e0ca      	b.n	800489e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da18      	bge.n	8004740 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	3304      	adds	r3, #4
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	61fb      	str	r3, [r7, #28]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004736:	6850      	ldr	r0, [r2, #4]
 8004738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473a:	6892      	ldr	r2, [r2, #8]
 800473c:	4611      	mov	r1, r2
 800473e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f2c0 80ab 	blt.w	800489e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe f9ef 	bl	8002b3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800475e:	463b      	mov	r3, r7
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ff6b 	bl	800463c <prvSampleTimeNow>
 8004766:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b09      	cmp	r3, #9
 800476c:	f200 8096 	bhi.w	800489c <prvProcessReceivedCommands+0x19c>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <prvProcessReceivedCommands+0x78>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047a1 	.word	0x080047a1
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a1 	.word	0x080047a1
 8004784:	08004815 	.word	0x08004815
 8004788:	08004829 	.word	0x08004829
 800478c:	08004873 	.word	0x08004873
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047a1 	.word	0x080047a1
 8004798:	08004815 	.word	0x08004815
 800479c:	08004829 	.word	0x08004829
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	18d1      	adds	r1, r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c0:	f7ff ff5c 	bl	800467c <prvInsertTimerInActiveList>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d069      	beq.n	800489e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05e      	beq.n	800489e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	441a      	add	r2, r3
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	2100      	movs	r1, #0
 80047f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f2:	f7ff fe05 	bl	8004400 <xTimerGenericCommand>
 80047f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d14f      	bne.n	800489e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	61bb      	str	r3, [r7, #24]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004826:	e03a      	b.n	800489e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	617b      	str	r3, [r7, #20]
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	18d1      	adds	r1, r2, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486c:	f7ff ff06 	bl	800467c <prvInsertTimerInActiveList>
					break;
 8004870:	e015      	b.n	800489e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d103      	bne.n	8004888 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004882:	f000 fbdd 	bl	8005040 <vPortFree>
 8004886:	e00a      	b.n	800489e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800489a:	e000      	b.n	800489e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800489c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <prvProcessReceivedCommands+0x1c0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	1d39      	adds	r1, r7, #4
 80048a4:	2200      	movs	r2, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fc4a 	bl	8003140 <xQueueReceive>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f47f af2a 	bne.w	8004708 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3730      	adds	r7, #48	; 0x30
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000ed0 	.word	0x20000ed0

080048c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048ca:	e048      	b.n	800495e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048cc:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <prvSwitchTimerLists+0xc0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d6:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <prvSwitchTimerLists+0xc0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe f929 	bl	8002b3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d02e      	beq.n	800495e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	429a      	cmp	r2, r3
 8004910:	d90e      	bls.n	8004930 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800491e:	4b19      	ldr	r3, [pc, #100]	; (8004984 <prvSwitchTimerLists+0xc0>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fe f8ce 	bl	8002aca <vListInsert>
 800492e:	e016      	b.n	800495e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004930:	2300      	movs	r3, #0
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	2100      	movs	r1, #0
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff fd60 	bl	8004400 <xTimerGenericCommand>
 8004940:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	603b      	str	r3, [r7, #0]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <prvSwitchTimerLists+0xc0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1b1      	bne.n	80048cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <prvSwitchTimerLists+0xc0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <prvSwitchTimerLists+0xc4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a04      	ldr	r2, [pc, #16]	; (8004984 <prvSwitchTimerLists+0xc0>)
 8004974:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004976:	4a04      	ldr	r2, [pc, #16]	; (8004988 <prvSwitchTimerLists+0xc4>)
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6013      	str	r3, [r2, #0]
}
 800497c:	bf00      	nop
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000ec8 	.word	0x20000ec8
 8004988:	20000ecc 	.word	0x20000ecc

0800498c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004992:	f000 f967 	bl	8004c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <prvCheckForValidListAndQueue+0x60>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d120      	bne.n	80049e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800499e:	4814      	ldr	r0, [pc, #80]	; (80049f0 <prvCheckForValidListAndQueue+0x64>)
 80049a0:	f7fe f842 	bl	8002a28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049a4:	4813      	ldr	r0, [pc, #76]	; (80049f4 <prvCheckForValidListAndQueue+0x68>)
 80049a6:	f7fe f83f 	bl	8002a28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <prvCheckForValidListAndQueue+0x6c>)
 80049ac:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <prvCheckForValidListAndQueue+0x64>)
 80049ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <prvCheckForValidListAndQueue+0x70>)
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <prvCheckForValidListAndQueue+0x68>)
 80049b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049b6:	2300      	movs	r3, #0
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <prvCheckForValidListAndQueue+0x74>)
 80049bc:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <prvCheckForValidListAndQueue+0x78>)
 80049be:	2110      	movs	r1, #16
 80049c0:	200a      	movs	r0, #10
 80049c2:	f7fe f94d 	bl	8002c60 <xQueueGenericCreateStatic>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4a08      	ldr	r2, [pc, #32]	; (80049ec <prvCheckForValidListAndQueue+0x60>)
 80049ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049cc:	4b07      	ldr	r3, [pc, #28]	; (80049ec <prvCheckForValidListAndQueue+0x60>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <prvCheckForValidListAndQueue+0x60>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	490b      	ldr	r1, [pc, #44]	; (8004a08 <prvCheckForValidListAndQueue+0x7c>)
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe fda0 	bl	8003520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049e0:	f000 f970 	bl	8004cc4 <vPortExitCritical>
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000ed0 	.word	0x20000ed0
 80049f0:	20000ea0 	.word	0x20000ea0
 80049f4:	20000eb4 	.word	0x20000eb4
 80049f8:	20000ec8 	.word	0x20000ec8
 80049fc:	20000ecc 	.word	0x20000ecc
 8004a00:	20000f7c 	.word	0x20000f7c
 8004a04:	20000edc 	.word	0x20000edc
 8004a08:	08007c7c 	.word	0x08007c7c

08004a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3b04      	subs	r3, #4
 8004a1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b04      	subs	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f023 0201 	bic.w	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b04      	subs	r3, #4
 8004a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <pxPortInitialiseStack+0x64>)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3b14      	subs	r3, #20
 8004a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3b04      	subs	r3, #4
 8004a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f06f 0202 	mvn.w	r2, #2
 8004a5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3b20      	subs	r3, #32
 8004a60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a62:	68fb      	ldr	r3, [r7, #12]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	08004a75 	.word	0x08004a75

08004a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <prvTaskExitError+0x54>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a86:	d00a      	beq.n	8004a9e <prvTaskExitError+0x2a>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60fb      	str	r3, [r7, #12]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <prvTaskExitError+0x28>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60bb      	str	r3, [r7, #8]
}
 8004ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ab2:	bf00      	nop
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0fc      	beq.n	8004ab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	2000006c 	.word	0x2000006c
 8004acc:	00000000 	.word	0x00000000

08004ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <pxCurrentTCBConst2>)
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	6808      	ldr	r0, [r1, #0]
 8004ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ada:	f380 8809 	msr	PSP, r0
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8811 	msr	BASEPRI, r0
 8004aea:	4770      	bx	lr
 8004aec:	f3af 8000 	nop.w

08004af0 <pxCurrentTCBConst2>:
 8004af0:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004af8:	4808      	ldr	r0, [pc, #32]	; (8004b1c <prvPortStartFirstTask+0x24>)
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	6800      	ldr	r0, [r0, #0]
 8004afe:	f380 8808 	msr	MSP, r0
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f380 8814 	msr	CONTROL, r0
 8004b0a:	b662      	cpsie	i
 8004b0c:	b661      	cpsie	f
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	df00      	svc	0
 8004b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b1a:	bf00      	nop
 8004b1c:	e000ed08 	.word	0xe000ed08

08004b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b26:	4b46      	ldr	r3, [pc, #280]	; (8004c40 <xPortStartScheduler+0x120>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a46      	ldr	r2, [pc, #280]	; (8004c44 <xPortStartScheduler+0x124>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10a      	bne.n	8004b46 <xPortStartScheduler+0x26>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	613b      	str	r3, [r7, #16]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b46:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <xPortStartScheduler+0x120>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a3f      	ldr	r2, [pc, #252]	; (8004c48 <xPortStartScheduler+0x128>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10a      	bne.n	8004b66 <xPortStartScheduler+0x46>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	60fb      	str	r3, [r7, #12]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b66:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <xPortStartScheduler+0x12c>)
 8004b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	22ff      	movs	r2, #255	; 0xff
 8004b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4b31      	ldr	r3, [pc, #196]	; (8004c50 <xPortStartScheduler+0x130>)
 8004b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b8e:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <xPortStartScheduler+0x134>)
 8004b90:	2207      	movs	r2, #7
 8004b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b94:	e009      	b.n	8004baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b96:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <xPortStartScheduler+0x134>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <xPortStartScheduler+0x134>)
 8004b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d0ef      	beq.n	8004b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <xPortStartScheduler+0x134>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1c3 0307 	rsb	r3, r3, #7
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d00a      	beq.n	8004bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	60bb      	str	r3, [r7, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <xPortStartScheduler+0x134>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <xPortStartScheduler+0x134>)
 8004be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004be2:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <xPortStartScheduler+0x134>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bea:	4a1a      	ldr	r2, [pc, #104]	; (8004c54 <xPortStartScheduler+0x134>)
 8004bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bf6:	4b18      	ldr	r3, [pc, #96]	; (8004c58 <xPortStartScheduler+0x138>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a17      	ldr	r2, [pc, #92]	; (8004c58 <xPortStartScheduler+0x138>)
 8004bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <xPortStartScheduler+0x138>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <xPortStartScheduler+0x138>)
 8004c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c0e:	f000 f8dd 	bl	8004dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <xPortStartScheduler+0x13c>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c18:	f000 f8fc 	bl	8004e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c1c:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <xPortStartScheduler+0x140>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0f      	ldr	r2, [pc, #60]	; (8004c60 <xPortStartScheduler+0x140>)
 8004c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c28:	f7ff ff66 	bl	8004af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c2c:	f7ff f854 	bl	8003cd8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c30:	f7ff ff20 	bl	8004a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	e000ed00 	.word	0xe000ed00
 8004c44:	410fc271 	.word	0x410fc271
 8004c48:	410fc270 	.word	0x410fc270
 8004c4c:	e000e400 	.word	0xe000e400
 8004c50:	20000fcc 	.word	0x20000fcc
 8004c54:	20000fd0 	.word	0x20000fd0
 8004c58:	e000ed20 	.word	0xe000ed20
 8004c5c:	2000006c 	.word	0x2000006c
 8004c60:	e000ef34 	.word	0xe000ef34

08004c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	607b      	str	r3, [r7, #4]
}
 8004c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <vPortEnterCritical+0x58>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3301      	adds	r3, #1
 8004c84:	4a0d      	ldr	r2, [pc, #52]	; (8004cbc <vPortEnterCritical+0x58>)
 8004c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <vPortEnterCritical+0x58>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10f      	bne.n	8004cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <vPortEnterCritical+0x5c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	603b      	str	r3, [r7, #0]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <vPortEnterCritical+0x4a>
	}
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	2000006c 	.word	0x2000006c
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <vPortExitCritical+0x50>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <vPortExitCritical+0x24>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	607b      	str	r3, [r7, #4]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <vPortExitCritical+0x50>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <vPortExitCritical+0x50>)
 8004cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <vPortExitCritical+0x50>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d105      	bne.n	8004d06 <vPortExitCritical+0x42>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	f383 8811 	msr	BASEPRI, r3
}
 8004d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000006c 	.word	0x2000006c
	...

08004d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d20:	f3ef 8009 	mrs	r0, PSP
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4b15      	ldr	r3, [pc, #84]	; (8004d80 <pxCurrentTCBConst>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	f01e 0f10 	tst.w	lr, #16
 8004d30:	bf08      	it	eq
 8004d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	6010      	str	r0, [r2, #0]
 8004d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d44:	f380 8811 	msr	BASEPRI, r0
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f7fe ffc2 	bl	8003cd8 <vTaskSwitchContext>
 8004d54:	f04f 0000 	mov.w	r0, #0
 8004d58:	f380 8811 	msr	BASEPRI, r0
 8004d5c:	bc09      	pop	{r0, r3}
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	6808      	ldr	r0, [r1, #0]
 8004d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d66:	f01e 0f10 	tst.w	lr, #16
 8004d6a:	bf08      	it	eq
 8004d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d70:	f380 8809 	msr	PSP, r0
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst>:
 8004d80:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	607b      	str	r3, [r7, #4]
}
 8004da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004da2:	f7fe fedf 	bl	8003b64 <xTaskIncrementTick>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <xPortSysTickHandler+0x40>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f383 8811 	msr	BASEPRI, r3
}
 8004dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <vPortSetupTimerInterrupt+0x38>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <vPortSetupTimerInterrupt+0x3c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <vPortSetupTimerInterrupt+0x40>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <vPortSetupTimerInterrupt+0x44>)
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e010 	.word	0xe000e010
 8004e04:	e000e018 	.word	0xe000e018
 8004e08:	20000048 	.word	0x20000048
 8004e0c:	10624dd3 	.word	0x10624dd3
 8004e10:	e000e014 	.word	0xe000e014

08004e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e24 <vPortEnableVFP+0x10>
 8004e18:	6801      	ldr	r1, [r0, #0]
 8004e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e1e:	6001      	str	r1, [r0, #0]
 8004e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e22:	bf00      	nop
 8004e24:	e000ed88 	.word	0xe000ed88

08004e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e2e:	f3ef 8305 	mrs	r3, IPSR
 8004e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	d914      	bls.n	8004e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <vPortValidateInterruptPriority+0x70>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e44:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <vPortValidateInterruptPriority+0x74>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	7afa      	ldrb	r2, [r7, #11]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d20a      	bcs.n	8004e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	607b      	str	r3, [r7, #4]
}
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <vPortValidateInterruptPriority+0x78>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <vPortValidateInterruptPriority+0x7c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d90a      	bls.n	8004e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	603b      	str	r3, [r7, #0]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <vPortValidateInterruptPriority+0x60>
	}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	e000e3f0 	.word	0xe000e3f0
 8004e9c:	20000fcc 	.word	0x20000fcc
 8004ea0:	e000ed0c 	.word	0xe000ed0c
 8004ea4:	20000fd0 	.word	0x20000fd0

08004ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004eb4:	f7fe fd9a 	bl	80039ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004eb8:	4b5b      	ldr	r3, [pc, #364]	; (8005028 <pvPortMalloc+0x180>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ec0:	f000 f920 	bl	8005104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ec4:	4b59      	ldr	r3, [pc, #356]	; (800502c <pvPortMalloc+0x184>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 8093 	bne.w	8004ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01d      	beq.n	8004f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ed8:	2208      	movs	r2, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d014      	beq.n	8004f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f023 0307 	bic.w	r3, r3, #7
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <pvPortMalloc+0x6c>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	617b      	str	r3, [r7, #20]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d06e      	beq.n	8004ff8 <pvPortMalloc+0x150>
 8004f1a:	4b45      	ldr	r3, [pc, #276]	; (8005030 <pvPortMalloc+0x188>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d869      	bhi.n	8004ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f24:	4b43      	ldr	r3, [pc, #268]	; (8005034 <pvPortMalloc+0x18c>)
 8004f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f28:	4b42      	ldr	r3, [pc, #264]	; (8005034 <pvPortMalloc+0x18c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f2e:	e004      	b.n	8004f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d903      	bls.n	8004f4c <pvPortMalloc+0xa4>
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f1      	bne.n	8004f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f4c:	4b36      	ldr	r3, [pc, #216]	; (8005028 <pvPortMalloc+0x180>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d050      	beq.n	8004ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	4413      	add	r3, r2
 8004f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	2308      	movs	r3, #8
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d91f      	bls.n	8004fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	613b      	str	r3, [r7, #16]
}
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	1ad2      	subs	r2, r2, r3
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fb2:	69b8      	ldr	r0, [r7, #24]
 8004fb4:	f000 f908 	bl	80051c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <pvPortMalloc+0x188>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <pvPortMalloc+0x188>)
 8004fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fc6:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <pvPortMalloc+0x188>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <pvPortMalloc+0x190>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d203      	bcs.n	8004fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fd2:	4b17      	ldr	r3, [pc, #92]	; (8005030 <pvPortMalloc+0x188>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <pvPortMalloc+0x190>)
 8004fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <pvPortMalloc+0x184>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <pvPortMalloc+0x194>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	4a11      	ldr	r2, [pc, #68]	; (800503c <pvPortMalloc+0x194>)
 8004ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ff8:	f7fe fd06 	bl	8003a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <pvPortMalloc+0x174>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60fb      	str	r3, [r7, #12]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <pvPortMalloc+0x172>
	return pvReturn;
 800501c:	69fb      	ldr	r3, [r7, #28]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3728      	adds	r7, #40	; 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20004bdc 	.word	0x20004bdc
 800502c:	20004bf0 	.word	0x20004bf0
 8005030:	20004be0 	.word	0x20004be0
 8005034:	20004bd4 	.word	0x20004bd4
 8005038:	20004be4 	.word	0x20004be4
 800503c:	20004be8 	.word	0x20004be8

08005040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04d      	beq.n	80050ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005052:	2308      	movs	r3, #8
 8005054:	425b      	negs	r3, r3
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <vPortFree+0xb8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <vPortFree+0x44>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60fb      	str	r3, [r7, #12]
}
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <vPortFree+0x62>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	60bb      	str	r3, [r7, #8]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <vPortFree+0xb8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01e      	beq.n	80050ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11a      	bne.n	80050ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <vPortFree+0xb8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	401a      	ands	r2, r3
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050c8:	f7fe fc90 	bl	80039ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <vPortFree+0xbc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4413      	add	r3, r2
 80050d6:	4a09      	ldr	r2, [pc, #36]	; (80050fc <vPortFree+0xbc>)
 80050d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050da:	6938      	ldr	r0, [r7, #16]
 80050dc:	f000 f874 	bl	80051c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <vPortFree+0xc0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4a06      	ldr	r2, [pc, #24]	; (8005100 <vPortFree+0xc0>)
 80050e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050ea:	f7fe fc8d 	bl	8003a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050ee:	bf00      	nop
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20004bf0 	.word	0x20004bf0
 80050fc:	20004be0 	.word	0x20004be0
 8005100:	20004bec 	.word	0x20004bec

08005104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800510a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800510e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005110:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <prvHeapInit+0xac>)
 8005112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3307      	adds	r3, #7
 8005122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0307 	bic.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <prvHeapInit+0xac>)
 8005134:	4413      	add	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800513c:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <prvHeapInit+0xb0>)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <prvHeapInit+0xb0>)
 8005144:	2200      	movs	r2, #0
 8005146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	4413      	add	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005150:	2208      	movs	r2, #8
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1a9b      	subs	r3, r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0307 	bic.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <prvHeapInit+0xb4>)
 8005164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005166:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <prvHeapInit+0xb4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <prvHeapInit+0xb4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <prvHeapInit+0xb4>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <prvHeapInit+0xb8>)
 8005192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <prvHeapInit+0xbc>)
 800519a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <prvHeapInit+0xc0>)
 800519e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051a2:	601a      	str	r2, [r3, #0]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	20000fd4 	.word	0x20000fd4
 80051b4:	20004bd4 	.word	0x20004bd4
 80051b8:	20004bdc 	.word	0x20004bdc
 80051bc:	20004be4 	.word	0x20004be4
 80051c0:	20004be0 	.word	0x20004be0
 80051c4:	20004bf0 	.word	0x20004bf0

080051c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051d0:	4b28      	ldr	r3, [pc, #160]	; (8005274 <prvInsertBlockIntoFreeList+0xac>)
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e002      	b.n	80051dc <prvInsertBlockIntoFreeList+0x14>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d8f7      	bhi.n	80051d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4413      	add	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d108      	bne.n	800520a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	441a      	add	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	441a      	add	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d118      	bne.n	8005250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b15      	ldr	r3, [pc, #84]	; (8005278 <prvInsertBlockIntoFreeList+0xb0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d00d      	beq.n	8005246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e008      	b.n	8005258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <prvInsertBlockIntoFreeList+0xb0>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e003      	b.n	8005258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	429a      	cmp	r2, r3
 800525e:	d002      	beq.n	8005266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20004bd4 	.word	0x20004bd4
 8005278:	20004bdc 	.word	0x20004bdc

0800527c <__cvt>:
 800527c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	ec55 4b10 	vmov	r4, r5, d0
 8005284:	2d00      	cmp	r5, #0
 8005286:	460e      	mov	r6, r1
 8005288:	4619      	mov	r1, r3
 800528a:	462b      	mov	r3, r5
 800528c:	bfbb      	ittet	lt
 800528e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005292:	461d      	movlt	r5, r3
 8005294:	2300      	movge	r3, #0
 8005296:	232d      	movlt	r3, #45	; 0x2d
 8005298:	700b      	strb	r3, [r1, #0]
 800529a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800529c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052a0:	4691      	mov	r9, r2
 80052a2:	f023 0820 	bic.w	r8, r3, #32
 80052a6:	bfbc      	itt	lt
 80052a8:	4622      	movlt	r2, r4
 80052aa:	4614      	movlt	r4, r2
 80052ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052b0:	d005      	beq.n	80052be <__cvt+0x42>
 80052b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052b6:	d100      	bne.n	80052ba <__cvt+0x3e>
 80052b8:	3601      	adds	r6, #1
 80052ba:	2102      	movs	r1, #2
 80052bc:	e000      	b.n	80052c0 <__cvt+0x44>
 80052be:	2103      	movs	r1, #3
 80052c0:	ab03      	add	r3, sp, #12
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	ab02      	add	r3, sp, #8
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	ec45 4b10 	vmov	d0, r4, r5
 80052cc:	4653      	mov	r3, sl
 80052ce:	4632      	mov	r2, r6
 80052d0:	f000 fe6a 	bl	8005fa8 <_dtoa_r>
 80052d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052d8:	4607      	mov	r7, r0
 80052da:	d102      	bne.n	80052e2 <__cvt+0x66>
 80052dc:	f019 0f01 	tst.w	r9, #1
 80052e0:	d022      	beq.n	8005328 <__cvt+0xac>
 80052e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052e6:	eb07 0906 	add.w	r9, r7, r6
 80052ea:	d110      	bne.n	800530e <__cvt+0x92>
 80052ec:	783b      	ldrb	r3, [r7, #0]
 80052ee:	2b30      	cmp	r3, #48	; 0x30
 80052f0:	d10a      	bne.n	8005308 <__cvt+0x8c>
 80052f2:	2200      	movs	r2, #0
 80052f4:	2300      	movs	r3, #0
 80052f6:	4620      	mov	r0, r4
 80052f8:	4629      	mov	r1, r5
 80052fa:	f7fb fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 80052fe:	b918      	cbnz	r0, 8005308 <__cvt+0x8c>
 8005300:	f1c6 0601 	rsb	r6, r6, #1
 8005304:	f8ca 6000 	str.w	r6, [sl]
 8005308:	f8da 3000 	ldr.w	r3, [sl]
 800530c:	4499      	add	r9, r3
 800530e:	2200      	movs	r2, #0
 8005310:	2300      	movs	r3, #0
 8005312:	4620      	mov	r0, r4
 8005314:	4629      	mov	r1, r5
 8005316:	f7fb fbdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800531a:	b108      	cbz	r0, 8005320 <__cvt+0xa4>
 800531c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005320:	2230      	movs	r2, #48	; 0x30
 8005322:	9b03      	ldr	r3, [sp, #12]
 8005324:	454b      	cmp	r3, r9
 8005326:	d307      	bcc.n	8005338 <__cvt+0xbc>
 8005328:	9b03      	ldr	r3, [sp, #12]
 800532a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800532c:	1bdb      	subs	r3, r3, r7
 800532e:	4638      	mov	r0, r7
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	b004      	add	sp, #16
 8005334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005338:	1c59      	adds	r1, r3, #1
 800533a:	9103      	str	r1, [sp, #12]
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e7f0      	b.n	8005322 <__cvt+0xa6>

08005340 <__exponent>:
 8005340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005342:	4603      	mov	r3, r0
 8005344:	2900      	cmp	r1, #0
 8005346:	bfb8      	it	lt
 8005348:	4249      	neglt	r1, r1
 800534a:	f803 2b02 	strb.w	r2, [r3], #2
 800534e:	bfb4      	ite	lt
 8005350:	222d      	movlt	r2, #45	; 0x2d
 8005352:	222b      	movge	r2, #43	; 0x2b
 8005354:	2909      	cmp	r1, #9
 8005356:	7042      	strb	r2, [r0, #1]
 8005358:	dd2a      	ble.n	80053b0 <__exponent+0x70>
 800535a:	f10d 0207 	add.w	r2, sp, #7
 800535e:	4617      	mov	r7, r2
 8005360:	260a      	movs	r6, #10
 8005362:	4694      	mov	ip, r2
 8005364:	fb91 f5f6 	sdiv	r5, r1, r6
 8005368:	fb06 1415 	mls	r4, r6, r5, r1
 800536c:	3430      	adds	r4, #48	; 0x30
 800536e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005372:	460c      	mov	r4, r1
 8005374:	2c63      	cmp	r4, #99	; 0x63
 8005376:	f102 32ff 	add.w	r2, r2, #4294967295
 800537a:	4629      	mov	r1, r5
 800537c:	dcf1      	bgt.n	8005362 <__exponent+0x22>
 800537e:	3130      	adds	r1, #48	; 0x30
 8005380:	f1ac 0402 	sub.w	r4, ip, #2
 8005384:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005388:	1c41      	adds	r1, r0, #1
 800538a:	4622      	mov	r2, r4
 800538c:	42ba      	cmp	r2, r7
 800538e:	d30a      	bcc.n	80053a6 <__exponent+0x66>
 8005390:	f10d 0209 	add.w	r2, sp, #9
 8005394:	eba2 020c 	sub.w	r2, r2, ip
 8005398:	42bc      	cmp	r4, r7
 800539a:	bf88      	it	hi
 800539c:	2200      	movhi	r2, #0
 800539e:	4413      	add	r3, r2
 80053a0:	1a18      	subs	r0, r3, r0
 80053a2:	b003      	add	sp, #12
 80053a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80053aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80053ae:	e7ed      	b.n	800538c <__exponent+0x4c>
 80053b0:	2330      	movs	r3, #48	; 0x30
 80053b2:	3130      	adds	r1, #48	; 0x30
 80053b4:	7083      	strb	r3, [r0, #2]
 80053b6:	70c1      	strb	r1, [r0, #3]
 80053b8:	1d03      	adds	r3, r0, #4
 80053ba:	e7f1      	b.n	80053a0 <__exponent+0x60>

080053bc <_printf_float>:
 80053bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c0:	ed2d 8b02 	vpush	{d8}
 80053c4:	b08d      	sub	sp, #52	; 0x34
 80053c6:	460c      	mov	r4, r1
 80053c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053cc:	4616      	mov	r6, r2
 80053ce:	461f      	mov	r7, r3
 80053d0:	4605      	mov	r5, r0
 80053d2:	f000 fcd9 	bl	8005d88 <_localeconv_r>
 80053d6:	f8d0 a000 	ldr.w	sl, [r0]
 80053da:	4650      	mov	r0, sl
 80053dc:	f7fa ff50 	bl	8000280 <strlen>
 80053e0:	2300      	movs	r3, #0
 80053e2:	930a      	str	r3, [sp, #40]	; 0x28
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	9305      	str	r3, [sp, #20]
 80053e8:	f8d8 3000 	ldr.w	r3, [r8]
 80053ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053f0:	3307      	adds	r3, #7
 80053f2:	f023 0307 	bic.w	r3, r3, #7
 80053f6:	f103 0208 	add.w	r2, r3, #8
 80053fa:	f8c8 2000 	str.w	r2, [r8]
 80053fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005402:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005406:	9307      	str	r3, [sp, #28]
 8005408:	f8cd 8018 	str.w	r8, [sp, #24]
 800540c:	ee08 0a10 	vmov	s16, r0
 8005410:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005418:	4b9e      	ldr	r3, [pc, #632]	; (8005694 <_printf_float+0x2d8>)
 800541a:	f04f 32ff 	mov.w	r2, #4294967295
 800541e:	f7fb fb8d 	bl	8000b3c <__aeabi_dcmpun>
 8005422:	bb88      	cbnz	r0, 8005488 <_printf_float+0xcc>
 8005424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005428:	4b9a      	ldr	r3, [pc, #616]	; (8005694 <_printf_float+0x2d8>)
 800542a:	f04f 32ff 	mov.w	r2, #4294967295
 800542e:	f7fb fb67 	bl	8000b00 <__aeabi_dcmple>
 8005432:	bb48      	cbnz	r0, 8005488 <_printf_float+0xcc>
 8005434:	2200      	movs	r2, #0
 8005436:	2300      	movs	r3, #0
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	f7fb fb56 	bl	8000aec <__aeabi_dcmplt>
 8005440:	b110      	cbz	r0, 8005448 <_printf_float+0x8c>
 8005442:	232d      	movs	r3, #45	; 0x2d
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005448:	4a93      	ldr	r2, [pc, #588]	; (8005698 <_printf_float+0x2dc>)
 800544a:	4b94      	ldr	r3, [pc, #592]	; (800569c <_printf_float+0x2e0>)
 800544c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005450:	bf94      	ite	ls
 8005452:	4690      	movls	r8, r2
 8005454:	4698      	movhi	r8, r3
 8005456:	2303      	movs	r3, #3
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	9b05      	ldr	r3, [sp, #20]
 800545c:	f023 0304 	bic.w	r3, r3, #4
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	f04f 0900 	mov.w	r9, #0
 8005466:	9700      	str	r7, [sp, #0]
 8005468:	4633      	mov	r3, r6
 800546a:	aa0b      	add	r2, sp, #44	; 0x2c
 800546c:	4621      	mov	r1, r4
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f9da 	bl	8005828 <_printf_common>
 8005474:	3001      	adds	r0, #1
 8005476:	f040 8090 	bne.w	800559a <_printf_float+0x1de>
 800547a:	f04f 30ff 	mov.w	r0, #4294967295
 800547e:	b00d      	add	sp, #52	; 0x34
 8005480:	ecbd 8b02 	vpop	{d8}
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fb54 	bl	8000b3c <__aeabi_dcmpun>
 8005494:	b140      	cbz	r0, 80054a8 <_printf_float+0xec>
 8005496:	464b      	mov	r3, r9
 8005498:	2b00      	cmp	r3, #0
 800549a:	bfbc      	itt	lt
 800549c:	232d      	movlt	r3, #45	; 0x2d
 800549e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054a2:	4a7f      	ldr	r2, [pc, #508]	; (80056a0 <_printf_float+0x2e4>)
 80054a4:	4b7f      	ldr	r3, [pc, #508]	; (80056a4 <_printf_float+0x2e8>)
 80054a6:	e7d1      	b.n	800544c <_printf_float+0x90>
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054ae:	9206      	str	r2, [sp, #24]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	d13f      	bne.n	8005534 <_printf_float+0x178>
 80054b4:	2306      	movs	r3, #6
 80054b6:	6063      	str	r3, [r4, #4]
 80054b8:	9b05      	ldr	r3, [sp, #20]
 80054ba:	6861      	ldr	r1, [r4, #4]
 80054bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054c0:	2300      	movs	r3, #0
 80054c2:	9303      	str	r3, [sp, #12]
 80054c4:	ab0a      	add	r3, sp, #40	; 0x28
 80054c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054ca:	ab09      	add	r3, sp, #36	; 0x24
 80054cc:	ec49 8b10 	vmov	d0, r8, r9
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	6022      	str	r2, [r4, #0]
 80054d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054d8:	4628      	mov	r0, r5
 80054da:	f7ff fecf 	bl	800527c <__cvt>
 80054de:	9b06      	ldr	r3, [sp, #24]
 80054e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054e2:	2b47      	cmp	r3, #71	; 0x47
 80054e4:	4680      	mov	r8, r0
 80054e6:	d108      	bne.n	80054fa <_printf_float+0x13e>
 80054e8:	1cc8      	adds	r0, r1, #3
 80054ea:	db02      	blt.n	80054f2 <_printf_float+0x136>
 80054ec:	6863      	ldr	r3, [r4, #4]
 80054ee:	4299      	cmp	r1, r3
 80054f0:	dd41      	ble.n	8005576 <_printf_float+0x1ba>
 80054f2:	f1ab 0302 	sub.w	r3, fp, #2
 80054f6:	fa5f fb83 	uxtb.w	fp, r3
 80054fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054fe:	d820      	bhi.n	8005542 <_printf_float+0x186>
 8005500:	3901      	subs	r1, #1
 8005502:	465a      	mov	r2, fp
 8005504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005508:	9109      	str	r1, [sp, #36]	; 0x24
 800550a:	f7ff ff19 	bl	8005340 <__exponent>
 800550e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005510:	1813      	adds	r3, r2, r0
 8005512:	2a01      	cmp	r2, #1
 8005514:	4681      	mov	r9, r0
 8005516:	6123      	str	r3, [r4, #16]
 8005518:	dc02      	bgt.n	8005520 <_printf_float+0x164>
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	07d2      	lsls	r2, r2, #31
 800551e:	d501      	bpl.n	8005524 <_printf_float+0x168>
 8005520:	3301      	adds	r3, #1
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005528:	2b00      	cmp	r3, #0
 800552a:	d09c      	beq.n	8005466 <_printf_float+0xaa>
 800552c:	232d      	movs	r3, #45	; 0x2d
 800552e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005532:	e798      	b.n	8005466 <_printf_float+0xaa>
 8005534:	9a06      	ldr	r2, [sp, #24]
 8005536:	2a47      	cmp	r2, #71	; 0x47
 8005538:	d1be      	bne.n	80054b8 <_printf_float+0xfc>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1bc      	bne.n	80054b8 <_printf_float+0xfc>
 800553e:	2301      	movs	r3, #1
 8005540:	e7b9      	b.n	80054b6 <_printf_float+0xfa>
 8005542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005546:	d118      	bne.n	800557a <_printf_float+0x1be>
 8005548:	2900      	cmp	r1, #0
 800554a:	6863      	ldr	r3, [r4, #4]
 800554c:	dd0b      	ble.n	8005566 <_printf_float+0x1aa>
 800554e:	6121      	str	r1, [r4, #16]
 8005550:	b913      	cbnz	r3, 8005558 <_printf_float+0x19c>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	07d0      	lsls	r0, r2, #31
 8005556:	d502      	bpl.n	800555e <_printf_float+0x1a2>
 8005558:	3301      	adds	r3, #1
 800555a:	440b      	add	r3, r1
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005560:	f04f 0900 	mov.w	r9, #0
 8005564:	e7de      	b.n	8005524 <_printf_float+0x168>
 8005566:	b913      	cbnz	r3, 800556e <_printf_float+0x1b2>
 8005568:	6822      	ldr	r2, [r4, #0]
 800556a:	07d2      	lsls	r2, r2, #31
 800556c:	d501      	bpl.n	8005572 <_printf_float+0x1b6>
 800556e:	3302      	adds	r3, #2
 8005570:	e7f4      	b.n	800555c <_printf_float+0x1a0>
 8005572:	2301      	movs	r3, #1
 8005574:	e7f2      	b.n	800555c <_printf_float+0x1a0>
 8005576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800557a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800557c:	4299      	cmp	r1, r3
 800557e:	db05      	blt.n	800558c <_printf_float+0x1d0>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	6121      	str	r1, [r4, #16]
 8005584:	07d8      	lsls	r0, r3, #31
 8005586:	d5ea      	bpl.n	800555e <_printf_float+0x1a2>
 8005588:	1c4b      	adds	r3, r1, #1
 800558a:	e7e7      	b.n	800555c <_printf_float+0x1a0>
 800558c:	2900      	cmp	r1, #0
 800558e:	bfd4      	ite	le
 8005590:	f1c1 0202 	rsble	r2, r1, #2
 8005594:	2201      	movgt	r2, #1
 8005596:	4413      	add	r3, r2
 8005598:	e7e0      	b.n	800555c <_printf_float+0x1a0>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	055a      	lsls	r2, r3, #21
 800559e:	d407      	bmi.n	80055b0 <_printf_float+0x1f4>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	4642      	mov	r2, r8
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	d12c      	bne.n	8005608 <_printf_float+0x24c>
 80055ae:	e764      	b.n	800547a <_printf_float+0xbe>
 80055b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055b4:	f240 80e0 	bls.w	8005778 <_printf_float+0x3bc>
 80055b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055bc:	2200      	movs	r2, #0
 80055be:	2300      	movs	r3, #0
 80055c0:	f7fb fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d034      	beq.n	8005632 <_printf_float+0x276>
 80055c8:	4a37      	ldr	r2, [pc, #220]	; (80056a8 <_printf_float+0x2ec>)
 80055ca:	2301      	movs	r3, #1
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	47b8      	blx	r7
 80055d2:	3001      	adds	r0, #1
 80055d4:	f43f af51 	beq.w	800547a <_printf_float+0xbe>
 80055d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055dc:	429a      	cmp	r2, r3
 80055de:	db02      	blt.n	80055e6 <_printf_float+0x22a>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	07d8      	lsls	r0, r3, #31
 80055e4:	d510      	bpl.n	8005608 <_printf_float+0x24c>
 80055e6:	ee18 3a10 	vmov	r3, s16
 80055ea:	4652      	mov	r2, sl
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f af41 	beq.w	800547a <_printf_float+0xbe>
 80055f8:	f04f 0800 	mov.w	r8, #0
 80055fc:	f104 091a 	add.w	r9, r4, #26
 8005600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005602:	3b01      	subs	r3, #1
 8005604:	4543      	cmp	r3, r8
 8005606:	dc09      	bgt.n	800561c <_printf_float+0x260>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	079b      	lsls	r3, r3, #30
 800560c:	f100 8107 	bmi.w	800581e <_printf_float+0x462>
 8005610:	68e0      	ldr	r0, [r4, #12]
 8005612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005614:	4298      	cmp	r0, r3
 8005616:	bfb8      	it	lt
 8005618:	4618      	movlt	r0, r3
 800561a:	e730      	b.n	800547e <_printf_float+0xc2>
 800561c:	2301      	movs	r3, #1
 800561e:	464a      	mov	r2, r9
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f af27 	beq.w	800547a <_printf_float+0xbe>
 800562c:	f108 0801 	add.w	r8, r8, #1
 8005630:	e7e6      	b.n	8005600 <_printf_float+0x244>
 8005632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc39      	bgt.n	80056ac <_printf_float+0x2f0>
 8005638:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <_printf_float+0x2ec>)
 800563a:	2301      	movs	r3, #1
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f af19 	beq.w	800547a <_printf_float+0xbe>
 8005648:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800564c:	4313      	orrs	r3, r2
 800564e:	d102      	bne.n	8005656 <_printf_float+0x29a>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	07d9      	lsls	r1, r3, #31
 8005654:	d5d8      	bpl.n	8005608 <_printf_float+0x24c>
 8005656:	ee18 3a10 	vmov	r3, s16
 800565a:	4652      	mov	r2, sl
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	f43f af09 	beq.w	800547a <_printf_float+0xbe>
 8005668:	f04f 0900 	mov.w	r9, #0
 800566c:	f104 0a1a 	add.w	sl, r4, #26
 8005670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005672:	425b      	negs	r3, r3
 8005674:	454b      	cmp	r3, r9
 8005676:	dc01      	bgt.n	800567c <_printf_float+0x2c0>
 8005678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567a:	e792      	b.n	80055a2 <_printf_float+0x1e6>
 800567c:	2301      	movs	r3, #1
 800567e:	4652      	mov	r2, sl
 8005680:	4631      	mov	r1, r6
 8005682:	4628      	mov	r0, r5
 8005684:	47b8      	blx	r7
 8005686:	3001      	adds	r0, #1
 8005688:	f43f aef7 	beq.w	800547a <_printf_float+0xbe>
 800568c:	f109 0901 	add.w	r9, r9, #1
 8005690:	e7ee      	b.n	8005670 <_printf_float+0x2b4>
 8005692:	bf00      	nop
 8005694:	7fefffff 	.word	0x7fefffff
 8005698:	08007c81 	.word	0x08007c81
 800569c:	08007c85 	.word	0x08007c85
 80056a0:	08007c89 	.word	0x08007c89
 80056a4:	08007c8d 	.word	0x08007c8d
 80056a8:	08007c91 	.word	0x08007c91
 80056ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056b0:	429a      	cmp	r2, r3
 80056b2:	bfa8      	it	ge
 80056b4:	461a      	movge	r2, r3
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	4691      	mov	r9, r2
 80056ba:	dc37      	bgt.n	800572c <_printf_float+0x370>
 80056bc:	f04f 0b00 	mov.w	fp, #0
 80056c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056c4:	f104 021a 	add.w	r2, r4, #26
 80056c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056ca:	9305      	str	r3, [sp, #20]
 80056cc:	eba3 0309 	sub.w	r3, r3, r9
 80056d0:	455b      	cmp	r3, fp
 80056d2:	dc33      	bgt.n	800573c <_printf_float+0x380>
 80056d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d8:	429a      	cmp	r2, r3
 80056da:	db3b      	blt.n	8005754 <_printf_float+0x398>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	07da      	lsls	r2, r3, #31
 80056e0:	d438      	bmi.n	8005754 <_printf_float+0x398>
 80056e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056e6:	eba2 0903 	sub.w	r9, r2, r3
 80056ea:	9b05      	ldr	r3, [sp, #20]
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	4591      	cmp	r9, r2
 80056f0:	bfa8      	it	ge
 80056f2:	4691      	movge	r9, r2
 80056f4:	f1b9 0f00 	cmp.w	r9, #0
 80056f8:	dc35      	bgt.n	8005766 <_printf_float+0x3aa>
 80056fa:	f04f 0800 	mov.w	r8, #0
 80056fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005702:	f104 0a1a 	add.w	sl, r4, #26
 8005706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	eba3 0309 	sub.w	r3, r3, r9
 8005710:	4543      	cmp	r3, r8
 8005712:	f77f af79 	ble.w	8005608 <_printf_float+0x24c>
 8005716:	2301      	movs	r3, #1
 8005718:	4652      	mov	r2, sl
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	f43f aeaa 	beq.w	800547a <_printf_float+0xbe>
 8005726:	f108 0801 	add.w	r8, r8, #1
 800572a:	e7ec      	b.n	8005706 <_printf_float+0x34a>
 800572c:	4613      	mov	r3, r2
 800572e:	4631      	mov	r1, r6
 8005730:	4642      	mov	r2, r8
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	d1c0      	bne.n	80056bc <_printf_float+0x300>
 800573a:	e69e      	b.n	800547a <_printf_float+0xbe>
 800573c:	2301      	movs	r3, #1
 800573e:	4631      	mov	r1, r6
 8005740:	4628      	mov	r0, r5
 8005742:	9205      	str	r2, [sp, #20]
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f ae97 	beq.w	800547a <_printf_float+0xbe>
 800574c:	9a05      	ldr	r2, [sp, #20]
 800574e:	f10b 0b01 	add.w	fp, fp, #1
 8005752:	e7b9      	b.n	80056c8 <_printf_float+0x30c>
 8005754:	ee18 3a10 	vmov	r3, s16
 8005758:	4652      	mov	r2, sl
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	d1be      	bne.n	80056e2 <_printf_float+0x326>
 8005764:	e689      	b.n	800547a <_printf_float+0xbe>
 8005766:	9a05      	ldr	r2, [sp, #20]
 8005768:	464b      	mov	r3, r9
 800576a:	4442      	add	r2, r8
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	d1c1      	bne.n	80056fa <_printf_float+0x33e>
 8005776:	e680      	b.n	800547a <_printf_float+0xbe>
 8005778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800577a:	2a01      	cmp	r2, #1
 800577c:	dc01      	bgt.n	8005782 <_printf_float+0x3c6>
 800577e:	07db      	lsls	r3, r3, #31
 8005780:	d53a      	bpl.n	80057f8 <_printf_float+0x43c>
 8005782:	2301      	movs	r3, #1
 8005784:	4642      	mov	r2, r8
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	f43f ae74 	beq.w	800547a <_printf_float+0xbe>
 8005792:	ee18 3a10 	vmov	r3, s16
 8005796:	4652      	mov	r2, sl
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f ae6b 	beq.w	800547a <_printf_float+0xbe>
 80057a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057a8:	2200      	movs	r2, #0
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80057b0:	f7fb f992 	bl	8000ad8 <__aeabi_dcmpeq>
 80057b4:	b9d8      	cbnz	r0, 80057ee <_printf_float+0x432>
 80057b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057ba:	f108 0201 	add.w	r2, r8, #1
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	d10e      	bne.n	80057e6 <_printf_float+0x42a>
 80057c8:	e657      	b.n	800547a <_printf_float+0xbe>
 80057ca:	2301      	movs	r3, #1
 80057cc:	4652      	mov	r2, sl
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae50 	beq.w	800547a <_printf_float+0xbe>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e0:	3b01      	subs	r3, #1
 80057e2:	4543      	cmp	r3, r8
 80057e4:	dcf1      	bgt.n	80057ca <_printf_float+0x40e>
 80057e6:	464b      	mov	r3, r9
 80057e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057ec:	e6da      	b.n	80055a4 <_printf_float+0x1e8>
 80057ee:	f04f 0800 	mov.w	r8, #0
 80057f2:	f104 0a1a 	add.w	sl, r4, #26
 80057f6:	e7f2      	b.n	80057de <_printf_float+0x422>
 80057f8:	2301      	movs	r3, #1
 80057fa:	4642      	mov	r2, r8
 80057fc:	e7df      	b.n	80057be <_printf_float+0x402>
 80057fe:	2301      	movs	r3, #1
 8005800:	464a      	mov	r2, r9
 8005802:	4631      	mov	r1, r6
 8005804:	4628      	mov	r0, r5
 8005806:	47b8      	blx	r7
 8005808:	3001      	adds	r0, #1
 800580a:	f43f ae36 	beq.w	800547a <_printf_float+0xbe>
 800580e:	f108 0801 	add.w	r8, r8, #1
 8005812:	68e3      	ldr	r3, [r4, #12]
 8005814:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005816:	1a5b      	subs	r3, r3, r1
 8005818:	4543      	cmp	r3, r8
 800581a:	dcf0      	bgt.n	80057fe <_printf_float+0x442>
 800581c:	e6f8      	b.n	8005610 <_printf_float+0x254>
 800581e:	f04f 0800 	mov.w	r8, #0
 8005822:	f104 0919 	add.w	r9, r4, #25
 8005826:	e7f4      	b.n	8005812 <_printf_float+0x456>

08005828 <_printf_common>:
 8005828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800582c:	4616      	mov	r6, r2
 800582e:	4699      	mov	r9, r3
 8005830:	688a      	ldr	r2, [r1, #8]
 8005832:	690b      	ldr	r3, [r1, #16]
 8005834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005838:	4293      	cmp	r3, r2
 800583a:	bfb8      	it	lt
 800583c:	4613      	movlt	r3, r2
 800583e:	6033      	str	r3, [r6, #0]
 8005840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005844:	4607      	mov	r7, r0
 8005846:	460c      	mov	r4, r1
 8005848:	b10a      	cbz	r2, 800584e <_printf_common+0x26>
 800584a:	3301      	adds	r3, #1
 800584c:	6033      	str	r3, [r6, #0]
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	0699      	lsls	r1, r3, #26
 8005852:	bf42      	ittt	mi
 8005854:	6833      	ldrmi	r3, [r6, #0]
 8005856:	3302      	addmi	r3, #2
 8005858:	6033      	strmi	r3, [r6, #0]
 800585a:	6825      	ldr	r5, [r4, #0]
 800585c:	f015 0506 	ands.w	r5, r5, #6
 8005860:	d106      	bne.n	8005870 <_printf_common+0x48>
 8005862:	f104 0a19 	add.w	sl, r4, #25
 8005866:	68e3      	ldr	r3, [r4, #12]
 8005868:	6832      	ldr	r2, [r6, #0]
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	42ab      	cmp	r3, r5
 800586e:	dc26      	bgt.n	80058be <_printf_common+0x96>
 8005870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005874:	1e13      	subs	r3, r2, #0
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	bf18      	it	ne
 800587a:	2301      	movne	r3, #1
 800587c:	0692      	lsls	r2, r2, #26
 800587e:	d42b      	bmi.n	80058d8 <_printf_common+0xb0>
 8005880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005884:	4649      	mov	r1, r9
 8005886:	4638      	mov	r0, r7
 8005888:	47c0      	blx	r8
 800588a:	3001      	adds	r0, #1
 800588c:	d01e      	beq.n	80058cc <_printf_common+0xa4>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	6922      	ldr	r2, [r4, #16]
 8005892:	f003 0306 	and.w	r3, r3, #6
 8005896:	2b04      	cmp	r3, #4
 8005898:	bf02      	ittt	eq
 800589a:	68e5      	ldreq	r5, [r4, #12]
 800589c:	6833      	ldreq	r3, [r6, #0]
 800589e:	1aed      	subeq	r5, r5, r3
 80058a0:	68a3      	ldr	r3, [r4, #8]
 80058a2:	bf0c      	ite	eq
 80058a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a8:	2500      	movne	r5, #0
 80058aa:	4293      	cmp	r3, r2
 80058ac:	bfc4      	itt	gt
 80058ae:	1a9b      	subgt	r3, r3, r2
 80058b0:	18ed      	addgt	r5, r5, r3
 80058b2:	2600      	movs	r6, #0
 80058b4:	341a      	adds	r4, #26
 80058b6:	42b5      	cmp	r5, r6
 80058b8:	d11a      	bne.n	80058f0 <_printf_common+0xc8>
 80058ba:	2000      	movs	r0, #0
 80058bc:	e008      	b.n	80058d0 <_printf_common+0xa8>
 80058be:	2301      	movs	r3, #1
 80058c0:	4652      	mov	r2, sl
 80058c2:	4649      	mov	r1, r9
 80058c4:	4638      	mov	r0, r7
 80058c6:	47c0      	blx	r8
 80058c8:	3001      	adds	r0, #1
 80058ca:	d103      	bne.n	80058d4 <_printf_common+0xac>
 80058cc:	f04f 30ff 	mov.w	r0, #4294967295
 80058d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d4:	3501      	adds	r5, #1
 80058d6:	e7c6      	b.n	8005866 <_printf_common+0x3e>
 80058d8:	18e1      	adds	r1, r4, r3
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	2030      	movs	r0, #48	; 0x30
 80058de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058e2:	4422      	add	r2, r4
 80058e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058ec:	3302      	adds	r3, #2
 80058ee:	e7c7      	b.n	8005880 <_printf_common+0x58>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4622      	mov	r2, r4
 80058f4:	4649      	mov	r1, r9
 80058f6:	4638      	mov	r0, r7
 80058f8:	47c0      	blx	r8
 80058fa:	3001      	adds	r0, #1
 80058fc:	d0e6      	beq.n	80058cc <_printf_common+0xa4>
 80058fe:	3601      	adds	r6, #1
 8005900:	e7d9      	b.n	80058b6 <_printf_common+0x8e>
	...

08005904 <_printf_i>:
 8005904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	7e0f      	ldrb	r7, [r1, #24]
 800590a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800590c:	2f78      	cmp	r7, #120	; 0x78
 800590e:	4691      	mov	r9, r2
 8005910:	4680      	mov	r8, r0
 8005912:	460c      	mov	r4, r1
 8005914:	469a      	mov	sl, r3
 8005916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800591a:	d807      	bhi.n	800592c <_printf_i+0x28>
 800591c:	2f62      	cmp	r7, #98	; 0x62
 800591e:	d80a      	bhi.n	8005936 <_printf_i+0x32>
 8005920:	2f00      	cmp	r7, #0
 8005922:	f000 80d4 	beq.w	8005ace <_printf_i+0x1ca>
 8005926:	2f58      	cmp	r7, #88	; 0x58
 8005928:	f000 80c0 	beq.w	8005aac <_printf_i+0x1a8>
 800592c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005934:	e03a      	b.n	80059ac <_printf_i+0xa8>
 8005936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800593a:	2b15      	cmp	r3, #21
 800593c:	d8f6      	bhi.n	800592c <_printf_i+0x28>
 800593e:	a101      	add	r1, pc, #4	; (adr r1, 8005944 <_printf_i+0x40>)
 8005940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005944:	0800599d 	.word	0x0800599d
 8005948:	080059b1 	.word	0x080059b1
 800594c:	0800592d 	.word	0x0800592d
 8005950:	0800592d 	.word	0x0800592d
 8005954:	0800592d 	.word	0x0800592d
 8005958:	0800592d 	.word	0x0800592d
 800595c:	080059b1 	.word	0x080059b1
 8005960:	0800592d 	.word	0x0800592d
 8005964:	0800592d 	.word	0x0800592d
 8005968:	0800592d 	.word	0x0800592d
 800596c:	0800592d 	.word	0x0800592d
 8005970:	08005ab5 	.word	0x08005ab5
 8005974:	080059dd 	.word	0x080059dd
 8005978:	08005a6f 	.word	0x08005a6f
 800597c:	0800592d 	.word	0x0800592d
 8005980:	0800592d 	.word	0x0800592d
 8005984:	08005ad7 	.word	0x08005ad7
 8005988:	0800592d 	.word	0x0800592d
 800598c:	080059dd 	.word	0x080059dd
 8005990:	0800592d 	.word	0x0800592d
 8005994:	0800592d 	.word	0x0800592d
 8005998:	08005a77 	.word	0x08005a77
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	1d1a      	adds	r2, r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	602a      	str	r2, [r5, #0]
 80059a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ac:	2301      	movs	r3, #1
 80059ae:	e09f      	b.n	8005af0 <_printf_i+0x1ec>
 80059b0:	6820      	ldr	r0, [r4, #0]
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	0607      	lsls	r7, r0, #24
 80059b6:	f103 0104 	add.w	r1, r3, #4
 80059ba:	6029      	str	r1, [r5, #0]
 80059bc:	d501      	bpl.n	80059c2 <_printf_i+0xbe>
 80059be:	681e      	ldr	r6, [r3, #0]
 80059c0:	e003      	b.n	80059ca <_printf_i+0xc6>
 80059c2:	0646      	lsls	r6, r0, #25
 80059c4:	d5fb      	bpl.n	80059be <_printf_i+0xba>
 80059c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	da03      	bge.n	80059d6 <_printf_i+0xd2>
 80059ce:	232d      	movs	r3, #45	; 0x2d
 80059d0:	4276      	negs	r6, r6
 80059d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d6:	485a      	ldr	r0, [pc, #360]	; (8005b40 <_printf_i+0x23c>)
 80059d8:	230a      	movs	r3, #10
 80059da:	e012      	b.n	8005a02 <_printf_i+0xfe>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	6029      	str	r1, [r5, #0]
 80059e4:	0605      	lsls	r5, r0, #24
 80059e6:	d501      	bpl.n	80059ec <_printf_i+0xe8>
 80059e8:	681e      	ldr	r6, [r3, #0]
 80059ea:	e002      	b.n	80059f2 <_printf_i+0xee>
 80059ec:	0641      	lsls	r1, r0, #25
 80059ee:	d5fb      	bpl.n	80059e8 <_printf_i+0xe4>
 80059f0:	881e      	ldrh	r6, [r3, #0]
 80059f2:	4853      	ldr	r0, [pc, #332]	; (8005b40 <_printf_i+0x23c>)
 80059f4:	2f6f      	cmp	r7, #111	; 0x6f
 80059f6:	bf0c      	ite	eq
 80059f8:	2308      	moveq	r3, #8
 80059fa:	230a      	movne	r3, #10
 80059fc:	2100      	movs	r1, #0
 80059fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a02:	6865      	ldr	r5, [r4, #4]
 8005a04:	60a5      	str	r5, [r4, #8]
 8005a06:	2d00      	cmp	r5, #0
 8005a08:	bfa2      	ittt	ge
 8005a0a:	6821      	ldrge	r1, [r4, #0]
 8005a0c:	f021 0104 	bicge.w	r1, r1, #4
 8005a10:	6021      	strge	r1, [r4, #0]
 8005a12:	b90e      	cbnz	r6, 8005a18 <_printf_i+0x114>
 8005a14:	2d00      	cmp	r5, #0
 8005a16:	d04b      	beq.n	8005ab0 <_printf_i+0x1ac>
 8005a18:	4615      	mov	r5, r2
 8005a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a22:	5dc7      	ldrb	r7, [r0, r7]
 8005a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a28:	4637      	mov	r7, r6
 8005a2a:	42bb      	cmp	r3, r7
 8005a2c:	460e      	mov	r6, r1
 8005a2e:	d9f4      	bls.n	8005a1a <_printf_i+0x116>
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d10b      	bne.n	8005a4c <_printf_i+0x148>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	07de      	lsls	r6, r3, #31
 8005a38:	d508      	bpl.n	8005a4c <_printf_i+0x148>
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	6861      	ldr	r1, [r4, #4]
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	bfde      	ittt	le
 8005a42:	2330      	movle	r3, #48	; 0x30
 8005a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a4c:	1b52      	subs	r2, r2, r5
 8005a4e:	6122      	str	r2, [r4, #16]
 8005a50:	f8cd a000 	str.w	sl, [sp]
 8005a54:	464b      	mov	r3, r9
 8005a56:	aa03      	add	r2, sp, #12
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	f7ff fee4 	bl	8005828 <_printf_common>
 8005a60:	3001      	adds	r0, #1
 8005a62:	d14a      	bne.n	8005afa <_printf_i+0x1f6>
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	b004      	add	sp, #16
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	f043 0320 	orr.w	r3, r3, #32
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	4833      	ldr	r0, [pc, #204]	; (8005b44 <_printf_i+0x240>)
 8005a78:	2778      	movs	r7, #120	; 0x78
 8005a7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	6829      	ldr	r1, [r5, #0]
 8005a82:	061f      	lsls	r7, r3, #24
 8005a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a88:	d402      	bmi.n	8005a90 <_printf_i+0x18c>
 8005a8a:	065f      	lsls	r7, r3, #25
 8005a8c:	bf48      	it	mi
 8005a8e:	b2b6      	uxthmi	r6, r6
 8005a90:	07df      	lsls	r7, r3, #31
 8005a92:	bf48      	it	mi
 8005a94:	f043 0320 	orrmi.w	r3, r3, #32
 8005a98:	6029      	str	r1, [r5, #0]
 8005a9a:	bf48      	it	mi
 8005a9c:	6023      	strmi	r3, [r4, #0]
 8005a9e:	b91e      	cbnz	r6, 8005aa8 <_printf_i+0x1a4>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	f023 0320 	bic.w	r3, r3, #32
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	e7a7      	b.n	80059fc <_printf_i+0xf8>
 8005aac:	4824      	ldr	r0, [pc, #144]	; (8005b40 <_printf_i+0x23c>)
 8005aae:	e7e4      	b.n	8005a7a <_printf_i+0x176>
 8005ab0:	4615      	mov	r5, r2
 8005ab2:	e7bd      	b.n	8005a30 <_printf_i+0x12c>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	6826      	ldr	r6, [r4, #0]
 8005ab8:	6961      	ldr	r1, [r4, #20]
 8005aba:	1d18      	adds	r0, r3, #4
 8005abc:	6028      	str	r0, [r5, #0]
 8005abe:	0635      	lsls	r5, r6, #24
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	d501      	bpl.n	8005ac8 <_printf_i+0x1c4>
 8005ac4:	6019      	str	r1, [r3, #0]
 8005ac6:	e002      	b.n	8005ace <_printf_i+0x1ca>
 8005ac8:	0670      	lsls	r0, r6, #25
 8005aca:	d5fb      	bpl.n	8005ac4 <_printf_i+0x1c0>
 8005acc:	8019      	strh	r1, [r3, #0]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	4615      	mov	r5, r2
 8005ad4:	e7bc      	b.n	8005a50 <_printf_i+0x14c>
 8005ad6:	682b      	ldr	r3, [r5, #0]
 8005ad8:	1d1a      	adds	r2, r3, #4
 8005ada:	602a      	str	r2, [r5, #0]
 8005adc:	681d      	ldr	r5, [r3, #0]
 8005ade:	6862      	ldr	r2, [r4, #4]
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7fa fb7c 	bl	80001e0 <memchr>
 8005ae8:	b108      	cbz	r0, 8005aee <_printf_i+0x1ea>
 8005aea:	1b40      	subs	r0, r0, r5
 8005aec:	6060      	str	r0, [r4, #4]
 8005aee:	6863      	ldr	r3, [r4, #4]
 8005af0:	6123      	str	r3, [r4, #16]
 8005af2:	2300      	movs	r3, #0
 8005af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af8:	e7aa      	b.n	8005a50 <_printf_i+0x14c>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	462a      	mov	r2, r5
 8005afe:	4649      	mov	r1, r9
 8005b00:	4640      	mov	r0, r8
 8005b02:	47d0      	blx	sl
 8005b04:	3001      	adds	r0, #1
 8005b06:	d0ad      	beq.n	8005a64 <_printf_i+0x160>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	079b      	lsls	r3, r3, #30
 8005b0c:	d413      	bmi.n	8005b36 <_printf_i+0x232>
 8005b0e:	68e0      	ldr	r0, [r4, #12]
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	4298      	cmp	r0, r3
 8005b14:	bfb8      	it	lt
 8005b16:	4618      	movlt	r0, r3
 8005b18:	e7a6      	b.n	8005a68 <_printf_i+0x164>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4632      	mov	r2, r6
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4640      	mov	r0, r8
 8005b22:	47d0      	blx	sl
 8005b24:	3001      	adds	r0, #1
 8005b26:	d09d      	beq.n	8005a64 <_printf_i+0x160>
 8005b28:	3501      	adds	r5, #1
 8005b2a:	68e3      	ldr	r3, [r4, #12]
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	1a5b      	subs	r3, r3, r1
 8005b30:	42ab      	cmp	r3, r5
 8005b32:	dcf2      	bgt.n	8005b1a <_printf_i+0x216>
 8005b34:	e7eb      	b.n	8005b0e <_printf_i+0x20a>
 8005b36:	2500      	movs	r5, #0
 8005b38:	f104 0619 	add.w	r6, r4, #25
 8005b3c:	e7f5      	b.n	8005b2a <_printf_i+0x226>
 8005b3e:	bf00      	nop
 8005b40:	08007c93 	.word	0x08007c93
 8005b44:	08007ca4 	.word	0x08007ca4

08005b48 <std>:
 8005b48:	2300      	movs	r3, #0
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b56:	6083      	str	r3, [r0, #8]
 8005b58:	8181      	strh	r1, [r0, #12]
 8005b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b5c:	81c2      	strh	r2, [r0, #14]
 8005b5e:	6183      	str	r3, [r0, #24]
 8005b60:	4619      	mov	r1, r3
 8005b62:	2208      	movs	r2, #8
 8005b64:	305c      	adds	r0, #92	; 0x5c
 8005b66:	f000 f906 	bl	8005d76 <memset>
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <std+0x58>)
 8005b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <std+0x5c>)
 8005b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <std+0x60>)
 8005b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <std+0x64>)
 8005b78:	6323      	str	r3, [r4, #48]	; 0x30
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <std+0x68>)
 8005b7c:	6224      	str	r4, [r4, #32]
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	d006      	beq.n	8005b90 <std+0x48>
 8005b82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b86:	4294      	cmp	r4, r2
 8005b88:	d002      	beq.n	8005b90 <std+0x48>
 8005b8a:	33d0      	adds	r3, #208	; 0xd0
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	d105      	bne.n	8005b9c <std+0x54>
 8005b90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b98:	f000 b96a 	b.w	8005e70 <__retarget_lock_init_recursive>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08005cf1 	.word	0x08005cf1
 8005ba4:	08005d13 	.word	0x08005d13
 8005ba8:	08005d4b 	.word	0x08005d4b
 8005bac:	08005d6f 	.word	0x08005d6f
 8005bb0:	20004bf4 	.word	0x20004bf4

08005bb4 <stdio_exit_handler>:
 8005bb4:	4a02      	ldr	r2, [pc, #8]	; (8005bc0 <stdio_exit_handler+0xc>)
 8005bb6:	4903      	ldr	r1, [pc, #12]	; (8005bc4 <stdio_exit_handler+0x10>)
 8005bb8:	4803      	ldr	r0, [pc, #12]	; (8005bc8 <stdio_exit_handler+0x14>)
 8005bba:	f000 b869 	b.w	8005c90 <_fwalk_sglue>
 8005bbe:	bf00      	nop
 8005bc0:	20000070 	.word	0x20000070
 8005bc4:	08007819 	.word	0x08007819
 8005bc8:	2000007c 	.word	0x2000007c

08005bcc <cleanup_stdio>:
 8005bcc:	6841      	ldr	r1, [r0, #4]
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <cleanup_stdio+0x34>)
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	d001      	beq.n	8005bdc <cleanup_stdio+0x10>
 8005bd8:	f001 fe1e 	bl	8007818 <_fflush_r>
 8005bdc:	68a1      	ldr	r1, [r4, #8]
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <cleanup_stdio+0x38>)
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d002      	beq.n	8005bea <cleanup_stdio+0x1e>
 8005be4:	4620      	mov	r0, r4
 8005be6:	f001 fe17 	bl	8007818 <_fflush_r>
 8005bea:	68e1      	ldr	r1, [r4, #12]
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <cleanup_stdio+0x3c>)
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	d004      	beq.n	8005bfc <cleanup_stdio+0x30>
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf8:	f001 be0e 	b.w	8007818 <_fflush_r>
 8005bfc:	bd10      	pop	{r4, pc}
 8005bfe:	bf00      	nop
 8005c00:	20004bf4 	.word	0x20004bf4
 8005c04:	20004c5c 	.word	0x20004c5c
 8005c08:	20004cc4 	.word	0x20004cc4

08005c0c <global_stdio_init.part.0>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <global_stdio_init.part.0+0x30>)
 8005c10:	4c0b      	ldr	r4, [pc, #44]	; (8005c40 <global_stdio_init.part.0+0x34>)
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <global_stdio_init.part.0+0x38>)
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	4620      	mov	r0, r4
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	f7ff ff94 	bl	8005b48 <std>
 8005c20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c24:	2201      	movs	r2, #1
 8005c26:	2109      	movs	r1, #9
 8005c28:	f7ff ff8e 	bl	8005b48 <std>
 8005c2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c30:	2202      	movs	r2, #2
 8005c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c36:	2112      	movs	r1, #18
 8005c38:	f7ff bf86 	b.w	8005b48 <std>
 8005c3c:	20004d2c 	.word	0x20004d2c
 8005c40:	20004bf4 	.word	0x20004bf4
 8005c44:	08005bb5 	.word	0x08005bb5

08005c48 <__sfp_lock_acquire>:
 8005c48:	4801      	ldr	r0, [pc, #4]	; (8005c50 <__sfp_lock_acquire+0x8>)
 8005c4a:	f000 b912 	b.w	8005e72 <__retarget_lock_acquire_recursive>
 8005c4e:	bf00      	nop
 8005c50:	20004d35 	.word	0x20004d35

08005c54 <__sfp_lock_release>:
 8005c54:	4801      	ldr	r0, [pc, #4]	; (8005c5c <__sfp_lock_release+0x8>)
 8005c56:	f000 b90d 	b.w	8005e74 <__retarget_lock_release_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	20004d35 	.word	0x20004d35

08005c60 <__sinit>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4604      	mov	r4, r0
 8005c64:	f7ff fff0 	bl	8005c48 <__sfp_lock_acquire>
 8005c68:	6a23      	ldr	r3, [r4, #32]
 8005c6a:	b11b      	cbz	r3, 8005c74 <__sinit+0x14>
 8005c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c70:	f7ff bff0 	b.w	8005c54 <__sfp_lock_release>
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <__sinit+0x28>)
 8005c76:	6223      	str	r3, [r4, #32]
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <__sinit+0x2c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f5      	bne.n	8005c6c <__sinit+0xc>
 8005c80:	f7ff ffc4 	bl	8005c0c <global_stdio_init.part.0>
 8005c84:	e7f2      	b.n	8005c6c <__sinit+0xc>
 8005c86:	bf00      	nop
 8005c88:	08005bcd 	.word	0x08005bcd
 8005c8c:	20004d2c 	.word	0x20004d2c

08005c90 <_fwalk_sglue>:
 8005c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c94:	4607      	mov	r7, r0
 8005c96:	4688      	mov	r8, r1
 8005c98:	4614      	mov	r4, r2
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ca4:	d505      	bpl.n	8005cb2 <_fwalk_sglue+0x22>
 8005ca6:	6824      	ldr	r4, [r4, #0]
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	d1f7      	bne.n	8005c9c <_fwalk_sglue+0xc>
 8005cac:	4630      	mov	r0, r6
 8005cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cb2:	89ab      	ldrh	r3, [r5, #12]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d907      	bls.n	8005cc8 <_fwalk_sglue+0x38>
 8005cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	d003      	beq.n	8005cc8 <_fwalk_sglue+0x38>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c0      	blx	r8
 8005cc6:	4306      	orrs	r6, r0
 8005cc8:	3568      	adds	r5, #104	; 0x68
 8005cca:	e7e9      	b.n	8005ca0 <_fwalk_sglue+0x10>

08005ccc <iprintf>:
 8005ccc:	b40f      	push	{r0, r1, r2, r3}
 8005cce:	b507      	push	{r0, r1, r2, lr}
 8005cd0:	4906      	ldr	r1, [pc, #24]	; (8005cec <iprintf+0x20>)
 8005cd2:	ab04      	add	r3, sp, #16
 8005cd4:	6808      	ldr	r0, [r1, #0]
 8005cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cda:	6881      	ldr	r1, [r0, #8]
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	f001 fbfb 	bl	80074d8 <_vfiprintf_r>
 8005ce2:	b003      	add	sp, #12
 8005ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce8:	b004      	add	sp, #16
 8005cea:	4770      	bx	lr
 8005cec:	200000c8 	.word	0x200000c8

08005cf0 <__sread>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf8:	f000 f86c 	bl	8005dd4 <_read_r>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	bfab      	itete	ge
 8005d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d02:	89a3      	ldrhlt	r3, [r4, #12]
 8005d04:	181b      	addge	r3, r3, r0
 8005d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d0a:	bfac      	ite	ge
 8005d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d0e:	81a3      	strhlt	r3, [r4, #12]
 8005d10:	bd10      	pop	{r4, pc}

08005d12 <__swrite>:
 8005d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d16:	461f      	mov	r7, r3
 8005d18:	898b      	ldrh	r3, [r1, #12]
 8005d1a:	05db      	lsls	r3, r3, #23
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	4616      	mov	r6, r2
 8005d22:	d505      	bpl.n	8005d30 <__swrite+0x1e>
 8005d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d28:	2302      	movs	r3, #2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f000 f840 	bl	8005db0 <_lseek_r>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	463b      	mov	r3, r7
 8005d40:	4628      	mov	r0, r5
 8005d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d46:	f000 b857 	b.w	8005df8 <_write_r>

08005d4a <__sseek>:
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d52:	f000 f82d 	bl	8005db0 <_lseek_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	bf15      	itete	ne
 8005d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d66:	81a3      	strheq	r3, [r4, #12]
 8005d68:	bf18      	it	ne
 8005d6a:	81a3      	strhne	r3, [r4, #12]
 8005d6c:	bd10      	pop	{r4, pc}

08005d6e <__sclose>:
 8005d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d72:	f000 b80d 	b.w	8005d90 <_close_r>

08005d76 <memset>:
 8005d76:	4402      	add	r2, r0
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d100      	bne.n	8005d80 <memset+0xa>
 8005d7e:	4770      	bx	lr
 8005d80:	f803 1b01 	strb.w	r1, [r3], #1
 8005d84:	e7f9      	b.n	8005d7a <memset+0x4>
	...

08005d88 <_localeconv_r>:
 8005d88:	4800      	ldr	r0, [pc, #0]	; (8005d8c <_localeconv_r+0x4>)
 8005d8a:	4770      	bx	lr
 8005d8c:	200001bc 	.word	0x200001bc

08005d90 <_close_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d06      	ldr	r5, [pc, #24]	; (8005dac <_close_r+0x1c>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	f7fb fa45 	bl	800122a <_close>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_close_r+0x1a>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_close_r+0x1a>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	20004d30 	.word	0x20004d30

08005db0 <_lseek_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d07      	ldr	r5, [pc, #28]	; (8005dd0 <_lseek_r+0x20>)
 8005db4:	4604      	mov	r4, r0
 8005db6:	4608      	mov	r0, r1
 8005db8:	4611      	mov	r1, r2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f7fb fa5a 	bl	8001278 <_lseek>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_lseek_r+0x1e>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_lseek_r+0x1e>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20004d30 	.word	0x20004d30

08005dd4 <_read_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	; (8005df4 <_read_r+0x20>)
 8005dd8:	4604      	mov	r4, r0
 8005dda:	4608      	mov	r0, r1
 8005ddc:	4611      	mov	r1, r2
 8005dde:	2200      	movs	r2, #0
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fb f9e8 	bl	80011b8 <_read>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_read_r+0x1e>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_read_r+0x1e>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	20004d30 	.word	0x20004d30

08005df8 <_write_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d07      	ldr	r5, [pc, #28]	; (8005e18 <_write_r+0x20>)
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	602a      	str	r2, [r5, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7fb f9f3 	bl	80011f2 <_write>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_write_r+0x1e>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_write_r+0x1e>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	20004d30 	.word	0x20004d30

08005e1c <__errno>:
 8005e1c:	4b01      	ldr	r3, [pc, #4]	; (8005e24 <__errno+0x8>)
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200000c8 	.word	0x200000c8

08005e28 <__libc_init_array>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	4d0d      	ldr	r5, [pc, #52]	; (8005e60 <__libc_init_array+0x38>)
 8005e2c:	4c0d      	ldr	r4, [pc, #52]	; (8005e64 <__libc_init_array+0x3c>)
 8005e2e:	1b64      	subs	r4, r4, r5
 8005e30:	10a4      	asrs	r4, r4, #2
 8005e32:	2600      	movs	r6, #0
 8005e34:	42a6      	cmp	r6, r4
 8005e36:	d109      	bne.n	8005e4c <__libc_init_array+0x24>
 8005e38:	4d0b      	ldr	r5, [pc, #44]	; (8005e68 <__libc_init_array+0x40>)
 8005e3a:	4c0c      	ldr	r4, [pc, #48]	; (8005e6c <__libc_init_array+0x44>)
 8005e3c:	f001 fef0 	bl	8007c20 <_init>
 8005e40:	1b64      	subs	r4, r4, r5
 8005e42:	10a4      	asrs	r4, r4, #2
 8005e44:	2600      	movs	r6, #0
 8005e46:	42a6      	cmp	r6, r4
 8005e48:	d105      	bne.n	8005e56 <__libc_init_array+0x2e>
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e50:	4798      	blx	r3
 8005e52:	3601      	adds	r6, #1
 8005e54:	e7ee      	b.n	8005e34 <__libc_init_array+0xc>
 8005e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5a:	4798      	blx	r3
 8005e5c:	3601      	adds	r6, #1
 8005e5e:	e7f2      	b.n	8005e46 <__libc_init_array+0x1e>
 8005e60:	08007ff4 	.word	0x08007ff4
 8005e64:	08007ff4 	.word	0x08007ff4
 8005e68:	08007ff4 	.word	0x08007ff4
 8005e6c:	08007ff8 	.word	0x08007ff8

08005e70 <__retarget_lock_init_recursive>:
 8005e70:	4770      	bx	lr

08005e72 <__retarget_lock_acquire_recursive>:
 8005e72:	4770      	bx	lr

08005e74 <__retarget_lock_release_recursive>:
 8005e74:	4770      	bx	lr

08005e76 <memcpy>:
 8005e76:	440a      	add	r2, r1
 8005e78:	4291      	cmp	r1, r2
 8005e7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e7e:	d100      	bne.n	8005e82 <memcpy+0xc>
 8005e80:	4770      	bx	lr
 8005e82:	b510      	push	{r4, lr}
 8005e84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e8c:	4291      	cmp	r1, r2
 8005e8e:	d1f9      	bne.n	8005e84 <memcpy+0xe>
 8005e90:	bd10      	pop	{r4, pc}

08005e92 <quorem>:
 8005e92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e96:	6903      	ldr	r3, [r0, #16]
 8005e98:	690c      	ldr	r4, [r1, #16]
 8005e9a:	42a3      	cmp	r3, r4
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	db7e      	blt.n	8005f9e <quorem+0x10c>
 8005ea0:	3c01      	subs	r4, #1
 8005ea2:	f101 0814 	add.w	r8, r1, #20
 8005ea6:	f100 0514 	add.w	r5, r0, #20
 8005eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005eb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ec0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ec4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ec8:	d331      	bcc.n	8005f2e <quorem+0x9c>
 8005eca:	f04f 0e00 	mov.w	lr, #0
 8005ece:	4640      	mov	r0, r8
 8005ed0:	46ac      	mov	ip, r5
 8005ed2:	46f2      	mov	sl, lr
 8005ed4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ed8:	b293      	uxth	r3, r2
 8005eda:	fb06 e303 	mla	r3, r6, r3, lr
 8005ede:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ee2:	0c1a      	lsrs	r2, r3, #16
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ebaa 0303 	sub.w	r3, sl, r3
 8005eea:	f8dc a000 	ldr.w	sl, [ip]
 8005eee:	fa13 f38a 	uxtah	r3, r3, sl
 8005ef2:	fb06 220e 	mla	r2, r6, lr, r2
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	9b00      	ldr	r3, [sp, #0]
 8005efa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005efe:	b292      	uxth	r2, r2
 8005f00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f08:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f0c:	4581      	cmp	r9, r0
 8005f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f12:	f84c 3b04 	str.w	r3, [ip], #4
 8005f16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f1a:	d2db      	bcs.n	8005ed4 <quorem+0x42>
 8005f1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f20:	b92b      	cbnz	r3, 8005f2e <quorem+0x9c>
 8005f22:	9b01      	ldr	r3, [sp, #4]
 8005f24:	3b04      	subs	r3, #4
 8005f26:	429d      	cmp	r5, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	d32c      	bcc.n	8005f86 <quorem+0xf4>
 8005f2c:	613c      	str	r4, [r7, #16]
 8005f2e:	4638      	mov	r0, r7
 8005f30:	f001 f9a8 	bl	8007284 <__mcmp>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	db22      	blt.n	8005f7e <quorem+0xec>
 8005f38:	3601      	adds	r6, #1
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f42:	f8d1 c000 	ldr.w	ip, [r1]
 8005f46:	b293      	uxth	r3, r2
 8005f48:	1ac3      	subs	r3, r0, r3
 8005f4a:	0c12      	lsrs	r2, r2, #16
 8005f4c:	fa13 f38c 	uxtah	r3, r3, ip
 8005f50:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f5e:	45c1      	cmp	r9, r8
 8005f60:	f841 3b04 	str.w	r3, [r1], #4
 8005f64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f68:	d2e9      	bcs.n	8005f3e <quorem+0xac>
 8005f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f72:	b922      	cbnz	r2, 8005f7e <quorem+0xec>
 8005f74:	3b04      	subs	r3, #4
 8005f76:	429d      	cmp	r5, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	d30a      	bcc.n	8005f92 <quorem+0x100>
 8005f7c:	613c      	str	r4, [r7, #16]
 8005f7e:	4630      	mov	r0, r6
 8005f80:	b003      	add	sp, #12
 8005f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	3b04      	subs	r3, #4
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	d1ce      	bne.n	8005f2c <quorem+0x9a>
 8005f8e:	3c01      	subs	r4, #1
 8005f90:	e7c9      	b.n	8005f26 <quorem+0x94>
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	2a00      	cmp	r2, #0
 8005f98:	d1f0      	bne.n	8005f7c <quorem+0xea>
 8005f9a:	3c01      	subs	r4, #1
 8005f9c:	e7eb      	b.n	8005f76 <quorem+0xe4>
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	e7ee      	b.n	8005f80 <quorem+0xee>
 8005fa2:	0000      	movs	r0, r0
 8005fa4:	0000      	movs	r0, r0
	...

08005fa8 <_dtoa_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	ed2d 8b04 	vpush	{d8-d9}
 8005fb0:	69c5      	ldr	r5, [r0, #28]
 8005fb2:	b093      	sub	sp, #76	; 0x4c
 8005fb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fb8:	ec57 6b10 	vmov	r6, r7, d0
 8005fbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fc0:	9107      	str	r1, [sp, #28]
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8005fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8005fc8:	b975      	cbnz	r5, 8005fe8 <_dtoa_r+0x40>
 8005fca:	2010      	movs	r0, #16
 8005fcc:	f000 fe2a 	bl	8006c24 <malloc>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	61e0      	str	r0, [r4, #28]
 8005fd4:	b920      	cbnz	r0, 8005fe0 <_dtoa_r+0x38>
 8005fd6:	4bae      	ldr	r3, [pc, #696]	; (8006290 <_dtoa_r+0x2e8>)
 8005fd8:	21ef      	movs	r1, #239	; 0xef
 8005fda:	48ae      	ldr	r0, [pc, #696]	; (8006294 <_dtoa_r+0x2ec>)
 8005fdc:	f001 fcea 	bl	80079b4 <__assert_func>
 8005fe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fe4:	6005      	str	r5, [r0, #0]
 8005fe6:	60c5      	str	r5, [r0, #12]
 8005fe8:	69e3      	ldr	r3, [r4, #28]
 8005fea:	6819      	ldr	r1, [r3, #0]
 8005fec:	b151      	cbz	r1, 8006004 <_dtoa_r+0x5c>
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	604a      	str	r2, [r1, #4]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4093      	lsls	r3, r2
 8005ff6:	608b      	str	r3, [r1, #8]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 ff07 	bl	8006e0c <_Bfree>
 8005ffe:	69e3      	ldr	r3, [r4, #28]
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	1e3b      	subs	r3, r7, #0
 8006006:	bfbb      	ittet	lt
 8006008:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800600c:	9303      	strlt	r3, [sp, #12]
 800600e:	2300      	movge	r3, #0
 8006010:	2201      	movlt	r2, #1
 8006012:	bfac      	ite	ge
 8006014:	f8c8 3000 	strge.w	r3, [r8]
 8006018:	f8c8 2000 	strlt.w	r2, [r8]
 800601c:	4b9e      	ldr	r3, [pc, #632]	; (8006298 <_dtoa_r+0x2f0>)
 800601e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006022:	ea33 0308 	bics.w	r3, r3, r8
 8006026:	d11b      	bne.n	8006060 <_dtoa_r+0xb8>
 8006028:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800602a:	f242 730f 	movw	r3, #9999	; 0x270f
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006034:	4333      	orrs	r3, r6
 8006036:	f000 8593 	beq.w	8006b60 <_dtoa_r+0xbb8>
 800603a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800603c:	b963      	cbnz	r3, 8006058 <_dtoa_r+0xb0>
 800603e:	4b97      	ldr	r3, [pc, #604]	; (800629c <_dtoa_r+0x2f4>)
 8006040:	e027      	b.n	8006092 <_dtoa_r+0xea>
 8006042:	4b97      	ldr	r3, [pc, #604]	; (80062a0 <_dtoa_r+0x2f8>)
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	9800      	ldr	r0, [sp, #0]
 800604e:	b013      	add	sp, #76	; 0x4c
 8006050:	ecbd 8b04 	vpop	{d8-d9}
 8006054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006058:	4b90      	ldr	r3, [pc, #576]	; (800629c <_dtoa_r+0x2f4>)
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	3303      	adds	r3, #3
 800605e:	e7f3      	b.n	8006048 <_dtoa_r+0xa0>
 8006060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006064:	2200      	movs	r2, #0
 8006066:	ec51 0b17 	vmov	r0, r1, d7
 800606a:	eeb0 8a47 	vmov.f32	s16, s14
 800606e:	eef0 8a67 	vmov.f32	s17, s15
 8006072:	2300      	movs	r3, #0
 8006074:	f7fa fd30 	bl	8000ad8 <__aeabi_dcmpeq>
 8006078:	4681      	mov	r9, r0
 800607a:	b160      	cbz	r0, 8006096 <_dtoa_r+0xee>
 800607c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800607e:	2301      	movs	r3, #1
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8568 	beq.w	8006b5a <_dtoa_r+0xbb2>
 800608a:	4b86      	ldr	r3, [pc, #536]	; (80062a4 <_dtoa_r+0x2fc>)
 800608c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	3b01      	subs	r3, #1
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	e7da      	b.n	800604c <_dtoa_r+0xa4>
 8006096:	aa10      	add	r2, sp, #64	; 0x40
 8006098:	a911      	add	r1, sp, #68	; 0x44
 800609a:	4620      	mov	r0, r4
 800609c:	eeb0 0a48 	vmov.f32	s0, s16
 80060a0:	eef0 0a68 	vmov.f32	s1, s17
 80060a4:	f001 f994 	bl	80073d0 <__d2b>
 80060a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060ac:	4682      	mov	sl, r0
 80060ae:	2d00      	cmp	r5, #0
 80060b0:	d07f      	beq.n	80061b2 <_dtoa_r+0x20a>
 80060b2:	ee18 3a90 	vmov	r3, s17
 80060b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060be:	ec51 0b18 	vmov	r0, r1, d8
 80060c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060ce:	4619      	mov	r1, r3
 80060d0:	2200      	movs	r2, #0
 80060d2:	4b75      	ldr	r3, [pc, #468]	; (80062a8 <_dtoa_r+0x300>)
 80060d4:	f7fa f8e0 	bl	8000298 <__aeabi_dsub>
 80060d8:	a367      	add	r3, pc, #412	; (adr r3, 8006278 <_dtoa_r+0x2d0>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa fa93 	bl	8000608 <__aeabi_dmul>
 80060e2:	a367      	add	r3, pc, #412	; (adr r3, 8006280 <_dtoa_r+0x2d8>)
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f7fa f8d8 	bl	800029c <__adddf3>
 80060ec:	4606      	mov	r6, r0
 80060ee:	4628      	mov	r0, r5
 80060f0:	460f      	mov	r7, r1
 80060f2:	f7fa fa1f 	bl	8000534 <__aeabi_i2d>
 80060f6:	a364      	add	r3, pc, #400	; (adr r3, 8006288 <_dtoa_r+0x2e0>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f7fa fa84 	bl	8000608 <__aeabi_dmul>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4630      	mov	r0, r6
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa f8c8 	bl	800029c <__adddf3>
 800610c:	4606      	mov	r6, r0
 800610e:	460f      	mov	r7, r1
 8006110:	f7fa fd2a 	bl	8000b68 <__aeabi_d2iz>
 8006114:	2200      	movs	r2, #0
 8006116:	4683      	mov	fp, r0
 8006118:	2300      	movs	r3, #0
 800611a:	4630      	mov	r0, r6
 800611c:	4639      	mov	r1, r7
 800611e:	f7fa fce5 	bl	8000aec <__aeabi_dcmplt>
 8006122:	b148      	cbz	r0, 8006138 <_dtoa_r+0x190>
 8006124:	4658      	mov	r0, fp
 8006126:	f7fa fa05 	bl	8000534 <__aeabi_i2d>
 800612a:	4632      	mov	r2, r6
 800612c:	463b      	mov	r3, r7
 800612e:	f7fa fcd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006132:	b908      	cbnz	r0, 8006138 <_dtoa_r+0x190>
 8006134:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006138:	f1bb 0f16 	cmp.w	fp, #22
 800613c:	d857      	bhi.n	80061ee <_dtoa_r+0x246>
 800613e:	4b5b      	ldr	r3, [pc, #364]	; (80062ac <_dtoa_r+0x304>)
 8006140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	ec51 0b18 	vmov	r0, r1, d8
 800614c:	f7fa fcce 	bl	8000aec <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	d04e      	beq.n	80061f2 <_dtoa_r+0x24a>
 8006154:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006158:	2300      	movs	r3, #0
 800615a:	930c      	str	r3, [sp, #48]	; 0x30
 800615c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800615e:	1b5b      	subs	r3, r3, r5
 8006160:	1e5a      	subs	r2, r3, #1
 8006162:	bf45      	ittet	mi
 8006164:	f1c3 0301 	rsbmi	r3, r3, #1
 8006168:	9305      	strmi	r3, [sp, #20]
 800616a:	2300      	movpl	r3, #0
 800616c:	2300      	movmi	r3, #0
 800616e:	9206      	str	r2, [sp, #24]
 8006170:	bf54      	ite	pl
 8006172:	9305      	strpl	r3, [sp, #20]
 8006174:	9306      	strmi	r3, [sp, #24]
 8006176:	f1bb 0f00 	cmp.w	fp, #0
 800617a:	db3c      	blt.n	80061f6 <_dtoa_r+0x24e>
 800617c:	9b06      	ldr	r3, [sp, #24]
 800617e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006182:	445b      	add	r3, fp
 8006184:	9306      	str	r3, [sp, #24]
 8006186:	2300      	movs	r3, #0
 8006188:	9308      	str	r3, [sp, #32]
 800618a:	9b07      	ldr	r3, [sp, #28]
 800618c:	2b09      	cmp	r3, #9
 800618e:	d868      	bhi.n	8006262 <_dtoa_r+0x2ba>
 8006190:	2b05      	cmp	r3, #5
 8006192:	bfc4      	itt	gt
 8006194:	3b04      	subgt	r3, #4
 8006196:	9307      	strgt	r3, [sp, #28]
 8006198:	9b07      	ldr	r3, [sp, #28]
 800619a:	f1a3 0302 	sub.w	r3, r3, #2
 800619e:	bfcc      	ite	gt
 80061a0:	2500      	movgt	r5, #0
 80061a2:	2501      	movle	r5, #1
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	f200 8085 	bhi.w	80062b4 <_dtoa_r+0x30c>
 80061aa:	e8df f003 	tbb	[pc, r3]
 80061ae:	3b2e      	.short	0x3b2e
 80061b0:	5839      	.short	0x5839
 80061b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061b6:	441d      	add	r5, r3
 80061b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061bc:	2b20      	cmp	r3, #32
 80061be:	bfc1      	itttt	gt
 80061c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80061c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061d0:	bfd6      	itet	le
 80061d2:	f1c3 0320 	rsble	r3, r3, #32
 80061d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80061da:	fa06 f003 	lslle.w	r0, r6, r3
 80061de:	f7fa f999 	bl	8000514 <__aeabi_ui2d>
 80061e2:	2201      	movs	r2, #1
 80061e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061e8:	3d01      	subs	r5, #1
 80061ea:	920e      	str	r2, [sp, #56]	; 0x38
 80061ec:	e76f      	b.n	80060ce <_dtoa_r+0x126>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e7b3      	b.n	800615a <_dtoa_r+0x1b2>
 80061f2:	900c      	str	r0, [sp, #48]	; 0x30
 80061f4:	e7b2      	b.n	800615c <_dtoa_r+0x1b4>
 80061f6:	9b05      	ldr	r3, [sp, #20]
 80061f8:	eba3 030b 	sub.w	r3, r3, fp
 80061fc:	9305      	str	r3, [sp, #20]
 80061fe:	f1cb 0300 	rsb	r3, fp, #0
 8006202:	9308      	str	r3, [sp, #32]
 8006204:	2300      	movs	r3, #0
 8006206:	930b      	str	r3, [sp, #44]	; 0x2c
 8006208:	e7bf      	b.n	800618a <_dtoa_r+0x1e2>
 800620a:	2300      	movs	r3, #0
 800620c:	9309      	str	r3, [sp, #36]	; 0x24
 800620e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	dc52      	bgt.n	80062ba <_dtoa_r+0x312>
 8006214:	2301      	movs	r3, #1
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	9304      	str	r3, [sp, #16]
 800621a:	461a      	mov	r2, r3
 800621c:	920a      	str	r2, [sp, #40]	; 0x28
 800621e:	e00b      	b.n	8006238 <_dtoa_r+0x290>
 8006220:	2301      	movs	r3, #1
 8006222:	e7f3      	b.n	800620c <_dtoa_r+0x264>
 8006224:	2300      	movs	r3, #0
 8006226:	9309      	str	r3, [sp, #36]	; 0x24
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	445b      	add	r3, fp
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	3301      	adds	r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	bfb8      	it	lt
 8006236:	2301      	movlt	r3, #1
 8006238:	69e0      	ldr	r0, [r4, #28]
 800623a:	2100      	movs	r1, #0
 800623c:	2204      	movs	r2, #4
 800623e:	f102 0614 	add.w	r6, r2, #20
 8006242:	429e      	cmp	r6, r3
 8006244:	d93d      	bls.n	80062c2 <_dtoa_r+0x31a>
 8006246:	6041      	str	r1, [r0, #4]
 8006248:	4620      	mov	r0, r4
 800624a:	f000 fd9f 	bl	8006d8c <_Balloc>
 800624e:	9000      	str	r0, [sp, #0]
 8006250:	2800      	cmp	r0, #0
 8006252:	d139      	bne.n	80062c8 <_dtoa_r+0x320>
 8006254:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <_dtoa_r+0x308>)
 8006256:	4602      	mov	r2, r0
 8006258:	f240 11af 	movw	r1, #431	; 0x1af
 800625c:	e6bd      	b.n	8005fda <_dtoa_r+0x32>
 800625e:	2301      	movs	r3, #1
 8006260:	e7e1      	b.n	8006226 <_dtoa_r+0x27e>
 8006262:	2501      	movs	r5, #1
 8006264:	2300      	movs	r3, #0
 8006266:	9307      	str	r3, [sp, #28]
 8006268:	9509      	str	r5, [sp, #36]	; 0x24
 800626a:	f04f 33ff 	mov.w	r3, #4294967295
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	2200      	movs	r2, #0
 8006274:	2312      	movs	r3, #18
 8006276:	e7d1      	b.n	800621c <_dtoa_r+0x274>
 8006278:	636f4361 	.word	0x636f4361
 800627c:	3fd287a7 	.word	0x3fd287a7
 8006280:	8b60c8b3 	.word	0x8b60c8b3
 8006284:	3fc68a28 	.word	0x3fc68a28
 8006288:	509f79fb 	.word	0x509f79fb
 800628c:	3fd34413 	.word	0x3fd34413
 8006290:	08007cc2 	.word	0x08007cc2
 8006294:	08007cd9 	.word	0x08007cd9
 8006298:	7ff00000 	.word	0x7ff00000
 800629c:	08007cbe 	.word	0x08007cbe
 80062a0:	08007cb5 	.word	0x08007cb5
 80062a4:	08007c92 	.word	0x08007c92
 80062a8:	3ff80000 	.word	0x3ff80000
 80062ac:	08007dc8 	.word	0x08007dc8
 80062b0:	08007d31 	.word	0x08007d31
 80062b4:	2301      	movs	r3, #1
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
 80062b8:	e7d7      	b.n	800626a <_dtoa_r+0x2c2>
 80062ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	e7ba      	b.n	8006238 <_dtoa_r+0x290>
 80062c2:	3101      	adds	r1, #1
 80062c4:	0052      	lsls	r2, r2, #1
 80062c6:	e7ba      	b.n	800623e <_dtoa_r+0x296>
 80062c8:	69e3      	ldr	r3, [r4, #28]
 80062ca:	9a00      	ldr	r2, [sp, #0]
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	2b0e      	cmp	r3, #14
 80062d2:	f200 80a8 	bhi.w	8006426 <_dtoa_r+0x47e>
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	f000 80a5 	beq.w	8006426 <_dtoa_r+0x47e>
 80062dc:	f1bb 0f00 	cmp.w	fp, #0
 80062e0:	dd38      	ble.n	8006354 <_dtoa_r+0x3ac>
 80062e2:	4bc0      	ldr	r3, [pc, #768]	; (80065e4 <_dtoa_r+0x63c>)
 80062e4:	f00b 020f 	and.w	r2, fp, #15
 80062e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80062f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80062f8:	d019      	beq.n	800632e <_dtoa_r+0x386>
 80062fa:	4bbb      	ldr	r3, [pc, #748]	; (80065e8 <_dtoa_r+0x640>)
 80062fc:	ec51 0b18 	vmov	r0, r1, d8
 8006300:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006304:	f7fa faaa 	bl	800085c <__aeabi_ddiv>
 8006308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800630c:	f008 080f 	and.w	r8, r8, #15
 8006310:	2503      	movs	r5, #3
 8006312:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80065e8 <_dtoa_r+0x640>
 8006316:	f1b8 0f00 	cmp.w	r8, #0
 800631a:	d10a      	bne.n	8006332 <_dtoa_r+0x38a>
 800631c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006320:	4632      	mov	r2, r6
 8006322:	463b      	mov	r3, r7
 8006324:	f7fa fa9a 	bl	800085c <__aeabi_ddiv>
 8006328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800632c:	e02b      	b.n	8006386 <_dtoa_r+0x3de>
 800632e:	2502      	movs	r5, #2
 8006330:	e7ef      	b.n	8006312 <_dtoa_r+0x36a>
 8006332:	f018 0f01 	tst.w	r8, #1
 8006336:	d008      	beq.n	800634a <_dtoa_r+0x3a2>
 8006338:	4630      	mov	r0, r6
 800633a:	4639      	mov	r1, r7
 800633c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006340:	f7fa f962 	bl	8000608 <__aeabi_dmul>
 8006344:	3501      	adds	r5, #1
 8006346:	4606      	mov	r6, r0
 8006348:	460f      	mov	r7, r1
 800634a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800634e:	f109 0908 	add.w	r9, r9, #8
 8006352:	e7e0      	b.n	8006316 <_dtoa_r+0x36e>
 8006354:	f000 809f 	beq.w	8006496 <_dtoa_r+0x4ee>
 8006358:	f1cb 0600 	rsb	r6, fp, #0
 800635c:	4ba1      	ldr	r3, [pc, #644]	; (80065e4 <_dtoa_r+0x63c>)
 800635e:	4fa2      	ldr	r7, [pc, #648]	; (80065e8 <_dtoa_r+0x640>)
 8006360:	f006 020f 	and.w	r2, r6, #15
 8006364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	ec51 0b18 	vmov	r0, r1, d8
 8006370:	f7fa f94a 	bl	8000608 <__aeabi_dmul>
 8006374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006378:	1136      	asrs	r6, r6, #4
 800637a:	2300      	movs	r3, #0
 800637c:	2502      	movs	r5, #2
 800637e:	2e00      	cmp	r6, #0
 8006380:	d17e      	bne.n	8006480 <_dtoa_r+0x4d8>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1d0      	bne.n	8006328 <_dtoa_r+0x380>
 8006386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006388:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8084 	beq.w	800649a <_dtoa_r+0x4f2>
 8006392:	4b96      	ldr	r3, [pc, #600]	; (80065ec <_dtoa_r+0x644>)
 8006394:	2200      	movs	r2, #0
 8006396:	4640      	mov	r0, r8
 8006398:	4649      	mov	r1, r9
 800639a:	f7fa fba7 	bl	8000aec <__aeabi_dcmplt>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d07b      	beq.n	800649a <_dtoa_r+0x4f2>
 80063a2:	9b04      	ldr	r3, [sp, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d078      	beq.n	800649a <_dtoa_r+0x4f2>
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd39      	ble.n	8006422 <_dtoa_r+0x47a>
 80063ae:	4b90      	ldr	r3, [pc, #576]	; (80065f0 <_dtoa_r+0x648>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	4640      	mov	r0, r8
 80063b4:	4649      	mov	r1, r9
 80063b6:	f7fa f927 	bl	8000608 <__aeabi_dmul>
 80063ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063be:	9e01      	ldr	r6, [sp, #4]
 80063c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063c4:	3501      	adds	r5, #1
 80063c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063ca:	4628      	mov	r0, r5
 80063cc:	f7fa f8b2 	bl	8000534 <__aeabi_i2d>
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	f7fa f918 	bl	8000608 <__aeabi_dmul>
 80063d8:	4b86      	ldr	r3, [pc, #536]	; (80065f4 <_dtoa_r+0x64c>)
 80063da:	2200      	movs	r2, #0
 80063dc:	f7f9 ff5e 	bl	800029c <__adddf3>
 80063e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063e8:	9303      	str	r3, [sp, #12]
 80063ea:	2e00      	cmp	r6, #0
 80063ec:	d158      	bne.n	80064a0 <_dtoa_r+0x4f8>
 80063ee:	4b82      	ldr	r3, [pc, #520]	; (80065f8 <_dtoa_r+0x650>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	f7f9 ff4f 	bl	8000298 <__aeabi_dsub>
 80063fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063fe:	4680      	mov	r8, r0
 8006400:	4689      	mov	r9, r1
 8006402:	f7fa fb91 	bl	8000b28 <__aeabi_dcmpgt>
 8006406:	2800      	cmp	r0, #0
 8006408:	f040 8296 	bne.w	8006938 <_dtoa_r+0x990>
 800640c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006410:	4640      	mov	r0, r8
 8006412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006416:	4649      	mov	r1, r9
 8006418:	f7fa fb68 	bl	8000aec <__aeabi_dcmplt>
 800641c:	2800      	cmp	r0, #0
 800641e:	f040 8289 	bne.w	8006934 <_dtoa_r+0x98c>
 8006422:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006428:	2b00      	cmp	r3, #0
 800642a:	f2c0 814e 	blt.w	80066ca <_dtoa_r+0x722>
 800642e:	f1bb 0f0e 	cmp.w	fp, #14
 8006432:	f300 814a 	bgt.w	80066ca <_dtoa_r+0x722>
 8006436:	4b6b      	ldr	r3, [pc, #428]	; (80065e4 <_dtoa_r+0x63c>)
 8006438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800643c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	f280 80dc 	bge.w	8006600 <_dtoa_r+0x658>
 8006448:	9b04      	ldr	r3, [sp, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f300 80d8 	bgt.w	8006600 <_dtoa_r+0x658>
 8006450:	f040 826f 	bne.w	8006932 <_dtoa_r+0x98a>
 8006454:	4b68      	ldr	r3, [pc, #416]	; (80065f8 <_dtoa_r+0x650>)
 8006456:	2200      	movs	r2, #0
 8006458:	4640      	mov	r0, r8
 800645a:	4649      	mov	r1, r9
 800645c:	f7fa f8d4 	bl	8000608 <__aeabi_dmul>
 8006460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006464:	f7fa fb56 	bl	8000b14 <__aeabi_dcmpge>
 8006468:	9e04      	ldr	r6, [sp, #16]
 800646a:	4637      	mov	r7, r6
 800646c:	2800      	cmp	r0, #0
 800646e:	f040 8245 	bne.w	80068fc <_dtoa_r+0x954>
 8006472:	9d00      	ldr	r5, [sp, #0]
 8006474:	2331      	movs	r3, #49	; 0x31
 8006476:	f805 3b01 	strb.w	r3, [r5], #1
 800647a:	f10b 0b01 	add.w	fp, fp, #1
 800647e:	e241      	b.n	8006904 <_dtoa_r+0x95c>
 8006480:	07f2      	lsls	r2, r6, #31
 8006482:	d505      	bpl.n	8006490 <_dtoa_r+0x4e8>
 8006484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006488:	f7fa f8be 	bl	8000608 <__aeabi_dmul>
 800648c:	3501      	adds	r5, #1
 800648e:	2301      	movs	r3, #1
 8006490:	1076      	asrs	r6, r6, #1
 8006492:	3708      	adds	r7, #8
 8006494:	e773      	b.n	800637e <_dtoa_r+0x3d6>
 8006496:	2502      	movs	r5, #2
 8006498:	e775      	b.n	8006386 <_dtoa_r+0x3de>
 800649a:	9e04      	ldr	r6, [sp, #16]
 800649c:	465f      	mov	r7, fp
 800649e:	e792      	b.n	80063c6 <_dtoa_r+0x41e>
 80064a0:	9900      	ldr	r1, [sp, #0]
 80064a2:	4b50      	ldr	r3, [pc, #320]	; (80065e4 <_dtoa_r+0x63c>)
 80064a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064a8:	4431      	add	r1, r6
 80064aa:	9102      	str	r1, [sp, #8]
 80064ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064ae:	eeb0 9a47 	vmov.f32	s18, s14
 80064b2:	eef0 9a67 	vmov.f32	s19, s15
 80064b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064be:	2900      	cmp	r1, #0
 80064c0:	d044      	beq.n	800654c <_dtoa_r+0x5a4>
 80064c2:	494e      	ldr	r1, [pc, #312]	; (80065fc <_dtoa_r+0x654>)
 80064c4:	2000      	movs	r0, #0
 80064c6:	f7fa f9c9 	bl	800085c <__aeabi_ddiv>
 80064ca:	ec53 2b19 	vmov	r2, r3, d9
 80064ce:	f7f9 fee3 	bl	8000298 <__aeabi_dsub>
 80064d2:	9d00      	ldr	r5, [sp, #0]
 80064d4:	ec41 0b19 	vmov	d9, r0, r1
 80064d8:	4649      	mov	r1, r9
 80064da:	4640      	mov	r0, r8
 80064dc:	f7fa fb44 	bl	8000b68 <__aeabi_d2iz>
 80064e0:	4606      	mov	r6, r0
 80064e2:	f7fa f827 	bl	8000534 <__aeabi_i2d>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4640      	mov	r0, r8
 80064ec:	4649      	mov	r1, r9
 80064ee:	f7f9 fed3 	bl	8000298 <__aeabi_dsub>
 80064f2:	3630      	adds	r6, #48	; 0x30
 80064f4:	f805 6b01 	strb.w	r6, [r5], #1
 80064f8:	ec53 2b19 	vmov	r2, r3, d9
 80064fc:	4680      	mov	r8, r0
 80064fe:	4689      	mov	r9, r1
 8006500:	f7fa faf4 	bl	8000aec <__aeabi_dcmplt>
 8006504:	2800      	cmp	r0, #0
 8006506:	d164      	bne.n	80065d2 <_dtoa_r+0x62a>
 8006508:	4642      	mov	r2, r8
 800650a:	464b      	mov	r3, r9
 800650c:	4937      	ldr	r1, [pc, #220]	; (80065ec <_dtoa_r+0x644>)
 800650e:	2000      	movs	r0, #0
 8006510:	f7f9 fec2 	bl	8000298 <__aeabi_dsub>
 8006514:	ec53 2b19 	vmov	r2, r3, d9
 8006518:	f7fa fae8 	bl	8000aec <__aeabi_dcmplt>
 800651c:	2800      	cmp	r0, #0
 800651e:	f040 80b6 	bne.w	800668e <_dtoa_r+0x6e6>
 8006522:	9b02      	ldr	r3, [sp, #8]
 8006524:	429d      	cmp	r5, r3
 8006526:	f43f af7c 	beq.w	8006422 <_dtoa_r+0x47a>
 800652a:	4b31      	ldr	r3, [pc, #196]	; (80065f0 <_dtoa_r+0x648>)
 800652c:	ec51 0b19 	vmov	r0, r1, d9
 8006530:	2200      	movs	r2, #0
 8006532:	f7fa f869 	bl	8000608 <__aeabi_dmul>
 8006536:	4b2e      	ldr	r3, [pc, #184]	; (80065f0 <_dtoa_r+0x648>)
 8006538:	ec41 0b19 	vmov	d9, r0, r1
 800653c:	2200      	movs	r2, #0
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7fa f861 	bl	8000608 <__aeabi_dmul>
 8006546:	4680      	mov	r8, r0
 8006548:	4689      	mov	r9, r1
 800654a:	e7c5      	b.n	80064d8 <_dtoa_r+0x530>
 800654c:	ec51 0b17 	vmov	r0, r1, d7
 8006550:	f7fa f85a 	bl	8000608 <__aeabi_dmul>
 8006554:	9b02      	ldr	r3, [sp, #8]
 8006556:	9d00      	ldr	r5, [sp, #0]
 8006558:	930f      	str	r3, [sp, #60]	; 0x3c
 800655a:	ec41 0b19 	vmov	d9, r0, r1
 800655e:	4649      	mov	r1, r9
 8006560:	4640      	mov	r0, r8
 8006562:	f7fa fb01 	bl	8000b68 <__aeabi_d2iz>
 8006566:	4606      	mov	r6, r0
 8006568:	f7f9 ffe4 	bl	8000534 <__aeabi_i2d>
 800656c:	3630      	adds	r6, #48	; 0x30
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	f7f9 fe8f 	bl	8000298 <__aeabi_dsub>
 800657a:	f805 6b01 	strb.w	r6, [r5], #1
 800657e:	9b02      	ldr	r3, [sp, #8]
 8006580:	429d      	cmp	r5, r3
 8006582:	4680      	mov	r8, r0
 8006584:	4689      	mov	r9, r1
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	d124      	bne.n	80065d6 <_dtoa_r+0x62e>
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <_dtoa_r+0x654>)
 800658e:	ec51 0b19 	vmov	r0, r1, d9
 8006592:	f7f9 fe83 	bl	800029c <__adddf3>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4640      	mov	r0, r8
 800659c:	4649      	mov	r1, r9
 800659e:	f7fa fac3 	bl	8000b28 <__aeabi_dcmpgt>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d173      	bne.n	800668e <_dtoa_r+0x6e6>
 80065a6:	ec53 2b19 	vmov	r2, r3, d9
 80065aa:	4914      	ldr	r1, [pc, #80]	; (80065fc <_dtoa_r+0x654>)
 80065ac:	2000      	movs	r0, #0
 80065ae:	f7f9 fe73 	bl	8000298 <__aeabi_dsub>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7fa fa97 	bl	8000aec <__aeabi_dcmplt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	f43f af2f 	beq.w	8006422 <_dtoa_r+0x47a>
 80065c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065c6:	1e6b      	subs	r3, r5, #1
 80065c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80065ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065ce:	2b30      	cmp	r3, #48	; 0x30
 80065d0:	d0f8      	beq.n	80065c4 <_dtoa_r+0x61c>
 80065d2:	46bb      	mov	fp, r7
 80065d4:	e04a      	b.n	800666c <_dtoa_r+0x6c4>
 80065d6:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <_dtoa_r+0x648>)
 80065d8:	f7fa f816 	bl	8000608 <__aeabi_dmul>
 80065dc:	4680      	mov	r8, r0
 80065de:	4689      	mov	r9, r1
 80065e0:	e7bd      	b.n	800655e <_dtoa_r+0x5b6>
 80065e2:	bf00      	nop
 80065e4:	08007dc8 	.word	0x08007dc8
 80065e8:	08007da0 	.word	0x08007da0
 80065ec:	3ff00000 	.word	0x3ff00000
 80065f0:	40240000 	.word	0x40240000
 80065f4:	401c0000 	.word	0x401c0000
 80065f8:	40140000 	.word	0x40140000
 80065fc:	3fe00000 	.word	0x3fe00000
 8006600:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006604:	9d00      	ldr	r5, [sp, #0]
 8006606:	4642      	mov	r2, r8
 8006608:	464b      	mov	r3, r9
 800660a:	4630      	mov	r0, r6
 800660c:	4639      	mov	r1, r7
 800660e:	f7fa f925 	bl	800085c <__aeabi_ddiv>
 8006612:	f7fa faa9 	bl	8000b68 <__aeabi_d2iz>
 8006616:	9001      	str	r0, [sp, #4]
 8006618:	f7f9 ff8c 	bl	8000534 <__aeabi_i2d>
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	f7f9 fff2 	bl	8000608 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f7f9 fe34 	bl	8000298 <__aeabi_dsub>
 8006630:	9e01      	ldr	r6, [sp, #4]
 8006632:	9f04      	ldr	r7, [sp, #16]
 8006634:	3630      	adds	r6, #48	; 0x30
 8006636:	f805 6b01 	strb.w	r6, [r5], #1
 800663a:	9e00      	ldr	r6, [sp, #0]
 800663c:	1bae      	subs	r6, r5, r6
 800663e:	42b7      	cmp	r7, r6
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	d134      	bne.n	80066b0 <_dtoa_r+0x708>
 8006646:	f7f9 fe29 	bl	800029c <__adddf3>
 800664a:	4642      	mov	r2, r8
 800664c:	464b      	mov	r3, r9
 800664e:	4606      	mov	r6, r0
 8006650:	460f      	mov	r7, r1
 8006652:	f7fa fa69 	bl	8000b28 <__aeabi_dcmpgt>
 8006656:	b9c8      	cbnz	r0, 800668c <_dtoa_r+0x6e4>
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	4630      	mov	r0, r6
 800665e:	4639      	mov	r1, r7
 8006660:	f7fa fa3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006664:	b110      	cbz	r0, 800666c <_dtoa_r+0x6c4>
 8006666:	9b01      	ldr	r3, [sp, #4]
 8006668:	07db      	lsls	r3, r3, #31
 800666a:	d40f      	bmi.n	800668c <_dtoa_r+0x6e4>
 800666c:	4651      	mov	r1, sl
 800666e:	4620      	mov	r0, r4
 8006670:	f000 fbcc 	bl	8006e0c <_Bfree>
 8006674:	2300      	movs	r3, #0
 8006676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006678:	702b      	strb	r3, [r5, #0]
 800667a:	f10b 0301 	add.w	r3, fp, #1
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006682:	2b00      	cmp	r3, #0
 8006684:	f43f ace2 	beq.w	800604c <_dtoa_r+0xa4>
 8006688:	601d      	str	r5, [r3, #0]
 800668a:	e4df      	b.n	800604c <_dtoa_r+0xa4>
 800668c:	465f      	mov	r7, fp
 800668e:	462b      	mov	r3, r5
 8006690:	461d      	mov	r5, r3
 8006692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006696:	2a39      	cmp	r2, #57	; 0x39
 8006698:	d106      	bne.n	80066a8 <_dtoa_r+0x700>
 800669a:	9a00      	ldr	r2, [sp, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d1f7      	bne.n	8006690 <_dtoa_r+0x6e8>
 80066a0:	9900      	ldr	r1, [sp, #0]
 80066a2:	2230      	movs	r2, #48	; 0x30
 80066a4:	3701      	adds	r7, #1
 80066a6:	700a      	strb	r2, [r1, #0]
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	3201      	adds	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e790      	b.n	80065d2 <_dtoa_r+0x62a>
 80066b0:	4ba3      	ldr	r3, [pc, #652]	; (8006940 <_dtoa_r+0x998>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	f7f9 ffa8 	bl	8000608 <__aeabi_dmul>
 80066b8:	2200      	movs	r2, #0
 80066ba:	2300      	movs	r3, #0
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	f7fa fa0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d09e      	beq.n	8006606 <_dtoa_r+0x65e>
 80066c8:	e7d0      	b.n	800666c <_dtoa_r+0x6c4>
 80066ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066cc:	2a00      	cmp	r2, #0
 80066ce:	f000 80ca 	beq.w	8006866 <_dtoa_r+0x8be>
 80066d2:	9a07      	ldr	r2, [sp, #28]
 80066d4:	2a01      	cmp	r2, #1
 80066d6:	f300 80ad 	bgt.w	8006834 <_dtoa_r+0x88c>
 80066da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066dc:	2a00      	cmp	r2, #0
 80066de:	f000 80a5 	beq.w	800682c <_dtoa_r+0x884>
 80066e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066e6:	9e08      	ldr	r6, [sp, #32]
 80066e8:	9d05      	ldr	r5, [sp, #20]
 80066ea:	9a05      	ldr	r2, [sp, #20]
 80066ec:	441a      	add	r2, r3
 80066ee:	9205      	str	r2, [sp, #20]
 80066f0:	9a06      	ldr	r2, [sp, #24]
 80066f2:	2101      	movs	r1, #1
 80066f4:	441a      	add	r2, r3
 80066f6:	4620      	mov	r0, r4
 80066f8:	9206      	str	r2, [sp, #24]
 80066fa:	f000 fc3d 	bl	8006f78 <__i2b>
 80066fe:	4607      	mov	r7, r0
 8006700:	b165      	cbz	r5, 800671c <_dtoa_r+0x774>
 8006702:	9b06      	ldr	r3, [sp, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	dd09      	ble.n	800671c <_dtoa_r+0x774>
 8006708:	42ab      	cmp	r3, r5
 800670a:	9a05      	ldr	r2, [sp, #20]
 800670c:	bfa8      	it	ge
 800670e:	462b      	movge	r3, r5
 8006710:	1ad2      	subs	r2, r2, r3
 8006712:	9205      	str	r2, [sp, #20]
 8006714:	9a06      	ldr	r2, [sp, #24]
 8006716:	1aed      	subs	r5, r5, r3
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	9306      	str	r3, [sp, #24]
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	b1f3      	cbz	r3, 800675e <_dtoa_r+0x7b6>
 8006720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80a3 	beq.w	800686e <_dtoa_r+0x8c6>
 8006728:	2e00      	cmp	r6, #0
 800672a:	dd10      	ble.n	800674e <_dtoa_r+0x7a6>
 800672c:	4639      	mov	r1, r7
 800672e:	4632      	mov	r2, r6
 8006730:	4620      	mov	r0, r4
 8006732:	f000 fce1 	bl	80070f8 <__pow5mult>
 8006736:	4652      	mov	r2, sl
 8006738:	4601      	mov	r1, r0
 800673a:	4607      	mov	r7, r0
 800673c:	4620      	mov	r0, r4
 800673e:	f000 fc31 	bl	8006fa4 <__multiply>
 8006742:	4651      	mov	r1, sl
 8006744:	4680      	mov	r8, r0
 8006746:	4620      	mov	r0, r4
 8006748:	f000 fb60 	bl	8006e0c <_Bfree>
 800674c:	46c2      	mov	sl, r8
 800674e:	9b08      	ldr	r3, [sp, #32]
 8006750:	1b9a      	subs	r2, r3, r6
 8006752:	d004      	beq.n	800675e <_dtoa_r+0x7b6>
 8006754:	4651      	mov	r1, sl
 8006756:	4620      	mov	r0, r4
 8006758:	f000 fcce 	bl	80070f8 <__pow5mult>
 800675c:	4682      	mov	sl, r0
 800675e:	2101      	movs	r1, #1
 8006760:	4620      	mov	r0, r4
 8006762:	f000 fc09 	bl	8006f78 <__i2b>
 8006766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006768:	2b00      	cmp	r3, #0
 800676a:	4606      	mov	r6, r0
 800676c:	f340 8081 	ble.w	8006872 <_dtoa_r+0x8ca>
 8006770:	461a      	mov	r2, r3
 8006772:	4601      	mov	r1, r0
 8006774:	4620      	mov	r0, r4
 8006776:	f000 fcbf 	bl	80070f8 <__pow5mult>
 800677a:	9b07      	ldr	r3, [sp, #28]
 800677c:	2b01      	cmp	r3, #1
 800677e:	4606      	mov	r6, r0
 8006780:	dd7a      	ble.n	8006878 <_dtoa_r+0x8d0>
 8006782:	f04f 0800 	mov.w	r8, #0
 8006786:	6933      	ldr	r3, [r6, #16]
 8006788:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800678c:	6918      	ldr	r0, [r3, #16]
 800678e:	f000 fba5 	bl	8006edc <__hi0bits>
 8006792:	f1c0 0020 	rsb	r0, r0, #32
 8006796:	9b06      	ldr	r3, [sp, #24]
 8006798:	4418      	add	r0, r3
 800679a:	f010 001f 	ands.w	r0, r0, #31
 800679e:	f000 8094 	beq.w	80068ca <_dtoa_r+0x922>
 80067a2:	f1c0 0320 	rsb	r3, r0, #32
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	f340 8085 	ble.w	80068b6 <_dtoa_r+0x90e>
 80067ac:	9b05      	ldr	r3, [sp, #20]
 80067ae:	f1c0 001c 	rsb	r0, r0, #28
 80067b2:	4403      	add	r3, r0
 80067b4:	9305      	str	r3, [sp, #20]
 80067b6:	9b06      	ldr	r3, [sp, #24]
 80067b8:	4403      	add	r3, r0
 80067ba:	4405      	add	r5, r0
 80067bc:	9306      	str	r3, [sp, #24]
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dd05      	ble.n	80067d0 <_dtoa_r+0x828>
 80067c4:	4651      	mov	r1, sl
 80067c6:	461a      	mov	r2, r3
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fcef 	bl	80071ac <__lshift>
 80067ce:	4682      	mov	sl, r0
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dd05      	ble.n	80067e2 <_dtoa_r+0x83a>
 80067d6:	4631      	mov	r1, r6
 80067d8:	461a      	mov	r2, r3
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fce6 	bl	80071ac <__lshift>
 80067e0:	4606      	mov	r6, r0
 80067e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d072      	beq.n	80068ce <_dtoa_r+0x926>
 80067e8:	4631      	mov	r1, r6
 80067ea:	4650      	mov	r0, sl
 80067ec:	f000 fd4a 	bl	8007284 <__mcmp>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	da6c      	bge.n	80068ce <_dtoa_r+0x926>
 80067f4:	2300      	movs	r3, #0
 80067f6:	4651      	mov	r1, sl
 80067f8:	220a      	movs	r2, #10
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 fb28 	bl	8006e50 <__multadd>
 8006800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006806:	4682      	mov	sl, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 81b0 	beq.w	8006b6e <_dtoa_r+0xbc6>
 800680e:	2300      	movs	r3, #0
 8006810:	4639      	mov	r1, r7
 8006812:	220a      	movs	r2, #10
 8006814:	4620      	mov	r0, r4
 8006816:	f000 fb1b 	bl	8006e50 <__multadd>
 800681a:	9b01      	ldr	r3, [sp, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	4607      	mov	r7, r0
 8006820:	f300 8096 	bgt.w	8006950 <_dtoa_r+0x9a8>
 8006824:	9b07      	ldr	r3, [sp, #28]
 8006826:	2b02      	cmp	r3, #2
 8006828:	dc59      	bgt.n	80068de <_dtoa_r+0x936>
 800682a:	e091      	b.n	8006950 <_dtoa_r+0x9a8>
 800682c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800682e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006832:	e758      	b.n	80066e6 <_dtoa_r+0x73e>
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	1e5e      	subs	r6, r3, #1
 8006838:	9b08      	ldr	r3, [sp, #32]
 800683a:	42b3      	cmp	r3, r6
 800683c:	bfbf      	itttt	lt
 800683e:	9b08      	ldrlt	r3, [sp, #32]
 8006840:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006842:	9608      	strlt	r6, [sp, #32]
 8006844:	1af3      	sublt	r3, r6, r3
 8006846:	bfb4      	ite	lt
 8006848:	18d2      	addlt	r2, r2, r3
 800684a:	1b9e      	subge	r6, r3, r6
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	bfbc      	itt	lt
 8006850:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006852:	2600      	movlt	r6, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	bfb7      	itett	lt
 8006858:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800685c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006860:	1a9d      	sublt	r5, r3, r2
 8006862:	2300      	movlt	r3, #0
 8006864:	e741      	b.n	80066ea <_dtoa_r+0x742>
 8006866:	9e08      	ldr	r6, [sp, #32]
 8006868:	9d05      	ldr	r5, [sp, #20]
 800686a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800686c:	e748      	b.n	8006700 <_dtoa_r+0x758>
 800686e:	9a08      	ldr	r2, [sp, #32]
 8006870:	e770      	b.n	8006754 <_dtoa_r+0x7ac>
 8006872:	9b07      	ldr	r3, [sp, #28]
 8006874:	2b01      	cmp	r3, #1
 8006876:	dc19      	bgt.n	80068ac <_dtoa_r+0x904>
 8006878:	9b02      	ldr	r3, [sp, #8]
 800687a:	b9bb      	cbnz	r3, 80068ac <_dtoa_r+0x904>
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006882:	b99b      	cbnz	r3, 80068ac <_dtoa_r+0x904>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800688a:	0d1b      	lsrs	r3, r3, #20
 800688c:	051b      	lsls	r3, r3, #20
 800688e:	b183      	cbz	r3, 80068b2 <_dtoa_r+0x90a>
 8006890:	9b05      	ldr	r3, [sp, #20]
 8006892:	3301      	adds	r3, #1
 8006894:	9305      	str	r3, [sp, #20]
 8006896:	9b06      	ldr	r3, [sp, #24]
 8006898:	3301      	adds	r3, #1
 800689a:	9306      	str	r3, [sp, #24]
 800689c:	f04f 0801 	mov.w	r8, #1
 80068a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f47f af6f 	bne.w	8006786 <_dtoa_r+0x7de>
 80068a8:	2001      	movs	r0, #1
 80068aa:	e774      	b.n	8006796 <_dtoa_r+0x7ee>
 80068ac:	f04f 0800 	mov.w	r8, #0
 80068b0:	e7f6      	b.n	80068a0 <_dtoa_r+0x8f8>
 80068b2:	4698      	mov	r8, r3
 80068b4:	e7f4      	b.n	80068a0 <_dtoa_r+0x8f8>
 80068b6:	d082      	beq.n	80067be <_dtoa_r+0x816>
 80068b8:	9a05      	ldr	r2, [sp, #20]
 80068ba:	331c      	adds	r3, #28
 80068bc:	441a      	add	r2, r3
 80068be:	9205      	str	r2, [sp, #20]
 80068c0:	9a06      	ldr	r2, [sp, #24]
 80068c2:	441a      	add	r2, r3
 80068c4:	441d      	add	r5, r3
 80068c6:	9206      	str	r2, [sp, #24]
 80068c8:	e779      	b.n	80067be <_dtoa_r+0x816>
 80068ca:	4603      	mov	r3, r0
 80068cc:	e7f4      	b.n	80068b8 <_dtoa_r+0x910>
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc37      	bgt.n	8006944 <_dtoa_r+0x99c>
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	dd34      	ble.n	8006944 <_dtoa_r+0x99c>
 80068da:	9b04      	ldr	r3, [sp, #16]
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	9b01      	ldr	r3, [sp, #4]
 80068e0:	b963      	cbnz	r3, 80068fc <_dtoa_r+0x954>
 80068e2:	4631      	mov	r1, r6
 80068e4:	2205      	movs	r2, #5
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 fab2 	bl	8006e50 <__multadd>
 80068ec:	4601      	mov	r1, r0
 80068ee:	4606      	mov	r6, r0
 80068f0:	4650      	mov	r0, sl
 80068f2:	f000 fcc7 	bl	8007284 <__mcmp>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f73f adbb 	bgt.w	8006472 <_dtoa_r+0x4ca>
 80068fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fe:	9d00      	ldr	r5, [sp, #0]
 8006900:	ea6f 0b03 	mvn.w	fp, r3
 8006904:	f04f 0800 	mov.w	r8, #0
 8006908:	4631      	mov	r1, r6
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fa7e 	bl	8006e0c <_Bfree>
 8006910:	2f00      	cmp	r7, #0
 8006912:	f43f aeab 	beq.w	800666c <_dtoa_r+0x6c4>
 8006916:	f1b8 0f00 	cmp.w	r8, #0
 800691a:	d005      	beq.n	8006928 <_dtoa_r+0x980>
 800691c:	45b8      	cmp	r8, r7
 800691e:	d003      	beq.n	8006928 <_dtoa_r+0x980>
 8006920:	4641      	mov	r1, r8
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fa72 	bl	8006e0c <_Bfree>
 8006928:	4639      	mov	r1, r7
 800692a:	4620      	mov	r0, r4
 800692c:	f000 fa6e 	bl	8006e0c <_Bfree>
 8006930:	e69c      	b.n	800666c <_dtoa_r+0x6c4>
 8006932:	2600      	movs	r6, #0
 8006934:	4637      	mov	r7, r6
 8006936:	e7e1      	b.n	80068fc <_dtoa_r+0x954>
 8006938:	46bb      	mov	fp, r7
 800693a:	4637      	mov	r7, r6
 800693c:	e599      	b.n	8006472 <_dtoa_r+0x4ca>
 800693e:	bf00      	nop
 8006940:	40240000 	.word	0x40240000
 8006944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80c8 	beq.w	8006adc <_dtoa_r+0xb34>
 800694c:	9b04      	ldr	r3, [sp, #16]
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	2d00      	cmp	r5, #0
 8006952:	dd05      	ble.n	8006960 <_dtoa_r+0x9b8>
 8006954:	4639      	mov	r1, r7
 8006956:	462a      	mov	r2, r5
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fc27 	bl	80071ac <__lshift>
 800695e:	4607      	mov	r7, r0
 8006960:	f1b8 0f00 	cmp.w	r8, #0
 8006964:	d05b      	beq.n	8006a1e <_dtoa_r+0xa76>
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	4620      	mov	r0, r4
 800696a:	f000 fa0f 	bl	8006d8c <_Balloc>
 800696e:	4605      	mov	r5, r0
 8006970:	b928      	cbnz	r0, 800697e <_dtoa_r+0x9d6>
 8006972:	4b83      	ldr	r3, [pc, #524]	; (8006b80 <_dtoa_r+0xbd8>)
 8006974:	4602      	mov	r2, r0
 8006976:	f240 21ef 	movw	r1, #751	; 0x2ef
 800697a:	f7ff bb2e 	b.w	8005fda <_dtoa_r+0x32>
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	3202      	adds	r2, #2
 8006982:	0092      	lsls	r2, r2, #2
 8006984:	f107 010c 	add.w	r1, r7, #12
 8006988:	300c      	adds	r0, #12
 800698a:	f7ff fa74 	bl	8005e76 <memcpy>
 800698e:	2201      	movs	r2, #1
 8006990:	4629      	mov	r1, r5
 8006992:	4620      	mov	r0, r4
 8006994:	f000 fc0a 	bl	80071ac <__lshift>
 8006998:	9b00      	ldr	r3, [sp, #0]
 800699a:	3301      	adds	r3, #1
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069a2:	4413      	add	r3, r2
 80069a4:	9308      	str	r3, [sp, #32]
 80069a6:	9b02      	ldr	r3, [sp, #8]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	46b8      	mov	r8, r7
 80069ae:	9306      	str	r3, [sp, #24]
 80069b0:	4607      	mov	r7, r0
 80069b2:	9b04      	ldr	r3, [sp, #16]
 80069b4:	4631      	mov	r1, r6
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4650      	mov	r0, sl
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	f7ff fa69 	bl	8005e92 <quorem>
 80069c0:	4641      	mov	r1, r8
 80069c2:	9002      	str	r0, [sp, #8]
 80069c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069c8:	4650      	mov	r0, sl
 80069ca:	f000 fc5b 	bl	8007284 <__mcmp>
 80069ce:	463a      	mov	r2, r7
 80069d0:	9005      	str	r0, [sp, #20]
 80069d2:	4631      	mov	r1, r6
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 fc71 	bl	80072bc <__mdiff>
 80069da:	68c2      	ldr	r2, [r0, #12]
 80069dc:	4605      	mov	r5, r0
 80069de:	bb02      	cbnz	r2, 8006a22 <_dtoa_r+0xa7a>
 80069e0:	4601      	mov	r1, r0
 80069e2:	4650      	mov	r0, sl
 80069e4:	f000 fc4e 	bl	8007284 <__mcmp>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4629      	mov	r1, r5
 80069ec:	4620      	mov	r0, r4
 80069ee:	9209      	str	r2, [sp, #36]	; 0x24
 80069f0:	f000 fa0c 	bl	8006e0c <_Bfree>
 80069f4:	9b07      	ldr	r3, [sp, #28]
 80069f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f8:	9d04      	ldr	r5, [sp, #16]
 80069fa:	ea43 0102 	orr.w	r1, r3, r2
 80069fe:	9b06      	ldr	r3, [sp, #24]
 8006a00:	4319      	orrs	r1, r3
 8006a02:	d110      	bne.n	8006a26 <_dtoa_r+0xa7e>
 8006a04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a08:	d029      	beq.n	8006a5e <_dtoa_r+0xab6>
 8006a0a:	9b05      	ldr	r3, [sp, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dd02      	ble.n	8006a16 <_dtoa_r+0xa6e>
 8006a10:	9b02      	ldr	r3, [sp, #8]
 8006a12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	f883 9000 	strb.w	r9, [r3]
 8006a1c:	e774      	b.n	8006908 <_dtoa_r+0x960>
 8006a1e:	4638      	mov	r0, r7
 8006a20:	e7ba      	b.n	8006998 <_dtoa_r+0x9f0>
 8006a22:	2201      	movs	r2, #1
 8006a24:	e7e1      	b.n	80069ea <_dtoa_r+0xa42>
 8006a26:	9b05      	ldr	r3, [sp, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	db04      	blt.n	8006a36 <_dtoa_r+0xa8e>
 8006a2c:	9907      	ldr	r1, [sp, #28]
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	9906      	ldr	r1, [sp, #24]
 8006a32:	430b      	orrs	r3, r1
 8006a34:	d120      	bne.n	8006a78 <_dtoa_r+0xad0>
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	dded      	ble.n	8006a16 <_dtoa_r+0xa6e>
 8006a3a:	4651      	mov	r1, sl
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 fbb4 	bl	80071ac <__lshift>
 8006a44:	4631      	mov	r1, r6
 8006a46:	4682      	mov	sl, r0
 8006a48:	f000 fc1c 	bl	8007284 <__mcmp>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	dc03      	bgt.n	8006a58 <_dtoa_r+0xab0>
 8006a50:	d1e1      	bne.n	8006a16 <_dtoa_r+0xa6e>
 8006a52:	f019 0f01 	tst.w	r9, #1
 8006a56:	d0de      	beq.n	8006a16 <_dtoa_r+0xa6e>
 8006a58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a5c:	d1d8      	bne.n	8006a10 <_dtoa_r+0xa68>
 8006a5e:	9a01      	ldr	r2, [sp, #4]
 8006a60:	2339      	movs	r3, #57	; 0x39
 8006a62:	7013      	strb	r3, [r2, #0]
 8006a64:	462b      	mov	r3, r5
 8006a66:	461d      	mov	r5, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a6e:	2a39      	cmp	r2, #57	; 0x39
 8006a70:	d06c      	beq.n	8006b4c <_dtoa_r+0xba4>
 8006a72:	3201      	adds	r2, #1
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	e747      	b.n	8006908 <_dtoa_r+0x960>
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	dd07      	ble.n	8006a8c <_dtoa_r+0xae4>
 8006a7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a80:	d0ed      	beq.n	8006a5e <_dtoa_r+0xab6>
 8006a82:	9a01      	ldr	r2, [sp, #4]
 8006a84:	f109 0301 	add.w	r3, r9, #1
 8006a88:	7013      	strb	r3, [r2, #0]
 8006a8a:	e73d      	b.n	8006908 <_dtoa_r+0x960>
 8006a8c:	9b04      	ldr	r3, [sp, #16]
 8006a8e:	9a08      	ldr	r2, [sp, #32]
 8006a90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d043      	beq.n	8006b20 <_dtoa_r+0xb78>
 8006a98:	4651      	mov	r1, sl
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	220a      	movs	r2, #10
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 f9d6 	bl	8006e50 <__multadd>
 8006aa4:	45b8      	cmp	r8, r7
 8006aa6:	4682      	mov	sl, r0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	f04f 020a 	mov.w	r2, #10
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	d107      	bne.n	8006ac6 <_dtoa_r+0xb1e>
 8006ab6:	f000 f9cb 	bl	8006e50 <__multadd>
 8006aba:	4680      	mov	r8, r0
 8006abc:	4607      	mov	r7, r0
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	9304      	str	r3, [sp, #16]
 8006ac4:	e775      	b.n	80069b2 <_dtoa_r+0xa0a>
 8006ac6:	f000 f9c3 	bl	8006e50 <__multadd>
 8006aca:	4639      	mov	r1, r7
 8006acc:	4680      	mov	r8, r0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	220a      	movs	r2, #10
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 f9bc 	bl	8006e50 <__multadd>
 8006ad8:	4607      	mov	r7, r0
 8006ada:	e7f0      	b.n	8006abe <_dtoa_r+0xb16>
 8006adc:	9b04      	ldr	r3, [sp, #16]
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	9d00      	ldr	r5, [sp, #0]
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4650      	mov	r0, sl
 8006ae6:	f7ff f9d4 	bl	8005e92 <quorem>
 8006aea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	f805 9b01 	strb.w	r9, [r5], #1
 8006af4:	1aea      	subs	r2, r5, r3
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	4293      	cmp	r3, r2
 8006afa:	dd07      	ble.n	8006b0c <_dtoa_r+0xb64>
 8006afc:	4651      	mov	r1, sl
 8006afe:	2300      	movs	r3, #0
 8006b00:	220a      	movs	r2, #10
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 f9a4 	bl	8006e50 <__multadd>
 8006b08:	4682      	mov	sl, r0
 8006b0a:	e7ea      	b.n	8006ae2 <_dtoa_r+0xb3a>
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bfc8      	it	gt
 8006b12:	461d      	movgt	r5, r3
 8006b14:	9b00      	ldr	r3, [sp, #0]
 8006b16:	bfd8      	it	le
 8006b18:	2501      	movle	r5, #1
 8006b1a:	441d      	add	r5, r3
 8006b1c:	f04f 0800 	mov.w	r8, #0
 8006b20:	4651      	mov	r1, sl
 8006b22:	2201      	movs	r2, #1
 8006b24:	4620      	mov	r0, r4
 8006b26:	f000 fb41 	bl	80071ac <__lshift>
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	f000 fba9 	bl	8007284 <__mcmp>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	dc96      	bgt.n	8006a64 <_dtoa_r+0xabc>
 8006b36:	d102      	bne.n	8006b3e <_dtoa_r+0xb96>
 8006b38:	f019 0f01 	tst.w	r9, #1
 8006b3c:	d192      	bne.n	8006a64 <_dtoa_r+0xabc>
 8006b3e:	462b      	mov	r3, r5
 8006b40:	461d      	mov	r5, r3
 8006b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b46:	2a30      	cmp	r2, #48	; 0x30
 8006b48:	d0fa      	beq.n	8006b40 <_dtoa_r+0xb98>
 8006b4a:	e6dd      	b.n	8006908 <_dtoa_r+0x960>
 8006b4c:	9a00      	ldr	r2, [sp, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d189      	bne.n	8006a66 <_dtoa_r+0xabe>
 8006b52:	f10b 0b01 	add.w	fp, fp, #1
 8006b56:	2331      	movs	r3, #49	; 0x31
 8006b58:	e796      	b.n	8006a88 <_dtoa_r+0xae0>
 8006b5a:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <_dtoa_r+0xbdc>)
 8006b5c:	f7ff ba99 	b.w	8006092 <_dtoa_r+0xea>
 8006b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f47f aa6d 	bne.w	8006042 <_dtoa_r+0x9a>
 8006b68:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <_dtoa_r+0xbe0>)
 8006b6a:	f7ff ba92 	b.w	8006092 <_dtoa_r+0xea>
 8006b6e:	9b01      	ldr	r3, [sp, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dcb5      	bgt.n	8006ae0 <_dtoa_r+0xb38>
 8006b74:	9b07      	ldr	r3, [sp, #28]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	f73f aeb1 	bgt.w	80068de <_dtoa_r+0x936>
 8006b7c:	e7b0      	b.n	8006ae0 <_dtoa_r+0xb38>
 8006b7e:	bf00      	nop
 8006b80:	08007d31 	.word	0x08007d31
 8006b84:	08007c91 	.word	0x08007c91
 8006b88:	08007cb5 	.word	0x08007cb5

08006b8c <_free_r>:
 8006b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	d044      	beq.n	8006c1c <_free_r+0x90>
 8006b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b96:	9001      	str	r0, [sp, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b9e:	bfb8      	it	lt
 8006ba0:	18e4      	addlt	r4, r4, r3
 8006ba2:	f000 f8e7 	bl	8006d74 <__malloc_lock>
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <_free_r+0x94>)
 8006ba8:	9801      	ldr	r0, [sp, #4]
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	b933      	cbnz	r3, 8006bbc <_free_r+0x30>
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	6014      	str	r4, [r2, #0]
 8006bb2:	b003      	add	sp, #12
 8006bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bb8:	f000 b8e2 	b.w	8006d80 <__malloc_unlock>
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	d908      	bls.n	8006bd2 <_free_r+0x46>
 8006bc0:	6825      	ldr	r5, [r4, #0]
 8006bc2:	1961      	adds	r1, r4, r5
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf01      	itttt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	1949      	addeq	r1, r1, r5
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	e7ed      	b.n	8006bae <_free_r+0x22>
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b10b      	cbz	r3, 8006bdc <_free_r+0x50>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d9fa      	bls.n	8006bd2 <_free_r+0x46>
 8006bdc:	6811      	ldr	r1, [r2, #0]
 8006bde:	1855      	adds	r5, r2, r1
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	d10b      	bne.n	8006bfc <_free_r+0x70>
 8006be4:	6824      	ldr	r4, [r4, #0]
 8006be6:	4421      	add	r1, r4
 8006be8:	1854      	adds	r4, r2, r1
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	d1e0      	bne.n	8006bb2 <_free_r+0x26>
 8006bf0:	681c      	ldr	r4, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	6053      	str	r3, [r2, #4]
 8006bf6:	440c      	add	r4, r1
 8006bf8:	6014      	str	r4, [r2, #0]
 8006bfa:	e7da      	b.n	8006bb2 <_free_r+0x26>
 8006bfc:	d902      	bls.n	8006c04 <_free_r+0x78>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	e7d6      	b.n	8006bb2 <_free_r+0x26>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf04      	itt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	6063      	str	r3, [r4, #4]
 8006c12:	bf04      	itt	eq
 8006c14:	1949      	addeq	r1, r1, r5
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	6054      	str	r4, [r2, #4]
 8006c1a:	e7ca      	b.n	8006bb2 <_free_r+0x26>
 8006c1c:	b003      	add	sp, #12
 8006c1e:	bd30      	pop	{r4, r5, pc}
 8006c20:	20004d38 	.word	0x20004d38

08006c24 <malloc>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <malloc+0xc>)
 8006c26:	4601      	mov	r1, r0
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	f000 b823 	b.w	8006c74 <_malloc_r>
 8006c2e:	bf00      	nop
 8006c30:	200000c8 	.word	0x200000c8

08006c34 <sbrk_aligned>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4e0e      	ldr	r6, [pc, #56]	; (8006c70 <sbrk_aligned+0x3c>)
 8006c38:	460c      	mov	r4, r1
 8006c3a:	6831      	ldr	r1, [r6, #0]
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	b911      	cbnz	r1, 8006c46 <sbrk_aligned+0x12>
 8006c40:	f000 fea8 	bl	8007994 <_sbrk_r>
 8006c44:	6030      	str	r0, [r6, #0]
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 fea3 	bl	8007994 <_sbrk_r>
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d00a      	beq.n	8006c68 <sbrk_aligned+0x34>
 8006c52:	1cc4      	adds	r4, r0, #3
 8006c54:	f024 0403 	bic.w	r4, r4, #3
 8006c58:	42a0      	cmp	r0, r4
 8006c5a:	d007      	beq.n	8006c6c <sbrk_aligned+0x38>
 8006c5c:	1a21      	subs	r1, r4, r0
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fe98 	bl	8007994 <_sbrk_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d101      	bne.n	8006c6c <sbrk_aligned+0x38>
 8006c68:	f04f 34ff 	mov.w	r4, #4294967295
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	20004d3c 	.word	0x20004d3c

08006c74 <_malloc_r>:
 8006c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c78:	1ccd      	adds	r5, r1, #3
 8006c7a:	f025 0503 	bic.w	r5, r5, #3
 8006c7e:	3508      	adds	r5, #8
 8006c80:	2d0c      	cmp	r5, #12
 8006c82:	bf38      	it	cc
 8006c84:	250c      	movcc	r5, #12
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	4607      	mov	r7, r0
 8006c8a:	db01      	blt.n	8006c90 <_malloc_r+0x1c>
 8006c8c:	42a9      	cmp	r1, r5
 8006c8e:	d905      	bls.n	8006c9c <_malloc_r+0x28>
 8006c90:	230c      	movs	r3, #12
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	2600      	movs	r6, #0
 8006c96:	4630      	mov	r0, r6
 8006c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d70 <_malloc_r+0xfc>
 8006ca0:	f000 f868 	bl	8006d74 <__malloc_lock>
 8006ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca8:	461c      	mov	r4, r3
 8006caa:	bb5c      	cbnz	r4, 8006d04 <_malloc_r+0x90>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f7ff ffc0 	bl	8006c34 <sbrk_aligned>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	d155      	bne.n	8006d66 <_malloc_r+0xf2>
 8006cba:	f8d8 4000 	ldr.w	r4, [r8]
 8006cbe:	4626      	mov	r6, r4
 8006cc0:	2e00      	cmp	r6, #0
 8006cc2:	d145      	bne.n	8006d50 <_malloc_r+0xdc>
 8006cc4:	2c00      	cmp	r4, #0
 8006cc6:	d048      	beq.n	8006d5a <_malloc_r+0xe6>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4638      	mov	r0, r7
 8006cce:	eb04 0903 	add.w	r9, r4, r3
 8006cd2:	f000 fe5f 	bl	8007994 <_sbrk_r>
 8006cd6:	4581      	cmp	r9, r0
 8006cd8:	d13f      	bne.n	8006d5a <_malloc_r+0xe6>
 8006cda:	6821      	ldr	r1, [r4, #0]
 8006cdc:	1a6d      	subs	r5, r5, r1
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f7ff ffa7 	bl	8006c34 <sbrk_aligned>
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	d037      	beq.n	8006d5a <_malloc_r+0xe6>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	442b      	add	r3, r5
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d038      	beq.n	8006d6a <_malloc_r+0xf6>
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	42a2      	cmp	r2, r4
 8006cfc:	d12b      	bne.n	8006d56 <_malloc_r+0xe2>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	e00f      	b.n	8006d24 <_malloc_r+0xb0>
 8006d04:	6822      	ldr	r2, [r4, #0]
 8006d06:	1b52      	subs	r2, r2, r5
 8006d08:	d41f      	bmi.n	8006d4a <_malloc_r+0xd6>
 8006d0a:	2a0b      	cmp	r2, #11
 8006d0c:	d917      	bls.n	8006d3e <_malloc_r+0xca>
 8006d0e:	1961      	adds	r1, r4, r5
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	6025      	str	r5, [r4, #0]
 8006d14:	bf18      	it	ne
 8006d16:	6059      	strne	r1, [r3, #4]
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	bf08      	it	eq
 8006d1c:	f8c8 1000 	streq.w	r1, [r8]
 8006d20:	5162      	str	r2, [r4, r5]
 8006d22:	604b      	str	r3, [r1, #4]
 8006d24:	4638      	mov	r0, r7
 8006d26:	f104 060b 	add.w	r6, r4, #11
 8006d2a:	f000 f829 	bl	8006d80 <__malloc_unlock>
 8006d2e:	f026 0607 	bic.w	r6, r6, #7
 8006d32:	1d23      	adds	r3, r4, #4
 8006d34:	1af2      	subs	r2, r6, r3
 8006d36:	d0ae      	beq.n	8006c96 <_malloc_r+0x22>
 8006d38:	1b9b      	subs	r3, r3, r6
 8006d3a:	50a3      	str	r3, [r4, r2]
 8006d3c:	e7ab      	b.n	8006c96 <_malloc_r+0x22>
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	6862      	ldr	r2, [r4, #4]
 8006d42:	d1dd      	bne.n	8006d00 <_malloc_r+0x8c>
 8006d44:	f8c8 2000 	str.w	r2, [r8]
 8006d48:	e7ec      	b.n	8006d24 <_malloc_r+0xb0>
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	6864      	ldr	r4, [r4, #4]
 8006d4e:	e7ac      	b.n	8006caa <_malloc_r+0x36>
 8006d50:	4634      	mov	r4, r6
 8006d52:	6876      	ldr	r6, [r6, #4]
 8006d54:	e7b4      	b.n	8006cc0 <_malloc_r+0x4c>
 8006d56:	4613      	mov	r3, r2
 8006d58:	e7cc      	b.n	8006cf4 <_malloc_r+0x80>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f000 f80e 	bl	8006d80 <__malloc_unlock>
 8006d64:	e797      	b.n	8006c96 <_malloc_r+0x22>
 8006d66:	6025      	str	r5, [r4, #0]
 8006d68:	e7dc      	b.n	8006d24 <_malloc_r+0xb0>
 8006d6a:	605b      	str	r3, [r3, #4]
 8006d6c:	deff      	udf	#255	; 0xff
 8006d6e:	bf00      	nop
 8006d70:	20004d38 	.word	0x20004d38

08006d74 <__malloc_lock>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__malloc_lock+0x8>)
 8006d76:	f7ff b87c 	b.w	8005e72 <__retarget_lock_acquire_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	20004d34 	.word	0x20004d34

08006d80 <__malloc_unlock>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__malloc_unlock+0x8>)
 8006d82:	f7ff b877 	b.w	8005e74 <__retarget_lock_release_recursive>
 8006d86:	bf00      	nop
 8006d88:	20004d34 	.word	0x20004d34

08006d8c <_Balloc>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	69c6      	ldr	r6, [r0, #28]
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	b976      	cbnz	r6, 8006db4 <_Balloc+0x28>
 8006d96:	2010      	movs	r0, #16
 8006d98:	f7ff ff44 	bl	8006c24 <malloc>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	61e0      	str	r0, [r4, #28]
 8006da0:	b920      	cbnz	r0, 8006dac <_Balloc+0x20>
 8006da2:	4b18      	ldr	r3, [pc, #96]	; (8006e04 <_Balloc+0x78>)
 8006da4:	4818      	ldr	r0, [pc, #96]	; (8006e08 <_Balloc+0x7c>)
 8006da6:	216b      	movs	r1, #107	; 0x6b
 8006da8:	f000 fe04 	bl	80079b4 <__assert_func>
 8006dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006db0:	6006      	str	r6, [r0, #0]
 8006db2:	60c6      	str	r6, [r0, #12]
 8006db4:	69e6      	ldr	r6, [r4, #28]
 8006db6:	68f3      	ldr	r3, [r6, #12]
 8006db8:	b183      	cbz	r3, 8006ddc <_Balloc+0x50>
 8006dba:	69e3      	ldr	r3, [r4, #28]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dc2:	b9b8      	cbnz	r0, 8006df4 <_Balloc+0x68>
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dca:	1d72      	adds	r2, r6, #5
 8006dcc:	0092      	lsls	r2, r2, #2
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 fe0e 	bl	80079f0 <_calloc_r>
 8006dd4:	b160      	cbz	r0, 8006df0 <_Balloc+0x64>
 8006dd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dda:	e00e      	b.n	8006dfa <_Balloc+0x6e>
 8006ddc:	2221      	movs	r2, #33	; 0x21
 8006dde:	2104      	movs	r1, #4
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fe05 	bl	80079f0 <_calloc_r>
 8006de6:	69e3      	ldr	r3, [r4, #28]
 8006de8:	60f0      	str	r0, [r6, #12]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e4      	bne.n	8006dba <_Balloc+0x2e>
 8006df0:	2000      	movs	r0, #0
 8006df2:	bd70      	pop	{r4, r5, r6, pc}
 8006df4:	6802      	ldr	r2, [r0, #0]
 8006df6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e00:	e7f7      	b.n	8006df2 <_Balloc+0x66>
 8006e02:	bf00      	nop
 8006e04:	08007cc2 	.word	0x08007cc2
 8006e08:	08007d42 	.word	0x08007d42

08006e0c <_Bfree>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	69c6      	ldr	r6, [r0, #28]
 8006e10:	4605      	mov	r5, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	b976      	cbnz	r6, 8006e34 <_Bfree+0x28>
 8006e16:	2010      	movs	r0, #16
 8006e18:	f7ff ff04 	bl	8006c24 <malloc>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	61e8      	str	r0, [r5, #28]
 8006e20:	b920      	cbnz	r0, 8006e2c <_Bfree+0x20>
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <_Bfree+0x3c>)
 8006e24:	4809      	ldr	r0, [pc, #36]	; (8006e4c <_Bfree+0x40>)
 8006e26:	218f      	movs	r1, #143	; 0x8f
 8006e28:	f000 fdc4 	bl	80079b4 <__assert_func>
 8006e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e30:	6006      	str	r6, [r0, #0]
 8006e32:	60c6      	str	r6, [r0, #12]
 8006e34:	b13c      	cbz	r4, 8006e46 <_Bfree+0x3a>
 8006e36:	69eb      	ldr	r3, [r5, #28]
 8006e38:	6862      	ldr	r2, [r4, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e40:	6021      	str	r1, [r4, #0]
 8006e42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	08007cc2 	.word	0x08007cc2
 8006e4c:	08007d42 	.word	0x08007d42

08006e50 <__multadd>:
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	690d      	ldr	r5, [r1, #16]
 8006e56:	4607      	mov	r7, r0
 8006e58:	460c      	mov	r4, r1
 8006e5a:	461e      	mov	r6, r3
 8006e5c:	f101 0c14 	add.w	ip, r1, #20
 8006e60:	2000      	movs	r0, #0
 8006e62:	f8dc 3000 	ldr.w	r3, [ip]
 8006e66:	b299      	uxth	r1, r3
 8006e68:	fb02 6101 	mla	r1, r2, r1, r6
 8006e6c:	0c1e      	lsrs	r6, r3, #16
 8006e6e:	0c0b      	lsrs	r3, r1, #16
 8006e70:	fb02 3306 	mla	r3, r2, r6, r3
 8006e74:	b289      	uxth	r1, r1
 8006e76:	3001      	adds	r0, #1
 8006e78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e7c:	4285      	cmp	r5, r0
 8006e7e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e86:	dcec      	bgt.n	8006e62 <__multadd+0x12>
 8006e88:	b30e      	cbz	r6, 8006ece <__multadd+0x7e>
 8006e8a:	68a3      	ldr	r3, [r4, #8]
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	dc19      	bgt.n	8006ec4 <__multadd+0x74>
 8006e90:	6861      	ldr	r1, [r4, #4]
 8006e92:	4638      	mov	r0, r7
 8006e94:	3101      	adds	r1, #1
 8006e96:	f7ff ff79 	bl	8006d8c <_Balloc>
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	b928      	cbnz	r0, 8006eaa <__multadd+0x5a>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <__multadd+0x84>)
 8006ea2:	480d      	ldr	r0, [pc, #52]	; (8006ed8 <__multadd+0x88>)
 8006ea4:	21ba      	movs	r1, #186	; 0xba
 8006ea6:	f000 fd85 	bl	80079b4 <__assert_func>
 8006eaa:	6922      	ldr	r2, [r4, #16]
 8006eac:	3202      	adds	r2, #2
 8006eae:	f104 010c 	add.w	r1, r4, #12
 8006eb2:	0092      	lsls	r2, r2, #2
 8006eb4:	300c      	adds	r0, #12
 8006eb6:	f7fe ffde 	bl	8005e76 <memcpy>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	f7ff ffa5 	bl	8006e0c <_Bfree>
 8006ec2:	4644      	mov	r4, r8
 8006ec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ec8:	3501      	adds	r5, #1
 8006eca:	615e      	str	r6, [r3, #20]
 8006ecc:	6125      	str	r5, [r4, #16]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed4:	08007d31 	.word	0x08007d31
 8006ed8:	08007d42 	.word	0x08007d42

08006edc <__hi0bits>:
 8006edc:	0c03      	lsrs	r3, r0, #16
 8006ede:	041b      	lsls	r3, r3, #16
 8006ee0:	b9d3      	cbnz	r3, 8006f18 <__hi0bits+0x3c>
 8006ee2:	0400      	lsls	r0, r0, #16
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006eea:	bf04      	itt	eq
 8006eec:	0200      	lsleq	r0, r0, #8
 8006eee:	3308      	addeq	r3, #8
 8006ef0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ef4:	bf04      	itt	eq
 8006ef6:	0100      	lsleq	r0, r0, #4
 8006ef8:	3304      	addeq	r3, #4
 8006efa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006efe:	bf04      	itt	eq
 8006f00:	0080      	lsleq	r0, r0, #2
 8006f02:	3302      	addeq	r3, #2
 8006f04:	2800      	cmp	r0, #0
 8006f06:	db05      	blt.n	8006f14 <__hi0bits+0x38>
 8006f08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f0c:	f103 0301 	add.w	r3, r3, #1
 8006f10:	bf08      	it	eq
 8006f12:	2320      	moveq	r3, #32
 8006f14:	4618      	mov	r0, r3
 8006f16:	4770      	bx	lr
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e7e4      	b.n	8006ee6 <__hi0bits+0xa>

08006f1c <__lo0bits>:
 8006f1c:	6803      	ldr	r3, [r0, #0]
 8006f1e:	f013 0207 	ands.w	r2, r3, #7
 8006f22:	d00c      	beq.n	8006f3e <__lo0bits+0x22>
 8006f24:	07d9      	lsls	r1, r3, #31
 8006f26:	d422      	bmi.n	8006f6e <__lo0bits+0x52>
 8006f28:	079a      	lsls	r2, r3, #30
 8006f2a:	bf49      	itett	mi
 8006f2c:	085b      	lsrmi	r3, r3, #1
 8006f2e:	089b      	lsrpl	r3, r3, #2
 8006f30:	6003      	strmi	r3, [r0, #0]
 8006f32:	2201      	movmi	r2, #1
 8006f34:	bf5c      	itt	pl
 8006f36:	6003      	strpl	r3, [r0, #0]
 8006f38:	2202      	movpl	r2, #2
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	4770      	bx	lr
 8006f3e:	b299      	uxth	r1, r3
 8006f40:	b909      	cbnz	r1, 8006f46 <__lo0bits+0x2a>
 8006f42:	0c1b      	lsrs	r3, r3, #16
 8006f44:	2210      	movs	r2, #16
 8006f46:	b2d9      	uxtb	r1, r3
 8006f48:	b909      	cbnz	r1, 8006f4e <__lo0bits+0x32>
 8006f4a:	3208      	adds	r2, #8
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	0719      	lsls	r1, r3, #28
 8006f50:	bf04      	itt	eq
 8006f52:	091b      	lsreq	r3, r3, #4
 8006f54:	3204      	addeq	r2, #4
 8006f56:	0799      	lsls	r1, r3, #30
 8006f58:	bf04      	itt	eq
 8006f5a:	089b      	lsreq	r3, r3, #2
 8006f5c:	3202      	addeq	r2, #2
 8006f5e:	07d9      	lsls	r1, r3, #31
 8006f60:	d403      	bmi.n	8006f6a <__lo0bits+0x4e>
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	f102 0201 	add.w	r2, r2, #1
 8006f68:	d003      	beq.n	8006f72 <__lo0bits+0x56>
 8006f6a:	6003      	str	r3, [r0, #0]
 8006f6c:	e7e5      	b.n	8006f3a <__lo0bits+0x1e>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	e7e3      	b.n	8006f3a <__lo0bits+0x1e>
 8006f72:	2220      	movs	r2, #32
 8006f74:	e7e1      	b.n	8006f3a <__lo0bits+0x1e>
	...

08006f78 <__i2b>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	f7ff ff05 	bl	8006d8c <_Balloc>
 8006f82:	4602      	mov	r2, r0
 8006f84:	b928      	cbnz	r0, 8006f92 <__i2b+0x1a>
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <__i2b+0x24>)
 8006f88:	4805      	ldr	r0, [pc, #20]	; (8006fa0 <__i2b+0x28>)
 8006f8a:	f240 1145 	movw	r1, #325	; 0x145
 8006f8e:	f000 fd11 	bl	80079b4 <__assert_func>
 8006f92:	2301      	movs	r3, #1
 8006f94:	6144      	str	r4, [r0, #20]
 8006f96:	6103      	str	r3, [r0, #16]
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	bf00      	nop
 8006f9c:	08007d31 	.word	0x08007d31
 8006fa0:	08007d42 	.word	0x08007d42

08006fa4 <__multiply>:
 8006fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	4691      	mov	r9, r2
 8006faa:	690a      	ldr	r2, [r1, #16]
 8006fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	bfb8      	it	lt
 8006fb4:	460b      	movlt	r3, r1
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	bfbc      	itt	lt
 8006fba:	464c      	movlt	r4, r9
 8006fbc:	4699      	movlt	r9, r3
 8006fbe:	6927      	ldr	r7, [r4, #16]
 8006fc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fc4:	68a3      	ldr	r3, [r4, #8]
 8006fc6:	6861      	ldr	r1, [r4, #4]
 8006fc8:	eb07 060a 	add.w	r6, r7, sl
 8006fcc:	42b3      	cmp	r3, r6
 8006fce:	b085      	sub	sp, #20
 8006fd0:	bfb8      	it	lt
 8006fd2:	3101      	addlt	r1, #1
 8006fd4:	f7ff feda 	bl	8006d8c <_Balloc>
 8006fd8:	b930      	cbnz	r0, 8006fe8 <__multiply+0x44>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	4b44      	ldr	r3, [pc, #272]	; (80070f0 <__multiply+0x14c>)
 8006fde:	4845      	ldr	r0, [pc, #276]	; (80070f4 <__multiply+0x150>)
 8006fe0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fe4:	f000 fce6 	bl	80079b4 <__assert_func>
 8006fe8:	f100 0514 	add.w	r5, r0, #20
 8006fec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4543      	cmp	r3, r8
 8006ff6:	d321      	bcc.n	800703c <__multiply+0x98>
 8006ff8:	f104 0314 	add.w	r3, r4, #20
 8006ffc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007000:	f109 0314 	add.w	r3, r9, #20
 8007004:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007008:	9202      	str	r2, [sp, #8]
 800700a:	1b3a      	subs	r2, r7, r4
 800700c:	3a15      	subs	r2, #21
 800700e:	f022 0203 	bic.w	r2, r2, #3
 8007012:	3204      	adds	r2, #4
 8007014:	f104 0115 	add.w	r1, r4, #21
 8007018:	428f      	cmp	r7, r1
 800701a:	bf38      	it	cc
 800701c:	2204      	movcc	r2, #4
 800701e:	9201      	str	r2, [sp, #4]
 8007020:	9a02      	ldr	r2, [sp, #8]
 8007022:	9303      	str	r3, [sp, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d80c      	bhi.n	8007042 <__multiply+0x9e>
 8007028:	2e00      	cmp	r6, #0
 800702a:	dd03      	ble.n	8007034 <__multiply+0x90>
 800702c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007030:	2b00      	cmp	r3, #0
 8007032:	d05b      	beq.n	80070ec <__multiply+0x148>
 8007034:	6106      	str	r6, [r0, #16]
 8007036:	b005      	add	sp, #20
 8007038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703c:	f843 2b04 	str.w	r2, [r3], #4
 8007040:	e7d8      	b.n	8006ff4 <__multiply+0x50>
 8007042:	f8b3 a000 	ldrh.w	sl, [r3]
 8007046:	f1ba 0f00 	cmp.w	sl, #0
 800704a:	d024      	beq.n	8007096 <__multiply+0xf2>
 800704c:	f104 0e14 	add.w	lr, r4, #20
 8007050:	46a9      	mov	r9, r5
 8007052:	f04f 0c00 	mov.w	ip, #0
 8007056:	f85e 2b04 	ldr.w	r2, [lr], #4
 800705a:	f8d9 1000 	ldr.w	r1, [r9]
 800705e:	fa1f fb82 	uxth.w	fp, r2
 8007062:	b289      	uxth	r1, r1
 8007064:	fb0a 110b 	mla	r1, sl, fp, r1
 8007068:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800706c:	f8d9 2000 	ldr.w	r2, [r9]
 8007070:	4461      	add	r1, ip
 8007072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007076:	fb0a c20b 	mla	r2, sl, fp, ip
 800707a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800707e:	b289      	uxth	r1, r1
 8007080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007084:	4577      	cmp	r7, lr
 8007086:	f849 1b04 	str.w	r1, [r9], #4
 800708a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800708e:	d8e2      	bhi.n	8007056 <__multiply+0xb2>
 8007090:	9a01      	ldr	r2, [sp, #4]
 8007092:	f845 c002 	str.w	ip, [r5, r2]
 8007096:	9a03      	ldr	r2, [sp, #12]
 8007098:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800709c:	3304      	adds	r3, #4
 800709e:	f1b9 0f00 	cmp.w	r9, #0
 80070a2:	d021      	beq.n	80070e8 <__multiply+0x144>
 80070a4:	6829      	ldr	r1, [r5, #0]
 80070a6:	f104 0c14 	add.w	ip, r4, #20
 80070aa:	46ae      	mov	lr, r5
 80070ac:	f04f 0a00 	mov.w	sl, #0
 80070b0:	f8bc b000 	ldrh.w	fp, [ip]
 80070b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070b8:	fb09 220b 	mla	r2, r9, fp, r2
 80070bc:	4452      	add	r2, sl
 80070be:	b289      	uxth	r1, r1
 80070c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070c4:	f84e 1b04 	str.w	r1, [lr], #4
 80070c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070d0:	f8be 1000 	ldrh.w	r1, [lr]
 80070d4:	fb09 110a 	mla	r1, r9, sl, r1
 80070d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070dc:	4567      	cmp	r7, ip
 80070de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070e2:	d8e5      	bhi.n	80070b0 <__multiply+0x10c>
 80070e4:	9a01      	ldr	r2, [sp, #4]
 80070e6:	50a9      	str	r1, [r5, r2]
 80070e8:	3504      	adds	r5, #4
 80070ea:	e799      	b.n	8007020 <__multiply+0x7c>
 80070ec:	3e01      	subs	r6, #1
 80070ee:	e79b      	b.n	8007028 <__multiply+0x84>
 80070f0:	08007d31 	.word	0x08007d31
 80070f4:	08007d42 	.word	0x08007d42

080070f8 <__pow5mult>:
 80070f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070fc:	4615      	mov	r5, r2
 80070fe:	f012 0203 	ands.w	r2, r2, #3
 8007102:	4606      	mov	r6, r0
 8007104:	460f      	mov	r7, r1
 8007106:	d007      	beq.n	8007118 <__pow5mult+0x20>
 8007108:	4c25      	ldr	r4, [pc, #148]	; (80071a0 <__pow5mult+0xa8>)
 800710a:	3a01      	subs	r2, #1
 800710c:	2300      	movs	r3, #0
 800710e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007112:	f7ff fe9d 	bl	8006e50 <__multadd>
 8007116:	4607      	mov	r7, r0
 8007118:	10ad      	asrs	r5, r5, #2
 800711a:	d03d      	beq.n	8007198 <__pow5mult+0xa0>
 800711c:	69f4      	ldr	r4, [r6, #28]
 800711e:	b97c      	cbnz	r4, 8007140 <__pow5mult+0x48>
 8007120:	2010      	movs	r0, #16
 8007122:	f7ff fd7f 	bl	8006c24 <malloc>
 8007126:	4602      	mov	r2, r0
 8007128:	61f0      	str	r0, [r6, #28]
 800712a:	b928      	cbnz	r0, 8007138 <__pow5mult+0x40>
 800712c:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <__pow5mult+0xac>)
 800712e:	481e      	ldr	r0, [pc, #120]	; (80071a8 <__pow5mult+0xb0>)
 8007130:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007134:	f000 fc3e 	bl	80079b4 <__assert_func>
 8007138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800713c:	6004      	str	r4, [r0, #0]
 800713e:	60c4      	str	r4, [r0, #12]
 8007140:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007148:	b94c      	cbnz	r4, 800715e <__pow5mult+0x66>
 800714a:	f240 2171 	movw	r1, #625	; 0x271
 800714e:	4630      	mov	r0, r6
 8007150:	f7ff ff12 	bl	8006f78 <__i2b>
 8007154:	2300      	movs	r3, #0
 8007156:	f8c8 0008 	str.w	r0, [r8, #8]
 800715a:	4604      	mov	r4, r0
 800715c:	6003      	str	r3, [r0, #0]
 800715e:	f04f 0900 	mov.w	r9, #0
 8007162:	07eb      	lsls	r3, r5, #31
 8007164:	d50a      	bpl.n	800717c <__pow5mult+0x84>
 8007166:	4639      	mov	r1, r7
 8007168:	4622      	mov	r2, r4
 800716a:	4630      	mov	r0, r6
 800716c:	f7ff ff1a 	bl	8006fa4 <__multiply>
 8007170:	4639      	mov	r1, r7
 8007172:	4680      	mov	r8, r0
 8007174:	4630      	mov	r0, r6
 8007176:	f7ff fe49 	bl	8006e0c <_Bfree>
 800717a:	4647      	mov	r7, r8
 800717c:	106d      	asrs	r5, r5, #1
 800717e:	d00b      	beq.n	8007198 <__pow5mult+0xa0>
 8007180:	6820      	ldr	r0, [r4, #0]
 8007182:	b938      	cbnz	r0, 8007194 <__pow5mult+0x9c>
 8007184:	4622      	mov	r2, r4
 8007186:	4621      	mov	r1, r4
 8007188:	4630      	mov	r0, r6
 800718a:	f7ff ff0b 	bl	8006fa4 <__multiply>
 800718e:	6020      	str	r0, [r4, #0]
 8007190:	f8c0 9000 	str.w	r9, [r0]
 8007194:	4604      	mov	r4, r0
 8007196:	e7e4      	b.n	8007162 <__pow5mult+0x6a>
 8007198:	4638      	mov	r0, r7
 800719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800719e:	bf00      	nop
 80071a0:	08007e90 	.word	0x08007e90
 80071a4:	08007cc2 	.word	0x08007cc2
 80071a8:	08007d42 	.word	0x08007d42

080071ac <__lshift>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	460c      	mov	r4, r1
 80071b2:	6849      	ldr	r1, [r1, #4]
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	4607      	mov	r7, r0
 80071be:	4691      	mov	r9, r2
 80071c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071c4:	f108 0601 	add.w	r6, r8, #1
 80071c8:	42b3      	cmp	r3, r6
 80071ca:	db0b      	blt.n	80071e4 <__lshift+0x38>
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7ff fddd 	bl	8006d8c <_Balloc>
 80071d2:	4605      	mov	r5, r0
 80071d4:	b948      	cbnz	r0, 80071ea <__lshift+0x3e>
 80071d6:	4602      	mov	r2, r0
 80071d8:	4b28      	ldr	r3, [pc, #160]	; (800727c <__lshift+0xd0>)
 80071da:	4829      	ldr	r0, [pc, #164]	; (8007280 <__lshift+0xd4>)
 80071dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071e0:	f000 fbe8 	bl	80079b4 <__assert_func>
 80071e4:	3101      	adds	r1, #1
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	e7ee      	b.n	80071c8 <__lshift+0x1c>
 80071ea:	2300      	movs	r3, #0
 80071ec:	f100 0114 	add.w	r1, r0, #20
 80071f0:	f100 0210 	add.w	r2, r0, #16
 80071f4:	4618      	mov	r0, r3
 80071f6:	4553      	cmp	r3, sl
 80071f8:	db33      	blt.n	8007262 <__lshift+0xb6>
 80071fa:	6920      	ldr	r0, [r4, #16]
 80071fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007200:	f104 0314 	add.w	r3, r4, #20
 8007204:	f019 091f 	ands.w	r9, r9, #31
 8007208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800720c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007210:	d02b      	beq.n	800726a <__lshift+0xbe>
 8007212:	f1c9 0e20 	rsb	lr, r9, #32
 8007216:	468a      	mov	sl, r1
 8007218:	2200      	movs	r2, #0
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	fa00 f009 	lsl.w	r0, r0, r9
 8007220:	4310      	orrs	r0, r2
 8007222:	f84a 0b04 	str.w	r0, [sl], #4
 8007226:	f853 2b04 	ldr.w	r2, [r3], #4
 800722a:	459c      	cmp	ip, r3
 800722c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007230:	d8f3      	bhi.n	800721a <__lshift+0x6e>
 8007232:	ebac 0304 	sub.w	r3, ip, r4
 8007236:	3b15      	subs	r3, #21
 8007238:	f023 0303 	bic.w	r3, r3, #3
 800723c:	3304      	adds	r3, #4
 800723e:	f104 0015 	add.w	r0, r4, #21
 8007242:	4584      	cmp	ip, r0
 8007244:	bf38      	it	cc
 8007246:	2304      	movcc	r3, #4
 8007248:	50ca      	str	r2, [r1, r3]
 800724a:	b10a      	cbz	r2, 8007250 <__lshift+0xa4>
 800724c:	f108 0602 	add.w	r6, r8, #2
 8007250:	3e01      	subs	r6, #1
 8007252:	4638      	mov	r0, r7
 8007254:	612e      	str	r6, [r5, #16]
 8007256:	4621      	mov	r1, r4
 8007258:	f7ff fdd8 	bl	8006e0c <_Bfree>
 800725c:	4628      	mov	r0, r5
 800725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007262:	f842 0f04 	str.w	r0, [r2, #4]!
 8007266:	3301      	adds	r3, #1
 8007268:	e7c5      	b.n	80071f6 <__lshift+0x4a>
 800726a:	3904      	subs	r1, #4
 800726c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007270:	f841 2f04 	str.w	r2, [r1, #4]!
 8007274:	459c      	cmp	ip, r3
 8007276:	d8f9      	bhi.n	800726c <__lshift+0xc0>
 8007278:	e7ea      	b.n	8007250 <__lshift+0xa4>
 800727a:	bf00      	nop
 800727c:	08007d31 	.word	0x08007d31
 8007280:	08007d42 	.word	0x08007d42

08007284 <__mcmp>:
 8007284:	b530      	push	{r4, r5, lr}
 8007286:	6902      	ldr	r2, [r0, #16]
 8007288:	690c      	ldr	r4, [r1, #16]
 800728a:	1b12      	subs	r2, r2, r4
 800728c:	d10e      	bne.n	80072ac <__mcmp+0x28>
 800728e:	f100 0314 	add.w	r3, r0, #20
 8007292:	3114      	adds	r1, #20
 8007294:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007298:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800729c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072a4:	42a5      	cmp	r5, r4
 80072a6:	d003      	beq.n	80072b0 <__mcmp+0x2c>
 80072a8:	d305      	bcc.n	80072b6 <__mcmp+0x32>
 80072aa:	2201      	movs	r2, #1
 80072ac:	4610      	mov	r0, r2
 80072ae:	bd30      	pop	{r4, r5, pc}
 80072b0:	4283      	cmp	r3, r0
 80072b2:	d3f3      	bcc.n	800729c <__mcmp+0x18>
 80072b4:	e7fa      	b.n	80072ac <__mcmp+0x28>
 80072b6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ba:	e7f7      	b.n	80072ac <__mcmp+0x28>

080072bc <__mdiff>:
 80072bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	460c      	mov	r4, r1
 80072c2:	4606      	mov	r6, r0
 80072c4:	4611      	mov	r1, r2
 80072c6:	4620      	mov	r0, r4
 80072c8:	4690      	mov	r8, r2
 80072ca:	f7ff ffdb 	bl	8007284 <__mcmp>
 80072ce:	1e05      	subs	r5, r0, #0
 80072d0:	d110      	bne.n	80072f4 <__mdiff+0x38>
 80072d2:	4629      	mov	r1, r5
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff fd59 	bl	8006d8c <_Balloc>
 80072da:	b930      	cbnz	r0, 80072ea <__mdiff+0x2e>
 80072dc:	4b3a      	ldr	r3, [pc, #232]	; (80073c8 <__mdiff+0x10c>)
 80072de:	4602      	mov	r2, r0
 80072e0:	f240 2137 	movw	r1, #567	; 0x237
 80072e4:	4839      	ldr	r0, [pc, #228]	; (80073cc <__mdiff+0x110>)
 80072e6:	f000 fb65 	bl	80079b4 <__assert_func>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	bfa4      	itt	ge
 80072f6:	4643      	movge	r3, r8
 80072f8:	46a0      	movge	r8, r4
 80072fa:	4630      	mov	r0, r6
 80072fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007300:	bfa6      	itte	ge
 8007302:	461c      	movge	r4, r3
 8007304:	2500      	movge	r5, #0
 8007306:	2501      	movlt	r5, #1
 8007308:	f7ff fd40 	bl	8006d8c <_Balloc>
 800730c:	b920      	cbnz	r0, 8007318 <__mdiff+0x5c>
 800730e:	4b2e      	ldr	r3, [pc, #184]	; (80073c8 <__mdiff+0x10c>)
 8007310:	4602      	mov	r2, r0
 8007312:	f240 2145 	movw	r1, #581	; 0x245
 8007316:	e7e5      	b.n	80072e4 <__mdiff+0x28>
 8007318:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800731c:	6926      	ldr	r6, [r4, #16]
 800731e:	60c5      	str	r5, [r0, #12]
 8007320:	f104 0914 	add.w	r9, r4, #20
 8007324:	f108 0514 	add.w	r5, r8, #20
 8007328:	f100 0e14 	add.w	lr, r0, #20
 800732c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007330:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007334:	f108 0210 	add.w	r2, r8, #16
 8007338:	46f2      	mov	sl, lr
 800733a:	2100      	movs	r1, #0
 800733c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007340:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007344:	fa11 f88b 	uxtah	r8, r1, fp
 8007348:	b299      	uxth	r1, r3
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	eba8 0801 	sub.w	r8, r8, r1
 8007350:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007354:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007358:	fa1f f888 	uxth.w	r8, r8
 800735c:	1419      	asrs	r1, r3, #16
 800735e:	454e      	cmp	r6, r9
 8007360:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007364:	f84a 3b04 	str.w	r3, [sl], #4
 8007368:	d8e8      	bhi.n	800733c <__mdiff+0x80>
 800736a:	1b33      	subs	r3, r6, r4
 800736c:	3b15      	subs	r3, #21
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	3304      	adds	r3, #4
 8007374:	3415      	adds	r4, #21
 8007376:	42a6      	cmp	r6, r4
 8007378:	bf38      	it	cc
 800737a:	2304      	movcc	r3, #4
 800737c:	441d      	add	r5, r3
 800737e:	4473      	add	r3, lr
 8007380:	469e      	mov	lr, r3
 8007382:	462e      	mov	r6, r5
 8007384:	4566      	cmp	r6, ip
 8007386:	d30e      	bcc.n	80073a6 <__mdiff+0xea>
 8007388:	f10c 0203 	add.w	r2, ip, #3
 800738c:	1b52      	subs	r2, r2, r5
 800738e:	f022 0203 	bic.w	r2, r2, #3
 8007392:	3d03      	subs	r5, #3
 8007394:	45ac      	cmp	ip, r5
 8007396:	bf38      	it	cc
 8007398:	2200      	movcc	r2, #0
 800739a:	4413      	add	r3, r2
 800739c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80073a0:	b17a      	cbz	r2, 80073c2 <__mdiff+0x106>
 80073a2:	6107      	str	r7, [r0, #16]
 80073a4:	e7a4      	b.n	80072f0 <__mdiff+0x34>
 80073a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80073aa:	fa11 f288 	uxtah	r2, r1, r8
 80073ae:	1414      	asrs	r4, r2, #16
 80073b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073b4:	b292      	uxth	r2, r2
 80073b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073ba:	f84e 2b04 	str.w	r2, [lr], #4
 80073be:	1421      	asrs	r1, r4, #16
 80073c0:	e7e0      	b.n	8007384 <__mdiff+0xc8>
 80073c2:	3f01      	subs	r7, #1
 80073c4:	e7ea      	b.n	800739c <__mdiff+0xe0>
 80073c6:	bf00      	nop
 80073c8:	08007d31 	.word	0x08007d31
 80073cc:	08007d42 	.word	0x08007d42

080073d0 <__d2b>:
 80073d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073d4:	460f      	mov	r7, r1
 80073d6:	2101      	movs	r1, #1
 80073d8:	ec59 8b10 	vmov	r8, r9, d0
 80073dc:	4616      	mov	r6, r2
 80073de:	f7ff fcd5 	bl	8006d8c <_Balloc>
 80073e2:	4604      	mov	r4, r0
 80073e4:	b930      	cbnz	r0, 80073f4 <__d2b+0x24>
 80073e6:	4602      	mov	r2, r0
 80073e8:	4b24      	ldr	r3, [pc, #144]	; (800747c <__d2b+0xac>)
 80073ea:	4825      	ldr	r0, [pc, #148]	; (8007480 <__d2b+0xb0>)
 80073ec:	f240 310f 	movw	r1, #783	; 0x30f
 80073f0:	f000 fae0 	bl	80079b4 <__assert_func>
 80073f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073fc:	bb2d      	cbnz	r5, 800744a <__d2b+0x7a>
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	f1b8 0300 	subs.w	r3, r8, #0
 8007404:	d026      	beq.n	8007454 <__d2b+0x84>
 8007406:	4668      	mov	r0, sp
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	f7ff fd87 	bl	8006f1c <__lo0bits>
 800740e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007412:	b1e8      	cbz	r0, 8007450 <__d2b+0x80>
 8007414:	f1c0 0320 	rsb	r3, r0, #32
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	430b      	orrs	r3, r1
 800741e:	40c2      	lsrs	r2, r0
 8007420:	6163      	str	r3, [r4, #20]
 8007422:	9201      	str	r2, [sp, #4]
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	61a3      	str	r3, [r4, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	bf14      	ite	ne
 800742c:	2202      	movne	r2, #2
 800742e:	2201      	moveq	r2, #1
 8007430:	6122      	str	r2, [r4, #16]
 8007432:	b1bd      	cbz	r5, 8007464 <__d2b+0x94>
 8007434:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007438:	4405      	add	r5, r0
 800743a:	603d      	str	r5, [r7, #0]
 800743c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007440:	6030      	str	r0, [r6, #0]
 8007442:	4620      	mov	r0, r4
 8007444:	b003      	add	sp, #12
 8007446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800744a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800744e:	e7d6      	b.n	80073fe <__d2b+0x2e>
 8007450:	6161      	str	r1, [r4, #20]
 8007452:	e7e7      	b.n	8007424 <__d2b+0x54>
 8007454:	a801      	add	r0, sp, #4
 8007456:	f7ff fd61 	bl	8006f1c <__lo0bits>
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	6163      	str	r3, [r4, #20]
 800745e:	3020      	adds	r0, #32
 8007460:	2201      	movs	r2, #1
 8007462:	e7e5      	b.n	8007430 <__d2b+0x60>
 8007464:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007468:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800746c:	6038      	str	r0, [r7, #0]
 800746e:	6918      	ldr	r0, [r3, #16]
 8007470:	f7ff fd34 	bl	8006edc <__hi0bits>
 8007474:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007478:	e7e2      	b.n	8007440 <__d2b+0x70>
 800747a:	bf00      	nop
 800747c:	08007d31 	.word	0x08007d31
 8007480:	08007d42 	.word	0x08007d42

08007484 <__sfputc_r>:
 8007484:	6893      	ldr	r3, [r2, #8]
 8007486:	3b01      	subs	r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	b410      	push	{r4}
 800748c:	6093      	str	r3, [r2, #8]
 800748e:	da08      	bge.n	80074a2 <__sfputc_r+0x1e>
 8007490:	6994      	ldr	r4, [r2, #24]
 8007492:	42a3      	cmp	r3, r4
 8007494:	db01      	blt.n	800749a <__sfputc_r+0x16>
 8007496:	290a      	cmp	r1, #10
 8007498:	d103      	bne.n	80074a2 <__sfputc_r+0x1e>
 800749a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800749e:	f000 b9e3 	b.w	8007868 <__swbuf_r>
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	1c58      	adds	r0, r3, #1
 80074a6:	6010      	str	r0, [r2, #0]
 80074a8:	7019      	strb	r1, [r3, #0]
 80074aa:	4608      	mov	r0, r1
 80074ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <__sfputs_r>:
 80074b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b4:	4606      	mov	r6, r0
 80074b6:	460f      	mov	r7, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	18d5      	adds	r5, r2, r3
 80074bc:	42ac      	cmp	r4, r5
 80074be:	d101      	bne.n	80074c4 <__sfputs_r+0x12>
 80074c0:	2000      	movs	r0, #0
 80074c2:	e007      	b.n	80074d4 <__sfputs_r+0x22>
 80074c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c8:	463a      	mov	r2, r7
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff ffda 	bl	8007484 <__sfputc_r>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d1f3      	bne.n	80074bc <__sfputs_r+0xa>
 80074d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074d8 <_vfiprintf_r>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	460d      	mov	r5, r1
 80074de:	b09d      	sub	sp, #116	; 0x74
 80074e0:	4614      	mov	r4, r2
 80074e2:	4698      	mov	r8, r3
 80074e4:	4606      	mov	r6, r0
 80074e6:	b118      	cbz	r0, 80074f0 <_vfiprintf_r+0x18>
 80074e8:	6a03      	ldr	r3, [r0, #32]
 80074ea:	b90b      	cbnz	r3, 80074f0 <_vfiprintf_r+0x18>
 80074ec:	f7fe fbb8 	bl	8005c60 <__sinit>
 80074f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f2:	07d9      	lsls	r1, r3, #31
 80074f4:	d405      	bmi.n	8007502 <_vfiprintf_r+0x2a>
 80074f6:	89ab      	ldrh	r3, [r5, #12]
 80074f8:	059a      	lsls	r2, r3, #22
 80074fa:	d402      	bmi.n	8007502 <_vfiprintf_r+0x2a>
 80074fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074fe:	f7fe fcb8 	bl	8005e72 <__retarget_lock_acquire_recursive>
 8007502:	89ab      	ldrh	r3, [r5, #12]
 8007504:	071b      	lsls	r3, r3, #28
 8007506:	d501      	bpl.n	800750c <_vfiprintf_r+0x34>
 8007508:	692b      	ldr	r3, [r5, #16]
 800750a:	b99b      	cbnz	r3, 8007534 <_vfiprintf_r+0x5c>
 800750c:	4629      	mov	r1, r5
 800750e:	4630      	mov	r0, r6
 8007510:	f000 f9e8 	bl	80078e4 <__swsetup_r>
 8007514:	b170      	cbz	r0, 8007534 <_vfiprintf_r+0x5c>
 8007516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007518:	07dc      	lsls	r4, r3, #31
 800751a:	d504      	bpl.n	8007526 <_vfiprintf_r+0x4e>
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	b01d      	add	sp, #116	; 0x74
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	89ab      	ldrh	r3, [r5, #12]
 8007528:	0598      	lsls	r0, r3, #22
 800752a:	d4f7      	bmi.n	800751c <_vfiprintf_r+0x44>
 800752c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800752e:	f7fe fca1 	bl	8005e74 <__retarget_lock_release_recursive>
 8007532:	e7f3      	b.n	800751c <_vfiprintf_r+0x44>
 8007534:	2300      	movs	r3, #0
 8007536:	9309      	str	r3, [sp, #36]	; 0x24
 8007538:	2320      	movs	r3, #32
 800753a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800753e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007542:	2330      	movs	r3, #48	; 0x30
 8007544:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80076f8 <_vfiprintf_r+0x220>
 8007548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800754c:	f04f 0901 	mov.w	r9, #1
 8007550:	4623      	mov	r3, r4
 8007552:	469a      	mov	sl, r3
 8007554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007558:	b10a      	cbz	r2, 800755e <_vfiprintf_r+0x86>
 800755a:	2a25      	cmp	r2, #37	; 0x25
 800755c:	d1f9      	bne.n	8007552 <_vfiprintf_r+0x7a>
 800755e:	ebba 0b04 	subs.w	fp, sl, r4
 8007562:	d00b      	beq.n	800757c <_vfiprintf_r+0xa4>
 8007564:	465b      	mov	r3, fp
 8007566:	4622      	mov	r2, r4
 8007568:	4629      	mov	r1, r5
 800756a:	4630      	mov	r0, r6
 800756c:	f7ff ffa1 	bl	80074b2 <__sfputs_r>
 8007570:	3001      	adds	r0, #1
 8007572:	f000 80a9 	beq.w	80076c8 <_vfiprintf_r+0x1f0>
 8007576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007578:	445a      	add	r2, fp
 800757a:	9209      	str	r2, [sp, #36]	; 0x24
 800757c:	f89a 3000 	ldrb.w	r3, [sl]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80a1 	beq.w	80076c8 <_vfiprintf_r+0x1f0>
 8007586:	2300      	movs	r3, #0
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007590:	f10a 0a01 	add.w	sl, sl, #1
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	9307      	str	r3, [sp, #28]
 8007598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800759c:	931a      	str	r3, [sp, #104]	; 0x68
 800759e:	4654      	mov	r4, sl
 80075a0:	2205      	movs	r2, #5
 80075a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a6:	4854      	ldr	r0, [pc, #336]	; (80076f8 <_vfiprintf_r+0x220>)
 80075a8:	f7f8 fe1a 	bl	80001e0 <memchr>
 80075ac:	9a04      	ldr	r2, [sp, #16]
 80075ae:	b9d8      	cbnz	r0, 80075e8 <_vfiprintf_r+0x110>
 80075b0:	06d1      	lsls	r1, r2, #27
 80075b2:	bf44      	itt	mi
 80075b4:	2320      	movmi	r3, #32
 80075b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ba:	0713      	lsls	r3, r2, #28
 80075bc:	bf44      	itt	mi
 80075be:	232b      	movmi	r3, #43	; 0x2b
 80075c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c4:	f89a 3000 	ldrb.w	r3, [sl]
 80075c8:	2b2a      	cmp	r3, #42	; 0x2a
 80075ca:	d015      	beq.n	80075f8 <_vfiprintf_r+0x120>
 80075cc:	9a07      	ldr	r2, [sp, #28]
 80075ce:	4654      	mov	r4, sl
 80075d0:	2000      	movs	r0, #0
 80075d2:	f04f 0c0a 	mov.w	ip, #10
 80075d6:	4621      	mov	r1, r4
 80075d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075dc:	3b30      	subs	r3, #48	; 0x30
 80075de:	2b09      	cmp	r3, #9
 80075e0:	d94d      	bls.n	800767e <_vfiprintf_r+0x1a6>
 80075e2:	b1b0      	cbz	r0, 8007612 <_vfiprintf_r+0x13a>
 80075e4:	9207      	str	r2, [sp, #28]
 80075e6:	e014      	b.n	8007612 <_vfiprintf_r+0x13a>
 80075e8:	eba0 0308 	sub.w	r3, r0, r8
 80075ec:	fa09 f303 	lsl.w	r3, r9, r3
 80075f0:	4313      	orrs	r3, r2
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	46a2      	mov	sl, r4
 80075f6:	e7d2      	b.n	800759e <_vfiprintf_r+0xc6>
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	1d19      	adds	r1, r3, #4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	9103      	str	r1, [sp, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	bfbb      	ittet	lt
 8007604:	425b      	neglt	r3, r3
 8007606:	f042 0202 	orrlt.w	r2, r2, #2
 800760a:	9307      	strge	r3, [sp, #28]
 800760c:	9307      	strlt	r3, [sp, #28]
 800760e:	bfb8      	it	lt
 8007610:	9204      	strlt	r2, [sp, #16]
 8007612:	7823      	ldrb	r3, [r4, #0]
 8007614:	2b2e      	cmp	r3, #46	; 0x2e
 8007616:	d10c      	bne.n	8007632 <_vfiprintf_r+0x15a>
 8007618:	7863      	ldrb	r3, [r4, #1]
 800761a:	2b2a      	cmp	r3, #42	; 0x2a
 800761c:	d134      	bne.n	8007688 <_vfiprintf_r+0x1b0>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	1d1a      	adds	r2, r3, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	9203      	str	r2, [sp, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfb8      	it	lt
 800762a:	f04f 33ff 	movlt.w	r3, #4294967295
 800762e:	3402      	adds	r4, #2
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007708 <_vfiprintf_r+0x230>
 8007636:	7821      	ldrb	r1, [r4, #0]
 8007638:	2203      	movs	r2, #3
 800763a:	4650      	mov	r0, sl
 800763c:	f7f8 fdd0 	bl	80001e0 <memchr>
 8007640:	b138      	cbz	r0, 8007652 <_vfiprintf_r+0x17a>
 8007642:	9b04      	ldr	r3, [sp, #16]
 8007644:	eba0 000a 	sub.w	r0, r0, sl
 8007648:	2240      	movs	r2, #64	; 0x40
 800764a:	4082      	lsls	r2, r0
 800764c:	4313      	orrs	r3, r2
 800764e:	3401      	adds	r4, #1
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007656:	4829      	ldr	r0, [pc, #164]	; (80076fc <_vfiprintf_r+0x224>)
 8007658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800765c:	2206      	movs	r2, #6
 800765e:	f7f8 fdbf 	bl	80001e0 <memchr>
 8007662:	2800      	cmp	r0, #0
 8007664:	d03f      	beq.n	80076e6 <_vfiprintf_r+0x20e>
 8007666:	4b26      	ldr	r3, [pc, #152]	; (8007700 <_vfiprintf_r+0x228>)
 8007668:	bb1b      	cbnz	r3, 80076b2 <_vfiprintf_r+0x1da>
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	3307      	adds	r3, #7
 800766e:	f023 0307 	bic.w	r3, r3, #7
 8007672:	3308      	adds	r3, #8
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007678:	443b      	add	r3, r7
 800767a:	9309      	str	r3, [sp, #36]	; 0x24
 800767c:	e768      	b.n	8007550 <_vfiprintf_r+0x78>
 800767e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007682:	460c      	mov	r4, r1
 8007684:	2001      	movs	r0, #1
 8007686:	e7a6      	b.n	80075d6 <_vfiprintf_r+0xfe>
 8007688:	2300      	movs	r3, #0
 800768a:	3401      	adds	r4, #1
 800768c:	9305      	str	r3, [sp, #20]
 800768e:	4619      	mov	r1, r3
 8007690:	f04f 0c0a 	mov.w	ip, #10
 8007694:	4620      	mov	r0, r4
 8007696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769a:	3a30      	subs	r2, #48	; 0x30
 800769c:	2a09      	cmp	r2, #9
 800769e:	d903      	bls.n	80076a8 <_vfiprintf_r+0x1d0>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0c6      	beq.n	8007632 <_vfiprintf_r+0x15a>
 80076a4:	9105      	str	r1, [sp, #20]
 80076a6:	e7c4      	b.n	8007632 <_vfiprintf_r+0x15a>
 80076a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ac:	4604      	mov	r4, r0
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7f0      	b.n	8007694 <_vfiprintf_r+0x1bc>
 80076b2:	ab03      	add	r3, sp, #12
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	462a      	mov	r2, r5
 80076b8:	4b12      	ldr	r3, [pc, #72]	; (8007704 <_vfiprintf_r+0x22c>)
 80076ba:	a904      	add	r1, sp, #16
 80076bc:	4630      	mov	r0, r6
 80076be:	f7fd fe7d 	bl	80053bc <_printf_float>
 80076c2:	4607      	mov	r7, r0
 80076c4:	1c78      	adds	r0, r7, #1
 80076c6:	d1d6      	bne.n	8007676 <_vfiprintf_r+0x19e>
 80076c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	d405      	bmi.n	80076da <_vfiprintf_r+0x202>
 80076ce:	89ab      	ldrh	r3, [r5, #12]
 80076d0:	059a      	lsls	r2, r3, #22
 80076d2:	d402      	bmi.n	80076da <_vfiprintf_r+0x202>
 80076d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076d6:	f7fe fbcd 	bl	8005e74 <__retarget_lock_release_recursive>
 80076da:	89ab      	ldrh	r3, [r5, #12]
 80076dc:	065b      	lsls	r3, r3, #25
 80076de:	f53f af1d 	bmi.w	800751c <_vfiprintf_r+0x44>
 80076e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076e4:	e71c      	b.n	8007520 <_vfiprintf_r+0x48>
 80076e6:	ab03      	add	r3, sp, #12
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	462a      	mov	r2, r5
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <_vfiprintf_r+0x22c>)
 80076ee:	a904      	add	r1, sp, #16
 80076f0:	4630      	mov	r0, r6
 80076f2:	f7fe f907 	bl	8005904 <_printf_i>
 80076f6:	e7e4      	b.n	80076c2 <_vfiprintf_r+0x1ea>
 80076f8:	08007e9c 	.word	0x08007e9c
 80076fc:	08007ea6 	.word	0x08007ea6
 8007700:	080053bd 	.word	0x080053bd
 8007704:	080074b3 	.word	0x080074b3
 8007708:	08007ea2 	.word	0x08007ea2

0800770c <__sflush_r>:
 800770c:	898a      	ldrh	r2, [r1, #12]
 800770e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007712:	4605      	mov	r5, r0
 8007714:	0710      	lsls	r0, r2, #28
 8007716:	460c      	mov	r4, r1
 8007718:	d458      	bmi.n	80077cc <__sflush_r+0xc0>
 800771a:	684b      	ldr	r3, [r1, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dc05      	bgt.n	800772c <__sflush_r+0x20>
 8007720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	dc02      	bgt.n	800772c <__sflush_r+0x20>
 8007726:	2000      	movs	r0, #0
 8007728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800772c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800772e:	2e00      	cmp	r6, #0
 8007730:	d0f9      	beq.n	8007726 <__sflush_r+0x1a>
 8007732:	2300      	movs	r3, #0
 8007734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007738:	682f      	ldr	r7, [r5, #0]
 800773a:	6a21      	ldr	r1, [r4, #32]
 800773c:	602b      	str	r3, [r5, #0]
 800773e:	d032      	beq.n	80077a6 <__sflush_r+0x9a>
 8007740:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	075a      	lsls	r2, r3, #29
 8007746:	d505      	bpl.n	8007754 <__sflush_r+0x48>
 8007748:	6863      	ldr	r3, [r4, #4]
 800774a:	1ac0      	subs	r0, r0, r3
 800774c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800774e:	b10b      	cbz	r3, 8007754 <__sflush_r+0x48>
 8007750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007752:	1ac0      	subs	r0, r0, r3
 8007754:	2300      	movs	r3, #0
 8007756:	4602      	mov	r2, r0
 8007758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800775a:	6a21      	ldr	r1, [r4, #32]
 800775c:	4628      	mov	r0, r5
 800775e:	47b0      	blx	r6
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	d106      	bne.n	8007774 <__sflush_r+0x68>
 8007766:	6829      	ldr	r1, [r5, #0]
 8007768:	291d      	cmp	r1, #29
 800776a:	d82b      	bhi.n	80077c4 <__sflush_r+0xb8>
 800776c:	4a29      	ldr	r2, [pc, #164]	; (8007814 <__sflush_r+0x108>)
 800776e:	410a      	asrs	r2, r1
 8007770:	07d6      	lsls	r6, r2, #31
 8007772:	d427      	bmi.n	80077c4 <__sflush_r+0xb8>
 8007774:	2200      	movs	r2, #0
 8007776:	6062      	str	r2, [r4, #4]
 8007778:	04d9      	lsls	r1, r3, #19
 800777a:	6922      	ldr	r2, [r4, #16]
 800777c:	6022      	str	r2, [r4, #0]
 800777e:	d504      	bpl.n	800778a <__sflush_r+0x7e>
 8007780:	1c42      	adds	r2, r0, #1
 8007782:	d101      	bne.n	8007788 <__sflush_r+0x7c>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	b903      	cbnz	r3, 800778a <__sflush_r+0x7e>
 8007788:	6560      	str	r0, [r4, #84]	; 0x54
 800778a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800778c:	602f      	str	r7, [r5, #0]
 800778e:	2900      	cmp	r1, #0
 8007790:	d0c9      	beq.n	8007726 <__sflush_r+0x1a>
 8007792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007796:	4299      	cmp	r1, r3
 8007798:	d002      	beq.n	80077a0 <__sflush_r+0x94>
 800779a:	4628      	mov	r0, r5
 800779c:	f7ff f9f6 	bl	8006b8c <_free_r>
 80077a0:	2000      	movs	r0, #0
 80077a2:	6360      	str	r0, [r4, #52]	; 0x34
 80077a4:	e7c0      	b.n	8007728 <__sflush_r+0x1c>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b0      	blx	r6
 80077ac:	1c41      	adds	r1, r0, #1
 80077ae:	d1c8      	bne.n	8007742 <__sflush_r+0x36>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0c5      	beq.n	8007742 <__sflush_r+0x36>
 80077b6:	2b1d      	cmp	r3, #29
 80077b8:	d001      	beq.n	80077be <__sflush_r+0xb2>
 80077ba:	2b16      	cmp	r3, #22
 80077bc:	d101      	bne.n	80077c2 <__sflush_r+0xb6>
 80077be:	602f      	str	r7, [r5, #0]
 80077c0:	e7b1      	b.n	8007726 <__sflush_r+0x1a>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c8:	81a3      	strh	r3, [r4, #12]
 80077ca:	e7ad      	b.n	8007728 <__sflush_r+0x1c>
 80077cc:	690f      	ldr	r7, [r1, #16]
 80077ce:	2f00      	cmp	r7, #0
 80077d0:	d0a9      	beq.n	8007726 <__sflush_r+0x1a>
 80077d2:	0793      	lsls	r3, r2, #30
 80077d4:	680e      	ldr	r6, [r1, #0]
 80077d6:	bf08      	it	eq
 80077d8:	694b      	ldreq	r3, [r1, #20]
 80077da:	600f      	str	r7, [r1, #0]
 80077dc:	bf18      	it	ne
 80077de:	2300      	movne	r3, #0
 80077e0:	eba6 0807 	sub.w	r8, r6, r7
 80077e4:	608b      	str	r3, [r1, #8]
 80077e6:	f1b8 0f00 	cmp.w	r8, #0
 80077ea:	dd9c      	ble.n	8007726 <__sflush_r+0x1a>
 80077ec:	6a21      	ldr	r1, [r4, #32]
 80077ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077f0:	4643      	mov	r3, r8
 80077f2:	463a      	mov	r2, r7
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b0      	blx	r6
 80077f8:	2800      	cmp	r0, #0
 80077fa:	dc06      	bgt.n	800780a <__sflush_r+0xfe>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	f04f 30ff 	mov.w	r0, #4294967295
 8007808:	e78e      	b.n	8007728 <__sflush_r+0x1c>
 800780a:	4407      	add	r7, r0
 800780c:	eba8 0800 	sub.w	r8, r8, r0
 8007810:	e7e9      	b.n	80077e6 <__sflush_r+0xda>
 8007812:	bf00      	nop
 8007814:	dfbffffe 	.word	0xdfbffffe

08007818 <_fflush_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	690b      	ldr	r3, [r1, #16]
 800781c:	4605      	mov	r5, r0
 800781e:	460c      	mov	r4, r1
 8007820:	b913      	cbnz	r3, 8007828 <_fflush_r+0x10>
 8007822:	2500      	movs	r5, #0
 8007824:	4628      	mov	r0, r5
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	b118      	cbz	r0, 8007832 <_fflush_r+0x1a>
 800782a:	6a03      	ldr	r3, [r0, #32]
 800782c:	b90b      	cbnz	r3, 8007832 <_fflush_r+0x1a>
 800782e:	f7fe fa17 	bl	8005c60 <__sinit>
 8007832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0f3      	beq.n	8007822 <_fflush_r+0xa>
 800783a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800783c:	07d0      	lsls	r0, r2, #31
 800783e:	d404      	bmi.n	800784a <_fflush_r+0x32>
 8007840:	0599      	lsls	r1, r3, #22
 8007842:	d402      	bmi.n	800784a <_fflush_r+0x32>
 8007844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007846:	f7fe fb14 	bl	8005e72 <__retarget_lock_acquire_recursive>
 800784a:	4628      	mov	r0, r5
 800784c:	4621      	mov	r1, r4
 800784e:	f7ff ff5d 	bl	800770c <__sflush_r>
 8007852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007854:	07da      	lsls	r2, r3, #31
 8007856:	4605      	mov	r5, r0
 8007858:	d4e4      	bmi.n	8007824 <_fflush_r+0xc>
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	059b      	lsls	r3, r3, #22
 800785e:	d4e1      	bmi.n	8007824 <_fflush_r+0xc>
 8007860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007862:	f7fe fb07 	bl	8005e74 <__retarget_lock_release_recursive>
 8007866:	e7dd      	b.n	8007824 <_fflush_r+0xc>

08007868 <__swbuf_r>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	460e      	mov	r6, r1
 800786c:	4614      	mov	r4, r2
 800786e:	4605      	mov	r5, r0
 8007870:	b118      	cbz	r0, 800787a <__swbuf_r+0x12>
 8007872:	6a03      	ldr	r3, [r0, #32]
 8007874:	b90b      	cbnz	r3, 800787a <__swbuf_r+0x12>
 8007876:	f7fe f9f3 	bl	8005c60 <__sinit>
 800787a:	69a3      	ldr	r3, [r4, #24]
 800787c:	60a3      	str	r3, [r4, #8]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	071a      	lsls	r2, r3, #28
 8007882:	d525      	bpl.n	80078d0 <__swbuf_r+0x68>
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	b31b      	cbz	r3, 80078d0 <__swbuf_r+0x68>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	6922      	ldr	r2, [r4, #16]
 800788c:	1a98      	subs	r0, r3, r2
 800788e:	6963      	ldr	r3, [r4, #20]
 8007890:	b2f6      	uxtb	r6, r6
 8007892:	4283      	cmp	r3, r0
 8007894:	4637      	mov	r7, r6
 8007896:	dc04      	bgt.n	80078a2 <__swbuf_r+0x3a>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f7ff ffbc 	bl	8007818 <_fflush_r>
 80078a0:	b9e0      	cbnz	r0, 80078dc <__swbuf_r+0x74>
 80078a2:	68a3      	ldr	r3, [r4, #8]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	60a3      	str	r3, [r4, #8]
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	701e      	strb	r6, [r3, #0]
 80078b0:	6962      	ldr	r2, [r4, #20]
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d004      	beq.n	80078c2 <__swbuf_r+0x5a>
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	07db      	lsls	r3, r3, #31
 80078bc:	d506      	bpl.n	80078cc <__swbuf_r+0x64>
 80078be:	2e0a      	cmp	r6, #10
 80078c0:	d104      	bne.n	80078cc <__swbuf_r+0x64>
 80078c2:	4621      	mov	r1, r4
 80078c4:	4628      	mov	r0, r5
 80078c6:	f7ff ffa7 	bl	8007818 <_fflush_r>
 80078ca:	b938      	cbnz	r0, 80078dc <__swbuf_r+0x74>
 80078cc:	4638      	mov	r0, r7
 80078ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d0:	4621      	mov	r1, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f806 	bl	80078e4 <__swsetup_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d0d5      	beq.n	8007888 <__swbuf_r+0x20>
 80078dc:	f04f 37ff 	mov.w	r7, #4294967295
 80078e0:	e7f4      	b.n	80078cc <__swbuf_r+0x64>
	...

080078e4 <__swsetup_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <__swsetup_r+0xac>)
 80078e8:	4605      	mov	r5, r0
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	460c      	mov	r4, r1
 80078ee:	b118      	cbz	r0, 80078f8 <__swsetup_r+0x14>
 80078f0:	6a03      	ldr	r3, [r0, #32]
 80078f2:	b90b      	cbnz	r3, 80078f8 <__swsetup_r+0x14>
 80078f4:	f7fe f9b4 	bl	8005c60 <__sinit>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078fe:	0718      	lsls	r0, r3, #28
 8007900:	d422      	bmi.n	8007948 <__swsetup_r+0x64>
 8007902:	06d9      	lsls	r1, r3, #27
 8007904:	d407      	bmi.n	8007916 <__swsetup_r+0x32>
 8007906:	2309      	movs	r3, #9
 8007908:	602b      	str	r3, [r5, #0]
 800790a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800790e:	81a3      	strh	r3, [r4, #12]
 8007910:	f04f 30ff 	mov.w	r0, #4294967295
 8007914:	e034      	b.n	8007980 <__swsetup_r+0x9c>
 8007916:	0758      	lsls	r0, r3, #29
 8007918:	d512      	bpl.n	8007940 <__swsetup_r+0x5c>
 800791a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800791c:	b141      	cbz	r1, 8007930 <__swsetup_r+0x4c>
 800791e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007922:	4299      	cmp	r1, r3
 8007924:	d002      	beq.n	800792c <__swsetup_r+0x48>
 8007926:	4628      	mov	r0, r5
 8007928:	f7ff f930 	bl	8006b8c <_free_r>
 800792c:	2300      	movs	r3, #0
 800792e:	6363      	str	r3, [r4, #52]	; 0x34
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	2300      	movs	r3, #0
 800793a:	6063      	str	r3, [r4, #4]
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	f043 0308 	orr.w	r3, r3, #8
 8007946:	81a3      	strh	r3, [r4, #12]
 8007948:	6923      	ldr	r3, [r4, #16]
 800794a:	b94b      	cbnz	r3, 8007960 <__swsetup_r+0x7c>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007956:	d003      	beq.n	8007960 <__swsetup_r+0x7c>
 8007958:	4621      	mov	r1, r4
 800795a:	4628      	mov	r0, r5
 800795c:	f000 f8b6 	bl	8007acc <__smakebuf_r>
 8007960:	89a0      	ldrh	r0, [r4, #12]
 8007962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007966:	f010 0301 	ands.w	r3, r0, #1
 800796a:	d00a      	beq.n	8007982 <__swsetup_r+0x9e>
 800796c:	2300      	movs	r3, #0
 800796e:	60a3      	str	r3, [r4, #8]
 8007970:	6963      	ldr	r3, [r4, #20]
 8007972:	425b      	negs	r3, r3
 8007974:	61a3      	str	r3, [r4, #24]
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	b943      	cbnz	r3, 800798c <__swsetup_r+0xa8>
 800797a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800797e:	d1c4      	bne.n	800790a <__swsetup_r+0x26>
 8007980:	bd38      	pop	{r3, r4, r5, pc}
 8007982:	0781      	lsls	r1, r0, #30
 8007984:	bf58      	it	pl
 8007986:	6963      	ldrpl	r3, [r4, #20]
 8007988:	60a3      	str	r3, [r4, #8]
 800798a:	e7f4      	b.n	8007976 <__swsetup_r+0x92>
 800798c:	2000      	movs	r0, #0
 800798e:	e7f7      	b.n	8007980 <__swsetup_r+0x9c>
 8007990:	200000c8 	.word	0x200000c8

08007994 <_sbrk_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d06      	ldr	r5, [pc, #24]	; (80079b0 <_sbrk_r+0x1c>)
 8007998:	2300      	movs	r3, #0
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7f9 fc78 	bl	8001294 <_sbrk>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_sbrk_r+0x1a>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_sbrk_r+0x1a>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	20004d30 	.word	0x20004d30

080079b4 <__assert_func>:
 80079b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079b6:	4614      	mov	r4, r2
 80079b8:	461a      	mov	r2, r3
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <__assert_func+0x2c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4605      	mov	r5, r0
 80079c0:	68d8      	ldr	r0, [r3, #12]
 80079c2:	b14c      	cbz	r4, 80079d8 <__assert_func+0x24>
 80079c4:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <__assert_func+0x30>)
 80079c6:	9100      	str	r1, [sp, #0]
 80079c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079cc:	4906      	ldr	r1, [pc, #24]	; (80079e8 <__assert_func+0x34>)
 80079ce:	462b      	mov	r3, r5
 80079d0:	f000 f844 	bl	8007a5c <fiprintf>
 80079d4:	f000 f8d8 	bl	8007b88 <abort>
 80079d8:	4b04      	ldr	r3, [pc, #16]	; (80079ec <__assert_func+0x38>)
 80079da:	461c      	mov	r4, r3
 80079dc:	e7f3      	b.n	80079c6 <__assert_func+0x12>
 80079de:	bf00      	nop
 80079e0:	200000c8 	.word	0x200000c8
 80079e4:	08007eb7 	.word	0x08007eb7
 80079e8:	08007ec4 	.word	0x08007ec4
 80079ec:	08007ef2 	.word	0x08007ef2

080079f0 <_calloc_r>:
 80079f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079f2:	fba1 2402 	umull	r2, r4, r1, r2
 80079f6:	b94c      	cbnz	r4, 8007a0c <_calloc_r+0x1c>
 80079f8:	4611      	mov	r1, r2
 80079fa:	9201      	str	r2, [sp, #4]
 80079fc:	f7ff f93a 	bl	8006c74 <_malloc_r>
 8007a00:	9a01      	ldr	r2, [sp, #4]
 8007a02:	4605      	mov	r5, r0
 8007a04:	b930      	cbnz	r0, 8007a14 <_calloc_r+0x24>
 8007a06:	4628      	mov	r0, r5
 8007a08:	b003      	add	sp, #12
 8007a0a:	bd30      	pop	{r4, r5, pc}
 8007a0c:	220c      	movs	r2, #12
 8007a0e:	6002      	str	r2, [r0, #0]
 8007a10:	2500      	movs	r5, #0
 8007a12:	e7f8      	b.n	8007a06 <_calloc_r+0x16>
 8007a14:	4621      	mov	r1, r4
 8007a16:	f7fe f9ae 	bl	8005d76 <memset>
 8007a1a:	e7f4      	b.n	8007a06 <_calloc_r+0x16>

08007a1c <__ascii_mbtowc>:
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	b901      	cbnz	r1, 8007a22 <__ascii_mbtowc+0x6>
 8007a20:	a901      	add	r1, sp, #4
 8007a22:	b142      	cbz	r2, 8007a36 <__ascii_mbtowc+0x1a>
 8007a24:	b14b      	cbz	r3, 8007a3a <__ascii_mbtowc+0x1e>
 8007a26:	7813      	ldrb	r3, [r2, #0]
 8007a28:	600b      	str	r3, [r1, #0]
 8007a2a:	7812      	ldrb	r2, [r2, #0]
 8007a2c:	1e10      	subs	r0, r2, #0
 8007a2e:	bf18      	it	ne
 8007a30:	2001      	movne	r0, #1
 8007a32:	b002      	add	sp, #8
 8007a34:	4770      	bx	lr
 8007a36:	4610      	mov	r0, r2
 8007a38:	e7fb      	b.n	8007a32 <__ascii_mbtowc+0x16>
 8007a3a:	f06f 0001 	mvn.w	r0, #1
 8007a3e:	e7f8      	b.n	8007a32 <__ascii_mbtowc+0x16>

08007a40 <__ascii_wctomb>:
 8007a40:	b149      	cbz	r1, 8007a56 <__ascii_wctomb+0x16>
 8007a42:	2aff      	cmp	r2, #255	; 0xff
 8007a44:	bf85      	ittet	hi
 8007a46:	238a      	movhi	r3, #138	; 0x8a
 8007a48:	6003      	strhi	r3, [r0, #0]
 8007a4a:	700a      	strbls	r2, [r1, #0]
 8007a4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a50:	bf98      	it	ls
 8007a52:	2001      	movls	r0, #1
 8007a54:	4770      	bx	lr
 8007a56:	4608      	mov	r0, r1
 8007a58:	4770      	bx	lr
	...

08007a5c <fiprintf>:
 8007a5c:	b40e      	push	{r1, r2, r3}
 8007a5e:	b503      	push	{r0, r1, lr}
 8007a60:	4601      	mov	r1, r0
 8007a62:	ab03      	add	r3, sp, #12
 8007a64:	4805      	ldr	r0, [pc, #20]	; (8007a7c <fiprintf+0x20>)
 8007a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	f7ff fd33 	bl	80074d8 <_vfiprintf_r>
 8007a72:	b002      	add	sp, #8
 8007a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a78:	b003      	add	sp, #12
 8007a7a:	4770      	bx	lr
 8007a7c:	200000c8 	.word	0x200000c8

08007a80 <__swhatbuf_r>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	460c      	mov	r4, r1
 8007a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	b096      	sub	sp, #88	; 0x58
 8007a8c:	4615      	mov	r5, r2
 8007a8e:	461e      	mov	r6, r3
 8007a90:	da0d      	bge.n	8007aae <__swhatbuf_r+0x2e>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a98:	f04f 0100 	mov.w	r1, #0
 8007a9c:	bf0c      	ite	eq
 8007a9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007aa2:	2340      	movne	r3, #64	; 0x40
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	6031      	str	r1, [r6, #0]
 8007aa8:	602b      	str	r3, [r5, #0]
 8007aaa:	b016      	add	sp, #88	; 0x58
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
 8007aae:	466a      	mov	r2, sp
 8007ab0:	f000 f848 	bl	8007b44 <_fstat_r>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	dbec      	blt.n	8007a92 <__swhatbuf_r+0x12>
 8007ab8:	9901      	ldr	r1, [sp, #4]
 8007aba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007abe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ac2:	4259      	negs	r1, r3
 8007ac4:	4159      	adcs	r1, r3
 8007ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aca:	e7eb      	b.n	8007aa4 <__swhatbuf_r+0x24>

08007acc <__smakebuf_r>:
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ad0:	079d      	lsls	r5, r3, #30
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	d507      	bpl.n	8007ae8 <__smakebuf_r+0x1c>
 8007ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	6123      	str	r3, [r4, #16]
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	6163      	str	r3, [r4, #20]
 8007ae4:	b002      	add	sp, #8
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	ab01      	add	r3, sp, #4
 8007aea:	466a      	mov	r2, sp
 8007aec:	f7ff ffc8 	bl	8007a80 <__swhatbuf_r>
 8007af0:	9900      	ldr	r1, [sp, #0]
 8007af2:	4605      	mov	r5, r0
 8007af4:	4630      	mov	r0, r6
 8007af6:	f7ff f8bd 	bl	8006c74 <_malloc_r>
 8007afa:	b948      	cbnz	r0, 8007b10 <__smakebuf_r+0x44>
 8007afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b00:	059a      	lsls	r2, r3, #22
 8007b02:	d4ef      	bmi.n	8007ae4 <__smakebuf_r+0x18>
 8007b04:	f023 0303 	bic.w	r3, r3, #3
 8007b08:	f043 0302 	orr.w	r3, r3, #2
 8007b0c:	81a3      	strh	r3, [r4, #12]
 8007b0e:	e7e3      	b.n	8007ad8 <__smakebuf_r+0xc>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	6020      	str	r0, [r4, #0]
 8007b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	9b00      	ldr	r3, [sp, #0]
 8007b1c:	6163      	str	r3, [r4, #20]
 8007b1e:	9b01      	ldr	r3, [sp, #4]
 8007b20:	6120      	str	r0, [r4, #16]
 8007b22:	b15b      	cbz	r3, 8007b3c <__smakebuf_r+0x70>
 8007b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f000 f81d 	bl	8007b68 <_isatty_r>
 8007b2e:	b128      	cbz	r0, 8007b3c <__smakebuf_r+0x70>
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	f023 0303 	bic.w	r3, r3, #3
 8007b36:	f043 0301 	orr.w	r3, r3, #1
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	431d      	orrs	r5, r3
 8007b40:	81a5      	strh	r5, [r4, #12]
 8007b42:	e7cf      	b.n	8007ae4 <__smakebuf_r+0x18>

08007b44 <_fstat_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	; (8007b64 <_fstat_r+0x20>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	f7f9 fb76 	bl	8001242 <_fstat>
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	d102      	bne.n	8007b60 <_fstat_r+0x1c>
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	b103      	cbz	r3, 8007b60 <_fstat_r+0x1c>
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	bd38      	pop	{r3, r4, r5, pc}
 8007b62:	bf00      	nop
 8007b64:	20004d30 	.word	0x20004d30

08007b68 <_isatty_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d06      	ldr	r5, [pc, #24]	; (8007b84 <_isatty_r+0x1c>)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	602b      	str	r3, [r5, #0]
 8007b74:	f7f9 fb75 	bl	8001262 <_isatty>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_isatty_r+0x1a>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_isatty_r+0x1a>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	20004d30 	.word	0x20004d30

08007b88 <abort>:
 8007b88:	b508      	push	{r3, lr}
 8007b8a:	2006      	movs	r0, #6
 8007b8c:	f000 f82c 	bl	8007be8 <raise>
 8007b90:	2001      	movs	r0, #1
 8007b92:	f7f9 fb07 	bl	80011a4 <_exit>

08007b96 <_raise_r>:
 8007b96:	291f      	cmp	r1, #31
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	d904      	bls.n	8007baa <_raise_r+0x14>
 8007ba0:	2316      	movs	r3, #22
 8007ba2:	6003      	str	r3, [r0, #0]
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	bd38      	pop	{r3, r4, r5, pc}
 8007baa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007bac:	b112      	cbz	r2, 8007bb4 <_raise_r+0x1e>
 8007bae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bb2:	b94b      	cbnz	r3, 8007bc8 <_raise_r+0x32>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 f831 	bl	8007c1c <_getpid_r>
 8007bba:	462a      	mov	r2, r5
 8007bbc:	4601      	mov	r1, r0
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc4:	f000 b818 	b.w	8007bf8 <_kill_r>
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d00a      	beq.n	8007be2 <_raise_r+0x4c>
 8007bcc:	1c59      	adds	r1, r3, #1
 8007bce:	d103      	bne.n	8007bd8 <_raise_r+0x42>
 8007bd0:	2316      	movs	r3, #22
 8007bd2:	6003      	str	r3, [r0, #0]
 8007bd4:	2001      	movs	r0, #1
 8007bd6:	e7e7      	b.n	8007ba8 <_raise_r+0x12>
 8007bd8:	2400      	movs	r4, #0
 8007bda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bde:	4628      	mov	r0, r5
 8007be0:	4798      	blx	r3
 8007be2:	2000      	movs	r0, #0
 8007be4:	e7e0      	b.n	8007ba8 <_raise_r+0x12>
	...

08007be8 <raise>:
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <raise+0xc>)
 8007bea:	4601      	mov	r1, r0
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	f7ff bfd2 	b.w	8007b96 <_raise_r>
 8007bf2:	bf00      	nop
 8007bf4:	200000c8 	.word	0x200000c8

08007bf8 <_kill_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d07      	ldr	r5, [pc, #28]	; (8007c18 <_kill_r+0x20>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	f7f9 fabd 	bl	8001184 <_kill>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	d102      	bne.n	8007c14 <_kill_r+0x1c>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	b103      	cbz	r3, 8007c14 <_kill_r+0x1c>
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	20004d30 	.word	0x20004d30

08007c1c <_getpid_r>:
 8007c1c:	f7f9 baaa 	b.w	8001174 <_getpid>

08007c20 <_init>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	bf00      	nop
 8007c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c26:	bc08      	pop	{r3}
 8007c28:	469e      	mov	lr, r3
 8007c2a:	4770      	bx	lr

08007c2c <_fini>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	bf00      	nop
 8007c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c32:	bc08      	pop	{r3}
 8007c34:	469e      	mov	lr, r3
 8007c36:	4770      	bx	lr
