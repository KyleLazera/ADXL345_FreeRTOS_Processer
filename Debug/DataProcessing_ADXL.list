
DataProcessing_ADXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009380  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009520  08009520  00019520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800994c  0800994c  0002023c  2**0
                  CONTENTS
  4 .ARM          00000000  0800994c  0800994c  0002023c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800994c  0800994c  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08009954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b80  2000023c  08009b90  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dbc  08009b90  00024dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012524  00000000  00000000  000202af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000371f  00000000  00000000  000327d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00035ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aac  00000000  00000000  00036d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e30  00000000  00000000  000377fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138e2  00000000  00000000  0004b62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006399b  00000000  00000000  0005ef0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004868  00000000  00000000  000c28ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c7114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000023c 	.word	0x2000023c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009508 	.word	0x08009508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000240 	.word	0x20000240
 80001dc:	08009508 	.word	0x08009508

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__io_putchar>:

/*
 * @Brief	Re-target printf top use with UART
 */
int __io_putchar(int ch)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	WriteByte(&UART2, (uint16_t)ch);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4619      	mov	r1, r3
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <__io_putchar+0x20>)
 8000c88:	f002 fa6b 	bl	8003162 <WriteByte>
	return ch;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000028c 	.word	0x2000028c

08000c9c <ClearBuffer>:

/*
 * @Brief	Initialize or clear all the buffer values
 */
void ClearBuffer(FIFO_Buffer *Buffer)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	int index;

	for(index = 0; index < BUFFER_SIZE - 1; index++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	e007      	b.n	8000cba <ClearBuffer+0x1e>
	{
		Buffer->buffer[index] = 0;
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
	for(index = 0; index < BUFFER_SIZE - 1; index++)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	ddf4      	ble.n	8000caa <ClearBuffer+0xe>
	}
	Buffer->front = 0;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
	Buffer->rear = 0;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
	Buffer->size = 0;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <Push>:

/*
 * @Brief Push characters into the FIFO buffer
 */
bool Push(FIFO_Buffer *Buffer, char character)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
	//If FIFo is full return false
	if(Buffer->size == BUFFER_SIZE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	2b0a      	cmp	r3, #10
 8000cf2:	d101      	bne.n	8000cf8 <Push+0x18>
		return false;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e01a      	b.n	8000d2e <Push+0x4e>

	//Push the char into FIFO and increment rear
	Buffer->buffer[Buffer->rear] = character;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	78f9      	ldrb	r1, [r7, #3]
 8000d00:	54d1      	strb	r1, [r2, r3]
	Buffer->rear = (Buffer->rear + 1) % BUFFER_SIZE;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	1c59      	adds	r1, r3, #1
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <Push+0x5c>)
 8000d0a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d0e:	109a      	asrs	r2, r3, #2
 8000d10:	17cb      	asrs	r3, r1, #31
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	1aca      	subs	r2, r1, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	611a      	str	r2, [r3, #16]
	Buffer->size++;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	615a      	str	r2, [r3, #20]
	return true;
 8000d2c:	2301      	movs	r3, #1
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	66666667 	.word	0x66666667

08000d40 <CreateTask>:
 * @Brief	Function used to create tasks - calls the FreeRTOS xTaskCreate API function
 * @Note	This function just removes some of the params used by the xTaskCreate function which are
 * 			not used by this project specifically
 */
static uint8_t CreateTask(TaskFunction_t func_pointer, char *name, uint32_t stack_size, uint8_t priority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	70fb      	strb	r3, [r7, #3]
	uint8_t success;
	TaskHandle_t handle;

	success = xTaskCreate(func_pointer, name, stack_size, NULL, priority, &handle);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	b299      	uxth	r1, r3
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	f107 0210 	add.w	r2, r7, #16
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	460a      	mov	r2, r1
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f003 faf1 	bl	800434a <xTaskCreate>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	75fb      	strb	r3, [r7, #23]

	if(success == pdPASS)
 8000d6c:	7dfb      	ldrb	r3, [r7, #23]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d101      	bne.n	8000d76 <CreateTask+0x36>
		return 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <CreateTask+0x38>
	else
		return 0;
 8000d76:	2300      	movs	r3, #0

}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <ProgramInit>:
/*
 * @Brief	This is the initializer function that creates all the tasks. Called from main function.
 * @retval	Function returns a checksum indicating how many tasks were successfully created
 */
void ProgramInit()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

	CreateTask(CommandLineRead, "Read UART", STACK_SIZE_200, PRIORITY_4);
 8000d84:	2304      	movs	r3, #4
 8000d86:	22c8      	movs	r2, #200	; 0xc8
 8000d88:	4913      	ldr	r1, [pc, #76]	; (8000dd8 <ProgramInit+0x58>)
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <ProgramInit+0x5c>)
 8000d8c:	f7ff ffd8 	bl	8000d40 <CreateTask>
	CreateTask(ReadADXLData, "Read ADXL345 Data", STACK_SIZE_500, PRIORITY_3);
 8000d90:	2303      	movs	r3, #3
 8000d92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d96:	4912      	ldr	r1, [pc, #72]	; (8000de0 <ProgramInit+0x60>)
 8000d98:	4812      	ldr	r0, [pc, #72]	; (8000de4 <ProgramInit+0x64>)
 8000d9a:	f7ff ffd1 	bl	8000d40 <CreateTask>
	CreateTask(DataProcessing, "Filter Raw Data", STACK_SIZE_1000, PRIORITY_2);
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da4:	4910      	ldr	r1, [pc, #64]	; (8000de8 <ProgramInit+0x68>)
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <ProgramInit+0x6c>)
 8000da8:	f7ff ffca 	bl	8000d40 <CreateTask>
	CreateTask(UART_GateKeeper, "Print Filtered Data", STACK_SIZE_500, PRIORITY_1);
 8000dac:	2301      	movs	r3, #1
 8000dae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000db2:	490f      	ldr	r1, [pc, #60]	; (8000df0 <ProgramInit+0x70>)
 8000db4:	480f      	ldr	r0, [pc, #60]	; (8000df4 <ProgramInit+0x74>)
 8000db6:	f7ff ffc3 	bl	8000d40 <CreateTask>
	CreateTask(DisplayData_PWM, "PWM of Data", STACK_SIZE_200, PRIORITY_1);
 8000dba:	2301      	movs	r3, #1
 8000dbc:	22c8      	movs	r2, #200	; 0xc8
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <ProgramInit+0x78>)
 8000dc0:	480e      	ldr	r0, [pc, #56]	; (8000dfc <ProgramInit+0x7c>)
 8000dc2:	f7ff ffbd 	bl	8000d40 <CreateTask>
	CreateTask(BME_Data_Calculation, "Compute BME data", STACK_SIZE_200, PRIORITY_1);
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	22c8      	movs	r2, #200	; 0xc8
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <ProgramInit+0x80>)
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <ProgramInit+0x84>)
 8000dce:	f7ff ffb7 	bl	8000d40 <CreateTask>

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	08009520 	.word	0x08009520
 8000ddc:	08006589 	.word	0x08006589
 8000de0:	0800952c 	.word	0x0800952c
 8000de4:	080069e5 	.word	0x080069e5
 8000de8:	08009540 	.word	0x08009540
 8000dec:	08006721 	.word	0x08006721
 8000df0:	08009550 	.word	0x08009550
 8000df4:	08006af9 	.word	0x08006af9
 8000df8:	08009564 	.word	0x08009564
 8000dfc:	08006829 	.word	0x08006829
 8000e00:	08009570 	.word	0x08009570
 8000e04:	080064ad 	.word	0x080064ad

08000e08 <TIM3_PWM_Init>:
#include "TIM3_Driver.h"

static void TIM3_PWM_Init(uint8_t channel)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	TIM3->CR1 |= CR1_ARPE_Enable;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	6013      	str	r3, [r2, #0]

	switch(channel)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d020      	beq.n	8000e66 <TIM3_PWM_Init+0x5e>
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	dc2b      	bgt.n	8000e80 <TIM3_PWM_Init+0x78>
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d002      	beq.n	8000e32 <TIM3_PWM_Init+0x2a>
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d00d      	beq.n	8000e4c <TIM3_PWM_Init+0x44>
	case 4:
		TIM3->CCER |= CapComp4_Enable;
		TIM3->CCMR2 |= OCM4_PWM_Mode | OCPE4_Enable;
		break;
	}
}
 8000e30:	e026      	b.n	8000e80 <TIM3_PWM_Init+0x78>
		TIM3->CCER |= CapComp1_Enable;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6213      	str	r3, [r2, #32]
		TIM3->CCMR1 |= OCM1_PWM_Mode | OCPE1_Enable;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e44:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000e48:	6193      	str	r3, [r2, #24]
		break;
 8000e4a:	e019      	b.n	8000e80 <TIM3_PWM_Init+0x78>
		TIM3->CCER |= CapComp2_Enable;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6213      	str	r3, [r2, #32]
		TIM3->CCMR1 |= OCM2_PWM_Mode | OCPE2_Enable;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e5e:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000e62:	6193      	str	r3, [r2, #24]
		break;
 8000e64:	e00c      	b.n	8000e80 <TIM3_PWM_Init+0x78>
		TIM3->CCER |= CapComp4_Enable;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e70:	6213      	str	r3, [r2, #32]
		TIM3->CCMR2 |= OCM4_PWM_Mode | OCPE4_Enable;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <TIM3_PWM_Init+0x84>)
 8000e78:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8000e7c:	61d3      	str	r3, [r2, #28]
		break;
 8000e7e:	bf00      	nop
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40000400 	.word	0x40000400

08000e90 <TIM3Init>:

/*
 * @Brief Initialize TIM3 with GPIO pins and channels
 */
void TIM3Init()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af04      	add	r7, sp, #16
	GPIO_Config_t x_axis, y_axis, z_axis;

	//Enable Clock Access to TIM2
	RCC_APB1Cmd(TIM3_Enable, ENABLE);
 8000e96:	2101      	movs	r1, #1
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f001 fba3 	bl	80025e4 <RCC_APB1Cmd>

	//Init the output ports for ouput compare mode
	GPIO_Config(&x_axis, GPIOC, Pin6, GPIO_AF, GPIO_PushPull, GPIO_MediumSpeed, GPIO_PUPD_None);
 8000e9e:	f107 001c 	add.w	r0, r7, #28
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2302      	movs	r3, #2
 8000eb0:	2206      	movs	r2, #6
 8000eb2:	4926      	ldr	r1, [pc, #152]	; (8000f4c <TIM3Init+0xbc>)
 8000eb4:	f000 fa89 	bl	80013ca <GPIO_Config>
	GPIO_Init(&x_axis, AF2);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fb6c 	bl	800159c <GPIO_Init>

	GPIO_Config(&y_axis, GPIOC, Pin7, GPIO_AF, GPIO_PushPull, GPIO_MediumSpeed, GPIO_PUPD_None);
 8000ec4:	f107 0010 	add.w	r0, r7, #16
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	491c      	ldr	r1, [pc, #112]	; (8000f4c <TIM3Init+0xbc>)
 8000eda:	f000 fa76 	bl	80013ca <GPIO_Config>
	GPIO_Init(&y_axis, AF2);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fb59 	bl	800159c <GPIO_Init>

	GPIO_Config(&z_axis, GPIOC, Pin9, GPIO_AF, GPIO_PushPull, GPIO_MediumSpeed, GPIO_PUPD_None);
 8000eea:	1d38      	adds	r0, r7, #4
 8000eec:	2300      	movs	r3, #0
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2302      	movs	r3, #2
 8000efa:	2209      	movs	r2, #9
 8000efc:	4913      	ldr	r1, [pc, #76]	; (8000f4c <TIM3Init+0xbc>)
 8000efe:	f000 fa64 	bl	80013ca <GPIO_Config>
	GPIO_Init(&z_axis, AF2);
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2102      	movs	r1, #2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fb48 	bl	800159c <GPIO_Init>

	//Enable PWM mode on the specified channels
	TIM3_PWM_Init(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff ff7b 	bl	8000e08 <TIM3_PWM_Init>
	TIM3_PWM_Init(2);
 8000f12:	2002      	movs	r0, #2
 8000f14:	f7ff ff78 	bl	8000e08 <TIM3_PWM_Init>
	TIM3_PWM_Init(4);
 8000f18:	2004      	movs	r0, #4
 8000f1a:	f7ff ff75 	bl	8000e08 <TIM3_PWM_Init>

	//Set Prescaler and value to count to
	//TODO: Create pre-Processor directives for these values
	TIM3->PSC = 16;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <TIM3Init+0xc0>)
 8000f20:	2210      	movs	r2, #16
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 150;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <TIM3Init+0xc0>)
 8000f26:	2296      	movs	r2, #150	; 0x96
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c

	//Enable the TIM2
	TIM3->EGR |= EGR_Enable;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <TIM3Init+0xc0>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <TIM3Init+0xc0>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= CR1_CEN;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <TIM3Init+0xc0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <TIM3Init+0xc0>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6013      	str	r3, [r2, #0]

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40000400 	.word	0x40000400

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <main>:
void UART2_Init();
void SPI1_Init();
void I2C1_Init();

int main()
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af02      	add	r7, sp, #8
	/*
	 **************************************************************
	 * Initialize Peripherals using stm32f4xx_periphDrivers
	 **************************************************************
	 */
	UART2_Init();
 8000fae:	f000 f889 	bl	80010c4 <UART2_Init>
	SPI1_Init();
 8000fb2:	f000 f879 	bl	80010a8 <SPI1_Init>
	TIM3Init();
 8000fb6:	f7ff ff6b 	bl	8000e90 <TIM3Init>
	I2C1_Init();
 8000fba:	f000 f89d 	bl	80010f8 <I2C1_Init>
	/*
	 **************************************************************
	 * Call FreeRTOS tasks
	 **************************************************************
	 */
	read_uart = xSemaphoreCreateBinary();
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f002 fb3c 	bl	8003640 <xQueueGenericCreate>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a2c      	ldr	r2, [pc, #176]	; (800107c <main+0xd4>)
 8000fcc:	6013      	str	r3, [r2, #0]
	read_spi = xSemaphoreCreateBinary();
 8000fce:	2203      	movs	r2, #3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f002 fb34 	bl	8003640 <xQueueGenericCreate>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <main+0xd8>)
 8000fdc:	6013      	str	r3, [r2, #0]
	read_i2c = xSemaphoreCreateMutex();
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f002 fba5 	bl	800372e <xQueueCreateMutex>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a27      	ldr	r2, [pc, #156]	; (8001084 <main+0xdc>)
 8000fe8:	6013      	str	r3, [r2, #0]

	read_bme_sensor = xTimerCreate("Periodic Read", pdMS_TO_TICKS(50), pdTRUE, 0, ReadData);
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <main+0xe0>)
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2132      	movs	r1, #50	; 0x32
 8000ff4:	4825      	ldr	r0, [pc, #148]	; (800108c <main+0xe4>)
 8000ff6:	f004 f95b 	bl	80052b0 <xTimerCreate>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a24      	ldr	r2, [pc, #144]	; (8001090 <main+0xe8>)
 8000ffe:	6013      	str	r3, [r2, #0]
	xTimerStart(read_bme_sensor, 0);
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <main+0xe8>)
 8001002:	681c      	ldr	r4, [r3, #0]
 8001004:	f003 fbf8 	bl	80047f8 <xTaskGetTickCount>
 8001008:	4602      	mov	r2, r0
 800100a:	2300      	movs	r3, #0
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2300      	movs	r3, #0
 8001010:	2101      	movs	r1, #1
 8001012:	4620      	mov	r0, r4
 8001014:	f004 f9a8 	bl	8005368 <xTimerGenericCommand>

	print_data = xQueueCreate(10, sizeof(AccelerometerData));				//Queue to send data between PWM and print data
 8001018:	2200      	movs	r2, #0
 800101a:	2108      	movs	r1, #8
 800101c:	200a      	movs	r0, #10
 800101e:	f002 fb0f 	bl	8003640 <xQueueGenericCreate>
 8001022:	4603      	mov	r3, r0
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <main+0xec>)
 8001026:	6013      	str	r3, [r2, #0]
	adxl_data_queue = xQueueCreate(50, sizeof(AccelerometerData));  		//Create queue to hold read data
 8001028:	2200      	movs	r2, #0
 800102a:	2108      	movs	r1, #8
 800102c:	2032      	movs	r0, #50	; 0x32
 800102e:	f002 fb07 	bl	8003640 <xQueueGenericCreate>
 8001032:	4603      	mov	r3, r0
 8001034:	4a18      	ldr	r2, [pc, #96]	; (8001098 <main+0xf0>)
 8001036:	6013      	str	r3, [r2, #0]
	filtered_data_queue = xQueueCreate(10, sizeof(AccelerometerData));		//Create queue to transmit the filtered data
 8001038:	2200      	movs	r2, #0
 800103a:	2108      	movs	r1, #8
 800103c:	200a      	movs	r0, #10
 800103e:	f002 faff 	bl	8003640 <xQueueGenericCreate>
 8001042:	4603      	mov	r3, r0
 8001044:	4a15      	ldr	r2, [pc, #84]	; (800109c <main+0xf4>)
 8001046:	6013      	str	r3, [r2, #0]
	print_i2c_data = xQueueCreate(10, sizeof(BME_Values));
 8001048:	2200      	movs	r2, #0
 800104a:	2124      	movs	r1, #36	; 0x24
 800104c:	200a      	movs	r0, #10
 800104e:	f002 faf7 	bl	8003640 <xQueueGenericCreate>
 8001052:	4603      	mov	r3, r0
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <main+0xf8>)
 8001056:	6013      	str	r3, [r2, #0]
	send_raw_i2c = xQueueCreate(10, sizeof(bme_raw_array));
 8001058:	2200      	movs	r2, #0
 800105a:	2109      	movs	r1, #9
 800105c:	200a      	movs	r0, #10
 800105e:	f002 faef 	bl	8003640 <xQueueGenericCreate>
 8001062:	4603      	mov	r3, r0
 8001064:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <main+0xfc>)
 8001066:	6013      	str	r3, [r2, #0]
	//new_filtered_data_queue = xQueueCreate(10, sizeof(Sensor_Data));

	ProgramInit();
 8001068:	f7ff fe8a 	bl	8000d80 <ProgramInit>

	vTaskStartScheduler();
 800106c:	f003 fab2 	bl	80045d4 <vTaskStartScheduler>
 8001070:	2300      	movs	r3, #0


}
 8001072:	4618      	mov	r0, r3
 8001074:	3704      	adds	r7, #4
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}
 800107a:	bf00      	nop
 800107c:	200002d4 	.word	0x200002d4
 8001080:	200002d8 	.word	0x200002d8
 8001084:	200002dc 	.word	0x200002dc
 8001088:	080068b1 	.word	0x080068b1
 800108c:	08009584 	.word	0x08009584
 8001090:	200002e0 	.word	0x200002e0
 8001094:	200002c8 	.word	0x200002c8
 8001098:	200002c0 	.word	0x200002c0
 800109c:	200002c4 	.word	0x200002c4
 80010a0:	200002cc 	.word	0x200002cc
 80010a4:	200002d0 	.word	0x200002d0

080010a8 <SPI1_Init>:

void SPI1_Init()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	SPI_Specs_Init();
 80010ac:	f000 f83e 	bl	800112c <SPI_Specs_Init>
	SPI_Init(&SPI1_Example);
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <SPI1_Init+0x18>)
 80010b2:	f001 fbd5 	bl	8002860 <SPI_Init>
	Slave_Pin_Init();
 80010b6:	f000 f867 	bl	8001188 <Slave_Pin_Init>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000258 	.word	0x20000258

080010c4 <UART2_Init>:

void UART2_Init()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	UART_Config(&UART2, USART2, UART_MODE_TXRX, 115200);
 80010c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010cc:	220c      	movs	r2, #12
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <UART2_Init+0x2c>)
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <UART2_Init+0x30>)
 80010d2:	f001 feaf 	bl	8002e34 <UART_Config>
	UART_Init(&UART2);
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <UART2_Init+0x30>)
 80010d8:	f001 ffce 	bl	8003078 <UART_Init>
	UART_Interrupt_Init(&UART2, UART_RXNEIE_Enable);
 80010dc:	2120      	movs	r1, #32
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <UART2_Init+0x30>)
 80010e0:	f002 f8a4 	bl	800322c <UART_Interrupt_Init>
	NVIC_SetPriority(USART2_IRQn, 5);
 80010e4:	2105      	movs	r1, #5
 80010e6:	2026      	movs	r0, #38	; 0x26
 80010e8:	f7ff ff34 	bl	8000f54 <__NVIC_SetPriority>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40004400 	.word	0x40004400
 80010f4:	2000028c 	.word	0x2000028c

080010f8 <I2C1_Init>:

void I2C1_Init()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af02      	add	r7, sp, #8
	I2C_Config(&BME_Sensor, I2C1, SM_100KHZ, FM_DUTY_2, Pin8, Pin9);
 80010fe:	2309      	movs	r3, #9
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	2308      	movs	r3, #8
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <I2C1_Init+0x28>)
 800110a:	4906      	ldr	r1, [pc, #24]	; (8001124 <I2C1_Init+0x2c>)
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <I2C1_Init+0x30>)
 800110e:	f000 ff6e 	bl	8001fee <I2C_Config>
	I2C_Init(&BME_Sensor);
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <I2C1_Init+0x30>)
 8001114:	f000 ff88 	bl	8002028 <I2C_Init>
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	000186a0 	.word	0x000186a0
 8001124:	40005400 	.word	0x40005400
 8001128:	200002a0 	.word	0x200002a0

0800112c <SPI_Specs_Init>:

/*
 * @Brief Function to set the SPI specs
 */
void SPI_Specs_Init()
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	//Set desired pins
	SPI1_Example.SPI_Config.cs_gpio = GPIOA;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <SPI_Specs_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <SPI_Specs_Init+0x54>)
 8001134:	609a      	str	r2, [r3, #8]
	SPI1_Example.SPI_Config.pin_clk = Pin5;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <SPI_Specs_Init+0x50>)
 8001138:	2205      	movs	r2, #5
 800113a:	715a      	strb	r2, [r3, #5]
	SPI1_Example.SPI_Config.pin_miso = Pin6;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <SPI_Specs_Init+0x50>)
 800113e:	2206      	movs	r2, #6
 8001140:	71da      	strb	r2, [r3, #7]
	SPI1_Example.SPI_Config.pin_mosi = Pin7;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <SPI_Specs_Init+0x50>)
 8001144:	2207      	movs	r2, #7
 8001146:	719a      	strb	r2, [r3, #6]

	//Set desired transfer methods
	SPI1_Example.ssm = SSM_Enable;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <SPI_Specs_Init+0x50>)
 800114a:	2201      	movs	r2, #1
 800114c:	745a      	strb	r2, [r3, #17]
	SPI1_Example.SPIx = SPI1;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <SPI_Specs_Init+0x50>)
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <SPI_Specs_Init+0x58>)
 8001152:	601a      	str	r2, [r3, #0]
	SPI1_Example.SPI_Config.baudrate_ctrl = DIV4;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <SPI_Specs_Init+0x50>)
 8001156:	2201      	movs	r2, #1
 8001158:	731a      	strb	r2, [r3, #12]
	SPI1_Example.SPI_Config.cpha = Falling_Edge;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <SPI_Specs_Init+0x50>)
 800115c:	2201      	movs	r2, #1
 800115e:	739a      	strb	r2, [r3, #14]
	SPI1_Example.SPI_Config.cpol = Even_Polarity;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <SPI_Specs_Init+0x50>)
 8001162:	2202      	movs	r2, #2
 8001164:	735a      	strb	r2, [r3, #13]
	SPI1_Example.SPI_Config.data_format = MSB_First;
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <SPI_Specs_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	73da      	strb	r2, [r3, #15]
	SPI1_Example.data_frame = Data_8_Bits;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <SPI_Specs_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	741a      	strb	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000258 	.word	0x20000258
 8001180:	40020000 	.word	0x40020000
 8001184:	40013000 	.word	0x40013000

08001188 <Slave_Pin_Init>:
/*
 * @Brief	This function enables GPIO output mode, so the GPIO pin can act as a slave pin
 * 			to the accelerometer data.
 */
void Slave_Pin_Init()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af04      	add	r7, sp, #16
	//Create and initialze a slave pin with the desired port and pin
	GPIO_Config(&ADXL, GPIOA, Pin8, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 800118e:	2301      	movs	r3, #1
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	2300      	movs	r3, #0
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	2208      	movs	r2, #8
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <Slave_Pin_Init+0x38>)
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <Slave_Pin_Init+0x3c>)
 80011a2:	f000 f912 	bl	80013ca <GPIO_Config>
	GPIO_Init(&ADXL, 0x0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <Slave_Pin_Init+0x3c>)
 80011aa:	f000 f9f7 	bl	800159c <GPIO_Init>
	GPIOA->ODR |= (1U << 8); //Used to enable the P-MOS and ensure CS is active high
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <Slave_Pin_Init+0x38>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <Slave_Pin_Init+0x38>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b8:	6153      	str	r3, [r2, #20]
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020000 	.word	0x40020000
 80011c4:	20000280 	.word	0x20000280

080011c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return 1;
 80011cc:	2301      	movs	r3, #1
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_kill>:

int _kill(int pid, int sig)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011e2:	f006 fa8f 	bl	8007704 <__errno>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2216      	movs	r2, #22
 80011ea:	601a      	str	r2, [r3, #0]
  return -1;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_exit>:

void _exit (int status)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ffe7 	bl	80011d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800120a:	e7fe      	b.n	800120a <_exit+0x12>

0800120c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e00a      	b.n	8001234 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800121e:	f3af 8000 	nop.w
 8001222:	4601      	mov	r1, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	b2ca      	uxtb	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbf0      	blt.n	800121e <_read+0x12>
  }

  return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e009      	b.n	800126c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fd09 	bl	8000c78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf1      	blt.n	8001258 <_write+0x12>
  }
  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a6:	605a      	str	r2, [r3, #4]
  return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_isatty>:

int _isatty(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f006 f9f4 	bl	8007704 <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20018000 	.word	0x20018000
 8001348:	00000400 	.word	0x00000400
 800134c:	20000304 	.word	0x20000304
 8001350:	20004dc0 	.word	0x20004dc0

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800137c:	f7ff ffea 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	; (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f006 f9b3 	bl	8007710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff fdfd 	bl	8000fa8 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 80013bc:	08009954 	.word	0x08009954
  ldr r2, =_sbss
 80013c0:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 80013c4:	20004dbc 	.word	0x20004dbc

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>

080013ca <GPIO_Config>:
 * 			0x0		or		GPIO_PUPD_None
 * 			0x1		or		GPIO_PullUp
 * 			0x2		or		GPIO_PullDown
 */
void GPIO_Config(GPIO_Config_t *GPIO_Config, GPIO_TypeDef *Port, uint8_t Pin, uint8_t Mode, uint8_t OType, uint8_t OSpeed, uint8_t PUPD)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	4611      	mov	r1, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	460b      	mov	r3, r1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	4613      	mov	r3, r2
 80013de:	71bb      	strb	r3, [r7, #6]
	GPIO_Config->GPIO_Pin = Pin;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	701a      	strb	r2, [r3, #0]
	GPIO_Config->GPIO_Port = Port;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	609a      	str	r2, [r3, #8]
	GPIO_Config->GPIO_MODE = Mode;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	705a      	strb	r2, [r3, #1]
	GPIO_Config->GPIO_OTYPE = OType;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	7e3a      	ldrb	r2, [r7, #24]
 80013f6:	709a      	strb	r2, [r3, #2]
	GPIO_Config->GPIO_OSPEED = OSpeed;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	7f3a      	ldrb	r2, [r7, #28]
 80013fc:	70da      	strb	r2, [r3, #3]
	GPIO_Config->GPIO_PUPD = PUPD;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001404:	711a      	strb	r2, [r3, #4]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <GPIO_PeriphClck>:
 * @param	GPIOx: Defines the specific GPIO port, where x can range from A - E, or H.
 *
 * @param	state: Specifies whether to enable or disable the peripheral.
 */
void GPIO_PeriphClck(GPIO_TypeDef *GPIOx, FunctionalState state)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d135      	bne.n	8001492 <GPIO_PeriphClck+0x7e>
	{
		if(GPIOx == GPIOA)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a36      	ldr	r2, [pc, #216]	; (8001504 <GPIO_PeriphClck+0xf0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d104      	bne.n	8001438 <GPIO_PeriphClck+0x24>
		{
			RCC_AHB1Cmd(GPIOA_Enable, ENABLE);
 800142e:	2101      	movs	r1, #1
 8001430:	2001      	movs	r0, #1
 8001432:	f001 f8b7 	bl	80025a4 <RCC_AHB1Cmd>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
		}

	}

}
 8001436:	e061      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a33      	ldr	r2, [pc, #204]	; (8001508 <GPIO_PeriphClck+0xf4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d104      	bne.n	800144a <GPIO_PeriphClck+0x36>
			RCC_AHB1Cmd(GPIOB_Enable, ENABLE);
 8001440:	2101      	movs	r1, #1
 8001442:	2002      	movs	r0, #2
 8001444:	f001 f8ae 	bl	80025a4 <RCC_AHB1Cmd>
}
 8001448:	e058      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a2f      	ldr	r2, [pc, #188]	; (800150c <GPIO_PeriphClck+0xf8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d104      	bne.n	800145c <GPIO_PeriphClck+0x48>
			RCC_AHB1Cmd(GPIOC_Enable, ENABLE);
 8001452:	2101      	movs	r1, #1
 8001454:	2004      	movs	r0, #4
 8001456:	f001 f8a5 	bl	80025a4 <RCC_AHB1Cmd>
}
 800145a:	e04f      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a2c      	ldr	r2, [pc, #176]	; (8001510 <GPIO_PeriphClck+0xfc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d104      	bne.n	800146e <GPIO_PeriphClck+0x5a>
			RCC_AHB1Cmd(GPIOD_Enable, ENABLE);
 8001464:	2101      	movs	r1, #1
 8001466:	2008      	movs	r0, #8
 8001468:	f001 f89c 	bl	80025a4 <RCC_AHB1Cmd>
}
 800146c:	e046      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <GPIO_PeriphClck+0x100>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d104      	bne.n	8001480 <GPIO_PeriphClck+0x6c>
			RCC_AHB1Cmd(GPIOE_Enable, ENABLE);
 8001476:	2101      	movs	r1, #1
 8001478:	2010      	movs	r0, #16
 800147a:	f001 f893 	bl	80025a4 <RCC_AHB1Cmd>
}
 800147e:	e03d      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <GPIO_PeriphClck+0x104>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d139      	bne.n	80014fc <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, ENABLE);
 8001488:	2101      	movs	r1, #1
 800148a:	2080      	movs	r0, #128	; 0x80
 800148c:	f001 f88a 	bl	80025a4 <RCC_AHB1Cmd>
}
 8001490:	e034      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		if(GPIOx == GPIOA)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <GPIO_PeriphClck+0xf0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d104      	bne.n	80014a4 <GPIO_PeriphClck+0x90>
			RCC_AHB1Cmd(GPIOA_Enable, DISABLE);
 800149a:	2100      	movs	r1, #0
 800149c:	2001      	movs	r0, #1
 800149e:	f001 f881 	bl	80025a4 <RCC_AHB1Cmd>
}
 80014a2:	e02b      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOB)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a18      	ldr	r2, [pc, #96]	; (8001508 <GPIO_PeriphClck+0xf4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d104      	bne.n	80014b6 <GPIO_PeriphClck+0xa2>
			RCC_AHB1Cmd(GPIOB_Enable, DISABLE);
 80014ac:	2100      	movs	r1, #0
 80014ae:	2002      	movs	r0, #2
 80014b0:	f001 f878 	bl	80025a4 <RCC_AHB1Cmd>
}
 80014b4:	e022      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOC)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <GPIO_PeriphClck+0xf8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d104      	bne.n	80014c8 <GPIO_PeriphClck+0xb4>
			RCC_AHB1Cmd(GPIOC_Enable, DISABLE);
 80014be:	2100      	movs	r1, #0
 80014c0:	2004      	movs	r0, #4
 80014c2:	f001 f86f 	bl	80025a4 <RCC_AHB1Cmd>
}
 80014c6:	e019      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOD)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a11      	ldr	r2, [pc, #68]	; (8001510 <GPIO_PeriphClck+0xfc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d104      	bne.n	80014da <GPIO_PeriphClck+0xc6>
			RCC_AHB1Cmd(GPIOD_Enable, DISABLE);
 80014d0:	2100      	movs	r1, #0
 80014d2:	2008      	movs	r0, #8
 80014d4:	f001 f866 	bl	80025a4 <RCC_AHB1Cmd>
}
 80014d8:	e010      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <GPIO_PeriphClck+0x100>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d104      	bne.n	80014ec <GPIO_PeriphClck+0xd8>
			RCC_AHB1Cmd(GPIOE_Enable, DISABLE);
 80014e2:	2100      	movs	r1, #0
 80014e4:	2010      	movs	r0, #16
 80014e6:	f001 f85d 	bl	80025a4 <RCC_AHB1Cmd>
}
 80014ea:	e007      	b.n	80014fc <GPIO_PeriphClck+0xe8>
		else if(GPIOx == GPIOH)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <GPIO_PeriphClck+0x104>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d103      	bne.n	80014fc <GPIO_PeriphClck+0xe8>
			RCC_AHB1Cmd(GPIOH_Enable, DISABLE);
 80014f4:	2100      	movs	r1, #0
 80014f6:	2080      	movs	r0, #128	; 0x80
 80014f8:	f001 f854 	bl	80025a4 <RCC_AHB1Cmd>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021000 	.word	0x40021000
 8001518:	40021c00 	.word	0x40021c00

0800151c <GPIO_AlternateFunctionConfig>:
 * @param	alt_function: This will take in the alternate function value that the user wishes to use.
 * 			The specific alternate function values and their functions are present in the data sheet.
 * 			The inputs for this function are AF0 - AF15;
 */
void GPIO_AlternateFunctionConfig(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	73fb      	strb	r3, [r7, #15]
	uint8_t alt_function_array = pin/8;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	73bb      	strb	r3, [r7, #14]

	if(alt_function_array == 1)
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <GPIO_AlternateFunctionConfig+0x24>
	{
		pin -= 8;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3b08      	subs	r3, #8
 800153e:	73fb      	strb	r3, [r7, #15]
	}

	GPIO_Config->GPIO_Port->AFR[alt_function_array] &= ~(AF15 << (pin * 4));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	7bba      	ldrb	r2, [r7, #14]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	7bba      	ldrb	r2, [r7, #14]
 8001560:	4001      	ands	r1, r0
 8001562:	3208      	adds	r2, #8
 8001564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIO_Config->GPIO_Port->AFR[alt_function_array] |= (alt_function << (pin * 4));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	7bba      	ldrb	r2, [r7, #14]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	7bba      	ldrb	r2, [r7, #14]
 8001586:	4301      	orrs	r1, r0
 8001588:	3208      	adds	r2, #8
 800158a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <GPIO_Init>:
 *
 * @param	GPIO_Config: pointer to the GPIO_Config_t data structure that contains the
 * 			configuration parameters for the specific GPIO pin.
 */
void GPIO_Init(GPIO_Config_t *GPIO_Config, AFR_Config_t alt_function)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	73fb      	strb	r3, [r7, #15]
	uint32_t temp_variable;

	GPIO_PeriphClck(GPIO_Config->GPIO_Port, ENABLE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff2d 	bl	8001414 <GPIO_PeriphClck>

	if(GPIO_Config->GPIO_Pin == AllPins)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	f040 8094 	bne.w	80016ec <GPIO_Init+0x150>
	{
		if(GPIO_Config->GPIO_Port == GPIOA)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a88      	ldr	r2, [pc, #544]	; (80017ec <GPIO_Init+0x250>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d112      	bne.n	80015f4 <GPIO_Init+0x58>
		{
			/*Use the lock configuration to lock PA13 and PA14*/
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80015d6:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_0_Pin13_Pin14;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80015e0:	61da      	str	r2, [r3, #28]
			GPIO_Config->GPIO_Port->LCKR = LCKR_1_Pin13_Pin14;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f44f 32b0 	mov.w	r2, #90112	; 0x16000
 80015ea:	61da      	str	r2, [r3, #28]
			temp_variable = GPIO_Config->GPIO_Port->LCKR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	60bb      	str	r3, [r7, #8]
		}

		/*Used to set each pin is AllPins is set by user*/
		for(pin = 0; pin < 16; pin++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e074      	b.n	80016e4 <GPIO_Init+0x148>
		{
			GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2103      	movs	r1, #3
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	4619      	mov	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	400a      	ands	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
			GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	785b      	ldrb	r3, [r3, #1]
 8001620:	4619      	mov	r1, r3
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	4619      	mov	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

			GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	400a      	ands	r2, r1
 800164c:	605a      	str	r2, [r3, #4]
			GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	4619      	mov	r1, r3
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	4619      	mov	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]

			GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	4619      	mov	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	400a      	ands	r2, r1
 8001684:	609a      	str	r2, [r3, #8]
			GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	78db      	ldrb	r3, [r3, #3]
 8001690:	4619      	mov	r1, r3
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	4619      	mov	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]

			GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2103      	movs	r1, #3
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	400a      	ands	r2, r1
 80016be:	60da      	str	r2, [r3, #12]
			GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	791b      	ldrb	r3, [r3, #4]
 80016ca:	4619      	mov	r1, r3
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	4619      	mov	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	430a      	orrs	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]
		for(pin = 0; pin < 16; pin++)
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	3301      	adds	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	d987      	bls.n	80015fa <GPIO_Init+0x5e>

		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
	}

}
 80016ea:	e07a      	b.n	80017e2 <GPIO_Init+0x246>
		if(GPIO_Config->GPIO_MODE == GPIO_AF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d104      	bne.n	80016fe <GPIO_Init+0x162>
			GPIO_AlternateFunctionConfig(GPIO_Config, alt_function);
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff0f 	bl	800151c <GPIO_AlternateFunctionConfig>
		GPIO_Config->GPIO_Port->OTYPER &= ~(GPIO_OType_Reset << pin);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4619      	mov	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	400a      	ands	r2, r1
 8001716:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OTYPER |= ((GPIO_Config->GPIO_OTYPE) << pin);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	789b      	ldrb	r3, [r3, #2]
 8001722:	4619      	mov	r1, r3
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	4619      	mov	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	430a      	orrs	r2, r1
 8001732:	605a      	str	r2, [r3, #4]
		GPIO_Config->GPIO_Port->OSPEEDR &= ~(GPIO_OSpeed_Reset << (pin * 2));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4619      	mov	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	400a      	ands	r2, r1
 800174e:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->OSPEEDR |= ((GPIO_Config->GPIO_OSPEED) << (pin * 2));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	78db      	ldrb	r3, [r3, #3]
 800175a:	4619      	mov	r1, r3
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	4619      	mov	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	430a      	orrs	r2, r1
 800176c:	609a      	str	r2, [r3, #8]
		GPIO_Config->GPIO_Port->PUPDR &= ~(GPIO_PUPD_Reset << (pin * 2));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2103      	movs	r1, #3
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	400a      	ands	r2, r1
 8001788:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->PUPDR |= ((GPIO_Config->GPIO_PUPD) << (pin * 2));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	791b      	ldrb	r3, [r3, #4]
 8001794:	4619      	mov	r1, r3
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
		GPIO_Config->GPIO_Port->MODER &= ~(GPIO_Mode_Reset << (pin * 2));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2103      	movs	r1, #3
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4619      	mov	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
		GPIO_Config->GPIO_Port->MODER |= ((GPIO_Config->GPIO_MODE) << (pin * 2));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	4619      	mov	r1, r3
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40020000 	.word	0x40020000

080017f0 <SPI1_Periph_Enable>:

/*
 * @Brief SPI peripheral enabled specified for SPI1. There are 3 other functions: 1 for each SPI peripheral.
 */
void SPI1_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af04      	add	r7, sp, #16
 80017f6:	6039      	str	r1, [r7, #0]
 80017f8:	4611      	mov	r1, r2
 80017fa:	461a      	mov	r2, r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	460b      	mov	r3, r1
 8001802:	71bb      	strb	r3, [r7, #6]
 8001804:	4613      	mov	r3, r2
 8001806:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI1_Periph;

	//Check if SSM bit is disabled
	if(!ssm_enabled)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d112      	bne.n	8001834 <SPI1_Periph_Enable+0x44>
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI1_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800180e:	79ba      	ldrb	r2, [r7, #6]
 8001810:	f107 000c 	add.w	r0, r7, #12
 8001814:	2300      	movs	r3, #0
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2302      	movs	r3, #2
 8001822:	494d      	ldr	r1, [pc, #308]	; (8001958 <SPI1_Periph_Enable+0x168>)
 8001824:	f7ff fdd1 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2105      	movs	r1, #5
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff feb4 	bl	800159c <GPIO_Init>
		GPIO_Config(&SPI1_Periph, GPIOA, Pin9, GPIO_Output, GPIO_PushPull, GPIO_HighSpeed, GPIO_PullUp);
		GPIO_Init(&SPI1_Periph, 0x0);
	}*/

	//Configure the SPI clock pin
	switch(clk_pin){
 8001834:	797b      	ldrb	r3, [r7, #5]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d015      	beq.n	8001866 <SPI1_Periph_Enable+0x76>
 800183a:	2b05      	cmp	r3, #5
 800183c:	d127      	bne.n	800188e <SPI1_Periph_Enable+0x9e>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOA, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800183e:	797a      	ldrb	r2, [r7, #5]
 8001840:	f107 000c 	add.w	r0, r7, #12
 8001844:	2300      	movs	r3, #0
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2300      	movs	r3, #0
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2302      	movs	r3, #2
 8001852:	4941      	ldr	r1, [pc, #260]	; (8001958 <SPI1_Periph_Enable+0x168>)
 8001854:	f7ff fdb9 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2105      	movs	r1, #5
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fe9c 	bl	800159c <GPIO_Init>
		break;
 8001864:	e013      	b.n	800188e <SPI1_Periph_Enable+0x9e>
	case 3:
		GPIO_Config(&SPI1_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001866:	797a      	ldrb	r2, [r7, #5]
 8001868:	f107 000c 	add.w	r0, r7, #12
 800186c:	2300      	movs	r3, #0
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	2300      	movs	r3, #0
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2302      	movs	r3, #2
 800187a:	4938      	ldr	r1, [pc, #224]	; (800195c <SPI1_Periph_Enable+0x16c>)
 800187c:	f7ff fda5 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2105      	movs	r1, #5
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fe88 	bl	800159c <GPIO_Init>
		break;
 800188c:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 800188e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001892:	2b04      	cmp	r3, #4
 8001894:	d016      	beq.n	80018c4 <SPI1_Periph_Enable+0xd4>
 8001896:	2b06      	cmp	r3, #6
 8001898:	d129      	bne.n	80018ee <SPI1_Periph_Enable+0xfe>
	case 6:
		GPIO_Config(&SPI1_Periph, GPIOA, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 800189a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800189e:	f107 000c 	add.w	r0, r7, #12
 80018a2:	2300      	movs	r3, #0
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2302      	movs	r3, #2
 80018b0:	4929      	ldr	r1, [pc, #164]	; (8001958 <SPI1_Periph_Enable+0x168>)
 80018b2:	f7ff fd8a 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2105      	movs	r1, #5
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fe6d 	bl	800159c <GPIO_Init>
		break;
 80018c2:	e014      	b.n	80018ee <SPI1_Periph_Enable+0xfe>
	case 4:
		GPIO_Config(&SPI1_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80018c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018c8:	f107 000c 	add.w	r0, r7, #12
 80018cc:	2300      	movs	r3, #0
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	2300      	movs	r3, #0
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2300      	movs	r3, #0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2302      	movs	r3, #2
 80018da:	4920      	ldr	r1, [pc, #128]	; (800195c <SPI1_Periph_Enable+0x16c>)
 80018dc:	f7ff fd75 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2105      	movs	r1, #5
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fe58 	bl	800159c <GPIO_Init>
		break;
 80018ec:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 80018ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d016      	beq.n	8001924 <SPI1_Periph_Enable+0x134>
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	d129      	bne.n	800194e <SPI1_Periph_Enable+0x15e>
	case 7:
		GPIO_Config(&SPI1_Periph, GPIOA, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80018fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018fe:	f107 000c 	add.w	r0, r7, #12
 8001902:	2300      	movs	r3, #0
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	2300      	movs	r3, #0
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	2300      	movs	r3, #0
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2302      	movs	r3, #2
 8001910:	4911      	ldr	r1, [pc, #68]	; (8001958 <SPI1_Periph_Enable+0x168>)
 8001912:	f7ff fd5a 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2105      	movs	r1, #5
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe3d 	bl	800159c <GPIO_Init>
		break;
 8001922:	e014      	b.n	800194e <SPI1_Periph_Enable+0x15e>
	case 5:
		GPIO_Config(&SPI1_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001924:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001928:	f107 000c 	add.w	r0, r7, #12
 800192c:	2300      	movs	r3, #0
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2300      	movs	r3, #0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2302      	movs	r3, #2
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <SPI1_Periph_Enable+0x16c>)
 800193c:	f7ff fd45 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI1_Periph, AF5);
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2105      	movs	r1, #5
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fe28 	bl	800159c <GPIO_Init>
		break;
 800194c:	bf00      	nop
	}
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40020000 	.word	0x40020000
 800195c:	40020400 	.word	0x40020400

08001960 <SPI2_Periph_Enable>:

void SPI2_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af04      	add	r7, sp, #16
 8001966:	6039      	str	r1, [r7, #0]
 8001968:	4611      	mov	r1, r2
 800196a:	461a      	mov	r2, r3
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	460b      	mov	r3, r1
 8001972:	71bb      	strb	r3, [r7, #6]
 8001974:	4613      	mov	r3, r2
 8001976:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI2_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d013      	beq.n	80019a6 <SPI2_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI2_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 800197e:	79ba      	ldrb	r2, [r7, #6]
 8001980:	f107 000c 	add.w	r0, r7, #12
 8001984:	2301      	movs	r3, #1
 8001986:	9302      	str	r3, [sp, #8]
 8001988:	2300      	movs	r3, #0
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2300      	movs	r3, #0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	f7ff fd19 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI2_Periph, 0x00);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fdfc 	bl	800159c <GPIO_Init>
 80019a4:	e012      	b.n	80019cc <SPI2_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI2_Periph, GPIOB, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80019a6:	79ba      	ldrb	r2, [r7, #6]
 80019a8:	f107 000c 	add.w	r0, r7, #12
 80019ac:	2300      	movs	r3, #0
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2300      	movs	r3, #0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2302      	movs	r3, #2
 80019ba:	494d      	ldr	r1, [pc, #308]	; (8001af0 <SPI2_Periph_Enable+0x190>)
 80019bc:	f7ff fd05 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2105      	movs	r1, #5
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fde8 	bl	800159c <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 80019cc:	797b      	ldrb	r3, [r7, #5]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d113      	bne.n	80019fa <SPI2_Periph_Enable+0x9a>
	case 3:
		GPIO_Config(&SPI2_Periph, GPIOD, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80019d2:	797a      	ldrb	r2, [r7, #5]
 80019d4:	f107 000c 	add.w	r0, r7, #12
 80019d8:	2300      	movs	r3, #0
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	2300      	movs	r3, #0
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2300      	movs	r3, #0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2302      	movs	r3, #2
 80019e6:	4943      	ldr	r1, [pc, #268]	; (8001af4 <SPI2_Periph_Enable+0x194>)
 80019e8:	f7ff fcef 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2105      	movs	r1, #5
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fdd2 	bl	800159c <GPIO_Init>
		break;
 80019f8:	e013      	b.n	8001a22 <SPI2_Periph_Enable+0xc2>
	default:
		GPIO_Config(&SPI2_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 80019fa:	797a      	ldrb	r2, [r7, #5]
 80019fc:	f107 000c 	add.w	r0, r7, #12
 8001a00:	2300      	movs	r3, #0
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	4938      	ldr	r1, [pc, #224]	; (8001af0 <SPI2_Periph_Enable+0x190>)
 8001a10:	f7ff fcdb 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2105      	movs	r1, #5
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fdbe 	bl	800159c <GPIO_Init>
		break;
 8001a20:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8001a22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d002      	beq.n	8001a30 <SPI2_Periph_Enable+0xd0>
 8001a2a:	2b0e      	cmp	r3, #14
 8001a2c:	d015      	beq.n	8001a5a <SPI2_Periph_Enable+0xfa>
 8001a2e:	e029      	b.n	8001a84 <SPI2_Periph_Enable+0x124>
	case 2:
		GPIO_Config(&SPI2_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001a30:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a34:	f107 000c 	add.w	r0, r7, #12
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2302      	movs	r3, #2
 8001a46:	492c      	ldr	r1, [pc, #176]	; (8001af8 <SPI2_Periph_Enable+0x198>)
 8001a48:	f7ff fcbf 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2105      	movs	r1, #5
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fda2 	bl	800159c <GPIO_Init>
		break;
 8001a58:	e014      	b.n	8001a84 <SPI2_Periph_Enable+0x124>
	case 14:
		GPIO_Config(&SPI2_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001a5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a5e:	f107 000c 	add.w	r0, r7, #12
 8001a62:	2300      	movs	r3, #0
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	2300      	movs	r3, #0
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	491f      	ldr	r1, [pc, #124]	; (8001af0 <SPI2_Periph_Enable+0x190>)
 8001a72:	f7ff fcaa 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd8d 	bl	800159c <GPIO_Init>
		break;
 8001a82:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8001a84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d002      	beq.n	8001a92 <SPI2_Periph_Enable+0x132>
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d015      	beq.n	8001abc <SPI2_Periph_Enable+0x15c>
	case 15:
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI2_Periph, AF5);
		break;
	}
}
 8001a90:	e029      	b.n	8001ae6 <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001a92:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a96:	f107 000c 	add.w	r0, r7, #12
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	4913      	ldr	r1, [pc, #76]	; (8001af8 <SPI2_Periph_Enable+0x198>)
 8001aaa:	f7ff fc8e 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fd71 	bl	800159c <GPIO_Init>
		break;
 8001aba:	e014      	b.n	8001ae6 <SPI2_Periph_Enable+0x186>
		GPIO_Config(&SPI2_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001abc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ac0:	f107 000c 	add.w	r0, r7, #12
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2300      	movs	r3, #0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	4907      	ldr	r1, [pc, #28]	; (8001af0 <SPI2_Periph_Enable+0x190>)
 8001ad4:	f7ff fc79 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI2_Periph, AF5);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2105      	movs	r1, #5
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fd5c 	bl	800159c <GPIO_Init>
		break;
 8001ae4:	bf00      	nop
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020c00 	.word	0x40020c00
 8001af8:	40020800 	.word	0x40020800

08001afc <SPI3_Periph_Enable>:

void SPI3_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	6039      	str	r1, [r7, #0]
 8001b04:	4611      	mov	r1, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	71bb      	strb	r3, [r7, #6]
 8001b10:	4613      	mov	r3, r2
 8001b12:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI3_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d013      	beq.n	8001b42 <SPI3_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI3_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8001b1a:	79ba      	ldrb	r2, [r7, #6]
 8001b1c:	f107 000c 	add.w	r0, r7, #12
 8001b20:	2301      	movs	r3, #1
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	f7ff fc4b 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, 0x00);
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fd2e 	bl	800159c <GPIO_Init>
 8001b40:	e012      	b.n	8001b68 <SPI3_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI3_Periph, GPIOA, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001b42:	79ba      	ldrb	r2, [r7, #6]
 8001b44:	f107 000c 	add.w	r0, r7, #12
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2302      	movs	r3, #2
 8001b56:	495a      	ldr	r1, [pc, #360]	; (8001cc0 <SPI3_Periph_Enable+0x1c4>)
 8001b58:	f7ff fc37 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2106      	movs	r1, #6
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fd1a 	bl	800159c <GPIO_Init>
	}

	//Configure the SPI clock pin
	switch(clk_pin){
 8001b68:	797b      	ldrb	r3, [r7, #5]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d015      	beq.n	8001b9a <SPI3_Periph_Enable+0x9e>
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	d127      	bne.n	8001bc2 <SPI3_Periph_Enable+0xc6>
	case 10:
		GPIO_Config(&SPI3_Periph, GPIOC, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001b72:	797a      	ldrb	r2, [r7, #5]
 8001b74:	f107 000c 	add.w	r0, r7, #12
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2302      	movs	r3, #2
 8001b86:	494f      	ldr	r1, [pc, #316]	; (8001cc4 <SPI3_Periph_Enable+0x1c8>)
 8001b88:	f7ff fc1f 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2106      	movs	r1, #6
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fd02 	bl	800159c <GPIO_Init>
		break;
 8001b98:	e013      	b.n	8001bc2 <SPI3_Periph_Enable+0xc6>
	case 3:
		GPIO_Config(&SPI3_Periph, GPIOB, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001b9a:	797a      	ldrb	r2, [r7, #5]
 8001b9c:	f107 000c 	add.w	r0, r7, #12
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2302      	movs	r3, #2
 8001bae:	4946      	ldr	r1, [pc, #280]	; (8001cc8 <SPI3_Periph_Enable+0x1cc>)
 8001bb0:	f7ff fc0b 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2106      	movs	r1, #6
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fcee 	bl	800159c <GPIO_Init>
		break;
 8001bc0:	bf00      	nop
	}

	//Conigure MISO pin
	switch(miso_pin){
 8001bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d016      	beq.n	8001bf8 <SPI3_Periph_Enable+0xfc>
 8001bca:	2b0b      	cmp	r3, #11
 8001bcc:	d129      	bne.n	8001c22 <SPI3_Periph_Enable+0x126>
	case 11:
		GPIO_Config(&SPI3_Periph, GPIOC, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001bce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bd2:	f107 000c 	add.w	r0, r7, #12
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9302      	str	r3, [sp, #8]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	2300      	movs	r3, #0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2302      	movs	r3, #2
 8001be4:	4937      	ldr	r1, [pc, #220]	; (8001cc4 <SPI3_Periph_Enable+0x1c8>)
 8001be6:	f7ff fbf0 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	2106      	movs	r1, #6
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fcd3 	bl	800159c <GPIO_Init>
		break;
 8001bf6:	e014      	b.n	8001c22 <SPI3_Periph_Enable+0x126>
	case 4:
		GPIO_Config(&SPI3_Periph, GPIOB, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001bf8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bfc:	f107 000c 	add.w	r0, r7, #12
 8001c00:	2300      	movs	r3, #0
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	492e      	ldr	r1, [pc, #184]	; (8001cc8 <SPI3_Periph_Enable+0x1cc>)
 8001c10:	f7ff fbdb 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	2106      	movs	r1, #6
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fcbe 	bl	800159c <GPIO_Init>
		break;
 8001c20:	bf00      	nop
	}

	//Configure MOSI pin
	switch(mosi_pin){
 8001c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d006      	beq.n	8001c38 <SPI3_Periph_Enable+0x13c>
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	dc43      	bgt.n	8001cb6 <SPI3_Periph_Enable+0x1ba>
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d017      	beq.n	8001c62 <SPI3_Periph_Enable+0x166>
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d02a      	beq.n	8001c8c <SPI3_Periph_Enable+0x190>
		break;
	case 6:
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
		GPIO_Init(&SPI3_Periph, AF5);
	}
}
 8001c36:	e03e      	b.n	8001cb6 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOC, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001c38:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c3c:	f107 000c 	add.w	r0, r7, #12
 8001c40:	2300      	movs	r3, #0
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	491d      	ldr	r1, [pc, #116]	; (8001cc4 <SPI3_Periph_Enable+0x1c8>)
 8001c50:	f7ff fbbb 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2106      	movs	r1, #6
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fc9e 	bl	800159c <GPIO_Init>
		break;
 8001c60:	e029      	b.n	8001cb6 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOB, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001c62:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c66:	f107 000c 	add.w	r0, r7, #12
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2302      	movs	r3, #2
 8001c78:	4913      	ldr	r1, [pc, #76]	; (8001cc8 <SPI3_Periph_Enable+0x1cc>)
 8001c7a:	f7ff fba6 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF6);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	2106      	movs	r1, #6
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fc89 	bl	800159c <GPIO_Init>
		break;
 8001c8a:	e014      	b.n	8001cb6 <SPI3_Periph_Enable+0x1ba>
		GPIO_Config(&SPI3_Periph, GPIOD, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001c8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c90:	f107 000c 	add.w	r0, r7, #12
 8001c94:	2300      	movs	r3, #0
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	490a      	ldr	r1, [pc, #40]	; (8001ccc <SPI3_Periph_Enable+0x1d0>)
 8001ca4:	f7ff fb91 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI3_Periph, AF5);
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2105      	movs	r1, #5
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fc74 	bl	800159c <GPIO_Init>
}
 8001cb4:	e7ff      	b.n	8001cb6 <SPI3_Periph_Enable+0x1ba>
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020c00 	.word	0x40020c00

08001cd0 <SPI4_Periph_Enable>:

void SPI4_Periph_Enable(uint8_t ssm_enabled, GPIO_TypeDef *GPIOx, uint8_t cs_pin, uint8_t clk_pin, uint8_t mosi_pin, uint8_t miso_pin)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	6039      	str	r1, [r7, #0]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	71bb      	strb	r3, [r7, #6]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	717b      	strb	r3, [r7, #5]
	GPIO_Config_t SPI4_Periph;

	//Check if SSM bit is enabled
	if(ssm_enabled)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d013      	beq.n	8001d16 <SPI4_Periph_Enable+0x46>
	{
		//Config the specified pin and port for the chip select
		GPIO_Config(&SPI4_Periph, GPIOx, cs_pin, GPIO_Output, GPIO_PushPull, GPIO_LowSpeed, GPIO_PullUp);
 8001cee:	79ba      	ldrb	r2, [r7, #6]
 8001cf0:	f107 000c 	add.w	r0, r7, #12
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	6839      	ldr	r1, [r7, #0]
 8001d04:	f7ff fb61 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI4_Periph, 0x00);
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fc44 	bl	800159c <GPIO_Init>
 8001d14:	e012      	b.n	8001d3c <SPI4_Periph_Enable+0x6c>
	}
	//If SSOE is enabled
	else
	{
		//Configure the NSS pin for alternate function
		GPIO_Config(&SPI4_Periph, GPIOE, cs_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001d16:	79ba      	ldrb	r2, [r7, #6]
 8001d18:	f107 000c 	add.w	r0, r7, #12
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2300      	movs	r3, #0
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2302      	movs	r3, #2
 8001d2a:	4924      	ldr	r1, [pc, #144]	; (8001dbc <SPI4_Periph_Enable+0xec>)
 8001d2c:	f7ff fb4d 	bl	80013ca <GPIO_Config>
		GPIO_Init(&SPI4_Periph, AF5);
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	2105      	movs	r1, #5
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fc30 	bl	800159c <GPIO_Init>
	}

	//Configure the SPI clock pin
	GPIO_Config(&SPI4_Periph, GPIOE, clk_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001d3c:	797a      	ldrb	r2, [r7, #5]
 8001d3e:	f107 000c 	add.w	r0, r7, #12
 8001d42:	2300      	movs	r3, #0
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2302      	movs	r3, #2
 8001d50:	491a      	ldr	r1, [pc, #104]	; (8001dbc <SPI4_Periph_Enable+0xec>)
 8001d52:	f7ff fb3a 	bl	80013ca <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2105      	movs	r1, #5
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fc1d 	bl	800159c <GPIO_Init>

	//Configure MISO Pin
	GPIO_Config(&SPI4_Periph, GPIOE, miso_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001d62:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d66:	f107 000c 	add.w	r0, r7, #12
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	2300      	movs	r3, #0
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2302      	movs	r3, #2
 8001d78:	4910      	ldr	r1, [pc, #64]	; (8001dbc <SPI4_Periph_Enable+0xec>)
 8001d7a:	f7ff fb26 	bl	80013ca <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2105      	movs	r1, #5
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fc09 	bl	800159c <GPIO_Init>

	//Configure MOSI pin
	GPIO_Config(&SPI4_Periph, GPIOE, mosi_pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8001d8a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d8e:	f107 000c 	add.w	r0, r7, #12
 8001d92:	2300      	movs	r3, #0
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2300      	movs	r3, #0
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2302      	movs	r3, #2
 8001da0:	4906      	ldr	r1, [pc, #24]	; (8001dbc <SPI4_Periph_Enable+0xec>)
 8001da2:	f7ff fb12 	bl	80013ca <GPIO_Config>
	GPIO_Init(&SPI4_Periph, AF5);
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2105      	movs	r1, #5
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fbf5 	bl	800159c <GPIO_Init>

}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <GPIO_WritePin>:
 *			GPIO_Reset		or		0x2
 *			GPIO_Toggle		or		0x3
 */

void GPIO_WritePin(GPIO_Config_t *GPIO_Config, uint8_t State)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
	uint8_t pin = GPIO_Config->GPIO_Pin;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	73fb      	strb	r3, [r7, #15]

	if(State == GPIO_Write)
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10a      	bne.n	8001dee <GPIO_WritePin+0x2e>
	{
		GPIO_Config->GPIO_Port->ODR |= (0x1UL << pin);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	6959      	ldr	r1, [r3, #20]
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2201      	movs	r2, #1
 8001de2:	409a      	lsls	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	615a      	str	r2, [r3, #20]
	else if(State == GPIO_Toggle)
	{
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
	}

}
 8001dec:	e01c      	b.n	8001e28 <GPIO_WritePin+0x68>
	else if(State == GPIO_Reset)
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d10c      	bne.n	8001e0e <GPIO_WritePin+0x4e>
		GPIO_Config->GPIO_Port->ODR &= ~(0x1UL << pin);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	6959      	ldr	r1, [r3, #20]
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	615a      	str	r2, [r3, #20]
}
 8001e0c:	e00c      	b.n	8001e28 <GPIO_WritePin+0x68>
	else if(State == GPIO_Toggle)
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d109      	bne.n	8001e28 <GPIO_WritePin+0x68>
		GPIO_Config->GPIO_Port->ODR ^= (0x1UL << pin);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	6959      	ldr	r1, [r3, #20]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	404a      	eors	r2, r1
 8001e26:	615a      	str	r2, [r3, #20]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <__NVIC_EnableIRQ>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <Enable_I2C_Periph>:
 * @brief	A helper function used to set GPIO pins to correct settings to use I2C peripheral.
 *
 * @note	Sets the specified pins to alternate function, open drain, low speed and pull-up resistor.
 */
static void Enable_I2C_Periph(GPIO_TypeDef *GPIOx, uint8_t pin, AFR_Config_t alt_function)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af04      	add	r7, sp, #16
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	70bb      	strb	r3, [r7, #2]
	GPIO_Config_t I2C_Periph;
	GPIO_Config(&I2C_Periph, GPIOx, pin, GPIO_AF, GPIO_OpenDrain, GPIO_LowSpeed, GPIO_PullUp);
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	f107 000c 	add.w	r0, r7, #12
 8001eda:	2301      	movs	r3, #1
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	f7ff fa6e 	bl	80013ca <GPIO_Config>
	GPIO_Init(&I2C_Periph, alt_function);
 8001eee:	78ba      	ldrb	r2, [r7, #2]
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fb50 	bl	800159c <GPIO_Init>
}
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <Generate_Start_Condition>:

/*
 * @brief	A helper function that generates the start condition.
 */
static void Generate_Start_Condition(I2C_Handle_t *I2C_Handle)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	I2C_Handle->I2Cx->CR1 |= CR1_Start;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <Generate_Stop_Condition>:

/*
 * brief	A helper function that generates a stop condition
 */
static void Generate_Stop_Condition(I2C_Handle_t *I2C_Handle)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	I2C_Handle->I2Cx->CR1 |= CR1_STOP;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3e:	601a      	str	r2, [r3, #0]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <Send_Slave_Address>:

/*
 * @brief	A helper function used to send the slave address with either a read or write in the LSB.
 */
static void Send_Slave_Address(I2C_Handle_t *I2C_Handle)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	uint8_t slave_address = I2C_Handle->slave_address;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7f1b      	ldrb	r3, [r3, #28]
 8001f58:	73fb      	strb	r3, [r7, #15]

	//Determine whether read or write mode is active first
	if(I2C_Handle->I2C_Bus_Direction == I2C_Recieve)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7f5b      	ldrb	r3, [r3, #29]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d10a      	bne.n	8001f78 <Send_Slave_Address+0x2c>
	{
		//If the user wishes to read data, append a 1 to the end of the address
		slave_address = ((slave_address << 1) | (I2C_Read << 0U));
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
		I2C_Handle->I2Cx->DR = slave_address;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	611a      	str	r2, [r3, #16]
		//If the user wishes to write data append a 0 to the end of the address
		slave_address = ((slave_address << 1) | (I2C_Write << 0U));
		I2C_Handle->I2Cx->DR = slave_address;
	}

}
 8001f76:	e006      	b.n	8001f86 <Send_Slave_Address+0x3a>
		slave_address = ((slave_address << 1) | (I2C_Write << 0U));
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
		I2C_Handle->I2Cx->DR = slave_address;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	611a      	str	r2, [r3, #16]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <Clear_Addr_Flag>:
 *
 * @note	If the I2C peripheral is in receiver mode and is set to only recieve 1 byte, the ACK
 * 			bit will be disabled before clearning addr flag.
 */
static void Clear_Addr_Flag(I2C_Handle_t *I2C_Handle)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
	uint32_t temporary_variable = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]

	if((I2C_Handle->I2C_Bus_Direction == I2C_Recieve) && (I2C_Handle->Rx_Length == 1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7f5b      	ldrb	r3, [r3, #29]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d114      	bne.n	8001fd0 <Clear_Addr_Flag+0x3e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7c5b      	ldrb	r3, [r3, #17]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d110      	bne.n	8001fd0 <Clear_Addr_Flag+0x3e>
	{
		//Disable the Ack
		I2C_Handle->I2Cx->CR1 &= ~(CR1_ACK_Enable);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]

		//Clear addr flag
		temporary_variable = I2C_Handle->I2Cx->SR1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	60fb      	str	r3, [r7, #12]
		temporary_variable = I2C_Handle->I2Cx->SR2;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e008      	b.n	8001fe2 <Clear_Addr_Flag+0x50>
	}

	else
	{
		//Clear the addr flag
		temporary_variable = I2C_Handle->I2Cx->SR1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	60fb      	str	r3, [r7, #12]
		temporary_variable = I2C_Handle->I2Cx->SR2;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	60fb      	str	r3, [r7, #12]
	}


}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <I2C_Config>:
 * @brief	Configures the I2C data structure with user input.
 *
 * @note	If I2C2 or I2C3 is specified, pin_scl and pin_sda parameters are not used.
 */
void I2C_Config(I2C_Handle_t *I2C_Handle, I2C_TypeDef *I2Cx, uint32_t scl_speed, uint8_t duty_cycle, uint8_t pin_scl, uint8_t pin_sda)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	70fb      	strb	r3, [r7, #3]
	I2C_Handle->I2Cx = I2Cx;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	60da      	str	r2, [r3, #12]
	I2C_Handle->I2C_Config.scl_speed = scl_speed;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	605a      	str	r2, [r3, #4]
	I2C_Handle->I2C_Config.fm_dutycycle = duty_cycle;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	721a      	strb	r2, [r3, #8]
	I2C_Handle->I2C_Config.pin_scl = pin_scl;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	7e3a      	ldrb	r2, [r7, #24]
 8002012:	725a      	strb	r2, [r3, #9]
	I2C_Handle->I2C_Config.pin_sda = pin_sda;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	7f3a      	ldrb	r2, [r7, #28]
 8002018:	729a      	strb	r2, [r3, #10]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <I2C_Init>:
 *
 * @note	For standard mode F(scl) is 1000000 and for fast mode F(scl) is 3333333. These values are defined in
 * 			the header file as MAX_SM_TRISE_FREQ and MAX_FM_TRISE_FREQ.
 */
void I2C_Init(I2C_Handle_t *I2C_Handle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	RCC_ClockFrequency_t ClockSource;

	uint16_t ccr_value;
	uint8_t trise_value;

	if(I2C_Handle->I2Cx == I2C1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a69      	ldr	r2, [pc, #420]	; (80021dc <I2C_Init+0x1b4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d113      	bne.n	8002062 <I2C_Init+0x3a>
	{
		//Enable I2C1_SDA Line
		Enable_I2C_Periph(GPIOB, (I2C_Handle->I2C_Config.pin_sda), AF4);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7a9b      	ldrb	r3, [r3, #10]
 800203e:	2204      	movs	r2, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4867      	ldr	r0, [pc, #412]	; (80021e0 <I2C_Init+0x1b8>)
 8002044:	f7ff ff3e 	bl	8001ec4 <Enable_I2C_Periph>
		//Enable I2C1_SCL Line
		Enable_I2C_Periph(GPIOB, (I2C_Handle->I2C_Config.pin_scl), AF4);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7a5b      	ldrb	r3, [r3, #9]
 800204c:	2204      	movs	r2, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4863      	ldr	r0, [pc, #396]	; (80021e0 <I2C_Init+0x1b8>)
 8002052:	f7ff ff37 	bl	8001ec4 <Enable_I2C_Periph>
		//Enable Clock Access to I2C1
		RCC_APB1Cmd(I2C1_Enable, ENABLE);
 8002056:	2101      	movs	r1, #1
 8002058:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800205c:	f000 fac2 	bl	80025e4 <RCC_APB1Cmd>
 8002060:	e023      	b.n	80020aa <I2C_Init+0x82>
	}

	else if(I2C_Handle->I2Cx == I2C2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4a5f      	ldr	r2, [pc, #380]	; (80021e4 <I2C_Init+0x1bc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d10f      	bne.n	800208c <I2C_Init+0x64>
	{
		//Enable I2C2_SCL Line for PB10
		Enable_I2C_Periph(GPIOB, 10, AF4);
 800206c:	2204      	movs	r2, #4
 800206e:	210a      	movs	r1, #10
 8002070:	485b      	ldr	r0, [pc, #364]	; (80021e0 <I2C_Init+0x1b8>)
 8002072:	f7ff ff27 	bl	8001ec4 <Enable_I2C_Periph>
		//Enable I2C2_SDA Line for PB3
		Enable_I2C_Periph(GPIOB, 3, AF9);
 8002076:	2209      	movs	r2, #9
 8002078:	2103      	movs	r1, #3
 800207a:	4859      	ldr	r0, [pc, #356]	; (80021e0 <I2C_Init+0x1b8>)
 800207c:	f7ff ff22 	bl	8001ec4 <Enable_I2C_Periph>
		//Enable Clock Access to I2C2
		RCC_APB1Cmd(I2C2_Enable, ENABLE);
 8002080:	2101      	movs	r1, #1
 8002082:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002086:	f000 faad 	bl	80025e4 <RCC_APB1Cmd>
 800208a:	e00e      	b.n	80020aa <I2C_Init+0x82>
	}

	else
	{
		//Enable I2C3_SCL Line for PA8
		Enable_I2C_Periph(GPIOA, 3, AF4);
 800208c:	2204      	movs	r2, #4
 800208e:	2103      	movs	r1, #3
 8002090:	4855      	ldr	r0, [pc, #340]	; (80021e8 <I2C_Init+0x1c0>)
 8002092:	f7ff ff17 	bl	8001ec4 <Enable_I2C_Periph>
		//Enable I2C3_SDA Line for PC9
		Enable_I2C_Periph(GPIOC, 9, AF9);
 8002096:	2209      	movs	r2, #9
 8002098:	2109      	movs	r1, #9
 800209a:	4854      	ldr	r0, [pc, #336]	; (80021ec <I2C_Init+0x1c4>)
 800209c:	f7ff ff12 	bl	8001ec4 <Enable_I2C_Periph>
		//Enable Clock Access to I2C3
		RCC_APB1Cmd(I2C3_Enable, ENABLE);
 80020a0:	2101      	movs	r1, #1
 80020a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80020a6:	f000 fa9d 	bl	80025e4 <RCC_APB1Cmd>

	//I2C_Handle->I2Cx->CR1 |= CR1_SWRST;
	//I2C_Handle->I2Cx->CR1 &= ~CR1_SWRST;

	//Determining Peripheral Clock Speed
	RCC_GetClockFreq(&ClockSource);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fad8 	bl	8002664 <RCC_GetClockFreq>
	I2C_Handle->I2C_Config.peripheral_clk = (ClockSource.PCLCK1)/1000000U & (0x3F);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <I2C_Init+0x1c8>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9b      	lsrs	r3, r3, #18
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	701a      	strb	r2, [r3, #0]
	I2C_Handle->I2Cx->CR2 |= (I2C_Handle->I2C_Config.peripheral_clk) << CR2_Freq_Pos;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]

	//CCR Calculations:

	//Check for standard mode
	if(I2C_Handle->I2C_Config.scl_speed <= SM_100KHZ)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a44      	ldr	r2, [pc, #272]	; (80021f4 <I2C_Init+0x1cc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d817      	bhi.n	8002118 <I2C_Init+0xf0>
	{
		//Clear the fast mode bit ensuring it is set to 0 (set to standard mode)
		I2C_Handle->I2Cx->CCR &= ~CCR_Speed_FM_Mode;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f6:	61da      	str	r2, [r3, #28]
		//In standard mode, the duty cycle is 50%
		ccr_value = (ClockSource.PCLCK1)/(2 * (I2C_Handle->I2C_Config.scl_speed));
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	83fb      	strh	r3, [r7, #30]

		//calculate the Trise value
		trise_value = ((ClockSource.PCLCK1)/(MAX_SM_TRISE_FREQ)) + 1;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	4a39      	ldr	r2, [pc, #228]	; (80021f0 <I2C_Init+0x1c8>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	0c9b      	lsrs	r3, r3, #18
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3301      	adds	r3, #1
 8002114:	777b      	strb	r3, [r7, #29]
 8002116:	e044      	b.n	80021a2 <I2C_Init+0x17a>

	//Check for fast mode
	else
	{
		//Set I2C to fast mode
		I2C_Handle->I2Cx->CCR |= CCR_Speed_FM_Mode;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	69da      	ldr	r2, [r3, #28]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002126:	61da      	str	r2, [r3, #28]

		if(I2C_Handle->I2C_Config.fm_dutycycle == FM_DUTY_2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7a1b      	ldrb	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d116      	bne.n	800215e <I2C_Init+0x136>
		{
			//Clear the Duty cycle bit so it is set to 0 (which means duty cycle of 2)
			I2C_Handle->I2Cx->CCR &= ~FM_DUTY_16_9;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800213e:	61da      	str	r2, [r3, #28]
			ccr_value = ((I2C_Handle->I2C_Config.peripheral_clk)/(3 * I2C_Handle->I2C_Config.scl_speed)) & (0xFFF);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	fbb1 f3f3 	udiv	r3, r1, r3
 8002154:	b29b      	uxth	r3, r3
 8002156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215a:	83fb      	strh	r3, [r7, #30]
 800215c:	e017      	b.n	800218e <I2C_Init+0x166>
		}

		else
		{
			//Set duty cycle and calculate CCR value
			I2C_Handle->I2Cx->CCR |= FM_DUTY_16_9;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	69da      	ldr	r2, [r3, #28]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800216c:	61da      	str	r2, [r3, #28]
			ccr_value = ((I2C_Handle->I2C_Config.peripheral_clk)/(25 * I2C_Handle->I2C_Config.scl_speed)) & (0xFFF);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	009a      	lsls	r2, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	fbb1 f3f3 	udiv	r3, r1, r3
 8002186:	b29b      	uxth	r3, r3
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	83fb      	strh	r3, [r7, #30]
		}

		//calculate the Trise value
		trise_value = ((I2C_Handle->I2C_Config.peripheral_clk)/(MAX_FM_TRISE_FREQ)) + 1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <I2C_Init+0x1d0>)
 8002196:	fba3 2302 	umull	r2, r3, r3, r2
 800219a:	0d5b      	lsrs	r3, r3, #21
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	777b      	strb	r3, [r7, #29]

	}

	//Set CCR and Trise register values
	I2C_Handle->I2Cx->CCR |= (ccr_value & 0xFFF) << CCR_CCR_Pos;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	69d9      	ldr	r1, [r3, #28]
 80021a8:	8bfb      	ldrh	r3, [r7, #30]
 80021aa:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	61da      	str	r2, [r3, #28]
	I2C_Handle->I2Cx->TRISE = (trise_value & 0x1F);
 80021b6:	7f7a      	ldrb	r2, [r7, #29]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f002 021f 	and.w	r2, r2, #31
 80021c0:	621a      	str	r2, [r3, #32]


	//Enable Peripheral
	I2C_Handle->I2Cx->CR1 |= CR1_PE_Enable;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
}
 80021d2:	bf00      	nop
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40005400 	.word	0x40005400
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40005800 	.word	0x40005800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020800 	.word	0x40020800
 80021f0:	431bde83 	.word	0x431bde83
 80021f4:	000186a0 	.word	0x000186a0
 80021f8:	a10fb0af 	.word	0xa10fb0af

080021fc <Enable_Interrupt_Handler>:

/*
 * @brief	Enables the interrupts for the I2Cx peripherals through the NVIC
 */
static void Enable_Interrupt_Handler(I2C_TypeDef *I2Cx)
{	//Check which I2C peripheral is being used and enable its respective I2C error and event interrupt handle
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	if(I2Cx == I2C1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a11      	ldr	r2, [pc, #68]	; (800224c <Enable_Interrupt_Handler+0x50>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d106      	bne.n	800221a <Enable_Interrupt_Handler+0x1e>
	{
		NVIC_EnableIRQ(I2C1_EV_IRQn);
 800220c:	201f      	movs	r0, #31
 800220e:	f7ff fe11 	bl	8001e34 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002212:	2020      	movs	r0, #32
 8002214:	f7ff fe0e 	bl	8001e34 <__NVIC_EnableIRQ>
 8002218:	e010      	b.n	800223c <Enable_Interrupt_Handler+0x40>
	}

	else if(I2Cx == I2C2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <Enable_Interrupt_Handler+0x54>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d106      	bne.n	8002230 <Enable_Interrupt_Handler+0x34>
	{
		NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002222:	2021      	movs	r0, #33	; 0x21
 8002224:	f7ff fe06 	bl	8001e34 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002228:	2022      	movs	r0, #34	; 0x22
 800222a:	f7ff fe03 	bl	8001e34 <__NVIC_EnableIRQ>
 800222e:	e005      	b.n	800223c <Enable_Interrupt_Handler+0x40>
	}

	else
	{
		NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002230:	2048      	movs	r0, #72	; 0x48
 8002232:	f7ff fdff 	bl	8001e34 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002236:	2049      	movs	r0, #73	; 0x49
 8002238:	f7ff fdfc 	bl	8001e34 <__NVIC_EnableIRQ>
	}

	NVIC_SetPriority(I2C1_EV_IRQn, 7);
 800223c:	2107      	movs	r1, #7
 800223e:	201f      	movs	r0, #31
 8002240:	f7ff fe16 	bl	8001e70 <__NVIC_SetPriority>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40005400 	.word	0x40005400
 8002250:	40005800 	.word	0x40005800

08002254 <I2C_EndDataTransmission>:
 * @brief	Used to close data transmission when transmitting or recieving data with interrupts.
 *
 * @note	Disables the interrupt bits and rests the I2C handle ready flag.
 */
static void I2C_EndDataTransmission(I2C_Handle_t *I2C_Handle)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	//Disable the interrupt bits
	I2C_Handle->I2Cx->CR2 &= ~CR2_ITBUFEN;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226a:	605a      	str	r2, [r3, #4]
	I2C_Handle->I2Cx->CR2 &= ~CR2_ITEVTEN;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800227a:	605a      	str	r2, [r3, #4]
	I2C_Handle->I2Cx->CR2 &= ~CR2_ITERREN;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800228a:	605a      	str	r2, [r3, #4]

	//Clear the I2C handle
	I2C_Handle->I2C_Bus_Direction = I2C_Ready;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	775a      	strb	r2, [r3, #29]

	//Enable the ACK
	I2C_Handle->I2Cx->CR1 |= CR1_ACK_Enable;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022a0:	601a      	str	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <MasterTransmit_TxEInterrupt>:

/*
 * @brief	Used to clear the TXE flag and transmit data from the master to the slave.
 */
static void MasterTransmit_TxEInterrupt(I2C_Handle_t *I2C_Handle)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
	//Check if there is data to be transmitted
	if(I2C_Handle->Tx_Length > 0)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7c1b      	ldrb	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d010      	beq.n	80022e0 <MasterTransmit_TxEInterrupt+0x32>
	{
		//Write the data to the DR
		I2C_Handle->I2Cx->DR = *(I2C_Handle->Tx_Buffer);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]

		//Decrement the length of the data to be transmitted
		I2C_Handle->Tx_Length--;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7c1b      	ldrb	r3, [r3, #16]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	741a      	strb	r2, [r3, #16]

		//Increment the address of the buffer
		I2C_Handle->Tx_Buffer++;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	615a      	str	r2, [r3, #20]
	}
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <MasterRecieve_RXNEInterrupt>:

/*
 * @brief	Helper function used to clear the RXNE flag by reading data from the slave.
 */
static void MasterRecieve_RXNEInterrupt(I2C_Handle_t *I2C_Handle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

	if(I2C_Handle->Rx_Size == 1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7c9b      	ldrb	r3, [r3, #18]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10d      	bne.n	8002318 <MasterRecieve_RXNEInterrupt+0x2c>
	{

		Generate_Stop_Condition(I2C_Handle);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fe13 	bl	8001f28 <Generate_Stop_Condition>

		//Ack bit needs to be disabled before clearing the address flag - this is handled by the clear address flag function
		*(I2C_Handle->Rx_Buffer) = I2C_Handle->I2Cx->DR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]

		I2C_EndDataTransmission(I2C_Handle);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff9f 	bl	8002254 <I2C_EndDataTransmission>

			I2C_EndDataTransmission(I2C_Handle);
		}
	}

}
 8002316:	e02b      	b.n	8002370 <MasterRecieve_RXNEInterrupt+0x84>
	else if(I2C_Handle->Rx_Size > 1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7c9b      	ldrb	r3, [r3, #18]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d927      	bls.n	8002370 <MasterRecieve_RXNEInterrupt+0x84>
		if(I2C_Handle->Rx_Length == 2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7c5b      	ldrb	r3, [r3, #17]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d107      	bne.n	8002338 <MasterRecieve_RXNEInterrupt+0x4c>
			I2C_Handle->I2Cx->CR1 &= ~(CR1_ACK_Enable);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	601a      	str	r2, [r3, #0]
		I2C_Handle->Rx_Length--;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7c5b      	ldrb	r3, [r3, #17]
 800233c:	3b01      	subs	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	745a      	strb	r2, [r3, #17]
		I2C_Handle->Rx_Buffer++;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
		*(I2C_Handle->Rx_Buffer) = I2C_Handle->I2Cx->DR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
		if(I2C_Handle->Rx_Length == 0)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7c5b      	ldrb	r3, [r3, #17]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <MasterRecieve_RXNEInterrupt+0x84>
			Generate_Stop_Condition(I2C_Handle);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fddf 	bl	8001f28 <Generate_Stop_Condition>
			I2C_EndDataTransmission(I2C_Handle);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff72 	bl	8002254 <I2C_EndDataTransmission>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_MasterTransmitIT>:

/*
 * @brief Function to intialize data transmission using interrupts - This is a non-blocking function.
 */
void I2C_MasterTransmitIT(I2C_Handle_t *I2C_Handle, uint8_t *TxData, uint8_t slave_address, uint8_t number_of_bytes)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	460b      	mov	r3, r1
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	4613      	mov	r3, r2
 800238c:	71bb      	strb	r3, [r7, #6]
	//Enable interrupts for the secified I2C peripheral
	Enable_Interrupt_Handler(I2C_Handle->I2Cx);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff32 	bl	80021fc <Enable_Interrupt_Handler>

	//Ensure the I2C bus is not busy - If it is not set the specs for the I2C data structure
	if(((I2C_Handle->I2C_Bus_Direction)!= I2C_Transmit) && ((I2C_Handle->I2C_Bus_Direction)!= I2C_Recieve))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	7f5b      	ldrb	r3, [r3, #29]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d02a      	beq.n	80023f6 <I2C_MasterTransmitIT+0x7e>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	7f5b      	ldrb	r3, [r3, #29]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d026      	beq.n	80023f6 <I2C_MasterTransmitIT+0x7e>
	{
		I2C_Handle->slave_address = slave_address;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	79fa      	ldrb	r2, [r7, #7]
 80023ac:	771a      	strb	r2, [r3, #28]
		I2C_Handle->Tx_Length = number_of_bytes;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	79ba      	ldrb	r2, [r7, #6]
 80023b2:	741a      	strb	r2, [r3, #16]
		I2C_Handle->Tx_Buffer = TxData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	615a      	str	r2, [r3, #20]
		I2C_Handle->I2C_Bus_Direction = I2C_Transmit;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	775a      	strb	r2, [r3, #29]

		//Enable the Interrupt events
		I2C_Handle->I2Cx->CR2 |= CR2_ITBUFEN;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ce:	605a      	str	r2, [r3, #4]
		I2C_Handle->I2Cx->CR2 |= CR2_ITEVTEN;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	605a      	str	r2, [r3, #4]
		I2C_Handle->I2Cx->CR2 |= CR2_ITERREN;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ee:	605a      	str	r2, [r3, #4]

		//Generate the start condition to start the I2C bus transfer
		Generate_Start_Condition(I2C_Handle);
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff fd87 	bl	8001f04 <Generate_Start_Condition>
	}
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <I2C_MasterRecieveIT>:

/*
 * @brief Function to intialize data reception using interrupts - This is a non-blocking function.
 */
void I2C_MasterRecieveIT(I2C_Handle_t *I2C_Handle, uint8_t *RxData, uint8_t slave_address, uint8_t number_of_bytes)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	4611      	mov	r1, r2
 800240a:	461a      	mov	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	4613      	mov	r3, r2
 8002412:	71bb      	strb	r3, [r7, #6]
	//Enable interrupts for the secified I2C peripheral
	Enable_Interrupt_Handler(I2C_Handle->I2Cx);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff feef 	bl	80021fc <Enable_Interrupt_Handler>

	//Ensure the I2C bus is not busy - If it is not set the specs for the I2C data structure
	if(((I2C_Handle->I2C_Bus_Direction)!= I2C_Transmit) && ((I2C_Handle->I2C_Bus_Direction)!= I2C_Recieve))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	7f5b      	ldrb	r3, [r3, #29]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d035      	beq.n	8002492 <I2C_MasterRecieveIT+0x94>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	7f5b      	ldrb	r3, [r3, #29]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d031      	beq.n	8002492 <I2C_MasterRecieveIT+0x94>
	{
		I2C_Handle->slave_address = slave_address;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	771a      	strb	r2, [r3, #28]
		I2C_Handle->Rx_Length = number_of_bytes;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	79ba      	ldrb	r2, [r7, #6]
 8002438:	745a      	strb	r2, [r3, #17]
		I2C_Handle->Rx_Size = number_of_bytes;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	79ba      	ldrb	r2, [r7, #6]
 800243e:	749a      	strb	r2, [r3, #18]
		I2C_Handle->Rx_Buffer = RxData;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	619a      	str	r2, [r3, #24]
		I2C_Handle->I2C_Bus_Direction = I2C_Recieve;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2202      	movs	r2, #2
 800244a:	775a      	strb	r2, [r3, #29]

		//Enable the Interrupt events
		I2C_Handle->I2Cx->CR2 |= CR2_ITBUFEN;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800245a:	605a      	str	r2, [r3, #4]
		I2C_Handle->I2Cx->CR2 |= CR2_ITEVTEN;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	605a      	str	r2, [r3, #4]
		I2C_Handle->I2Cx->CR2 |= CR2_ITERREN;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247a:	605a      	str	r2, [r3, #4]

		//Enable the ACK bit
		I2C_Handle->I2Cx->CR1 |= CR1_ACK_Enable;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800248a:	601a      	str	r2, [r3, #0]

		//Generate the start condition to start the I2C bus transfer
		Generate_Start_Condition(I2C_Handle);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f7ff fd39 	bl	8001f04 <Generate_Start_Condition>
	}
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <IRQ_Event_Handler>:
 * @brief 	Event handler that handles interrupts during I2C transmission or reception.
 *
 * @note	This handler will clear all flags during transmission.
 */
void IRQ_Event_Handler(I2C_Handle_t *I2C_Handle)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
	//Used to check status of registers
	uint8_t evt_interrupt, buff_interrupt, sr_flag;

	//Used to ensure the interrupt enable bits are set
	evt_interrupt = (I2C_Handle->I2Cx->CR2 & CR2_ITEVTEN) >> 9;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	0a5b      	lsrs	r3, r3, #9
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
	buff_interrupt = (I2C_Handle->I2Cx->CR2 & CR2_ITBUFEN) >> 10;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0a9b      	lsrs	r3, r3, #10
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	73bb      	strb	r3, [r7, #14]

	//1)SB flag is raised after start generation
	sr_flag = I2C_Handle->I2Cx->SR1 & SR1_SB_Flag;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && sr_flag)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <IRQ_Event_Handler+0x48>
 80024d6:	7b7b      	ldrb	r3, [r7, #13]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <IRQ_Event_Handler+0x48>
	{
		Send_Slave_Address(I2C_Handle);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff fd35 	bl	8001f4c <Send_Slave_Address>
	}

	//2) ADDR flag is set after the address was sent to the slave device
	sr_flag = (I2C_Handle->I2Cx->SR1 & SR1_ADDR_Flag) >> 1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && sr_flag)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <IRQ_Event_Handler+0x6a>
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <IRQ_Event_Handler+0x6a>
	{
		Clear_Addr_Flag(I2C_Handle);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fd47 	bl	8001f92 <Clear_Addr_Flag>
	}

	//3) BTF flag is set Inidcating byte transfer finished
	//		In transmission: Both the DR and shift register are empty (DR needs to be written)
	//		In reception: Both Dr and shift register are full (DR needs to be read)
	sr_flag = (I2C_Handle->I2Cx->SR1 & SR1_BTF_Flag) >> 2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && sr_flag)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d017      	beq.n	800254a <IRQ_Event_Handler+0xb0>
 800251a:	7b7b      	ldrb	r3, [r7, #13]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d014      	beq.n	800254a <IRQ_Event_Handler+0xb0>
	{
		//Check if I2C peripheral is in transmission mode and TxE flag is set - inidcates both BTF and TxE flags are set
		if((I2C_Handle->I2C_Bus_Direction == I2C_Transmit) && ((I2C_Handle->I2Cx->SR1 & SR1_TXE_Flag)>>7))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7f5b      	ldrb	r3, [r3, #29]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d110      	bne.n	800254a <IRQ_Event_Handler+0xb0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <IRQ_Event_Handler+0xb0>
		{
			if(I2C_Handle->Tx_Length ==0)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7c1b      	ldrb	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <IRQ_Event_Handler+0xb0>
			{
				//Generate stop condition
				Generate_Stop_Condition(I2C_Handle);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fcf2 	bl	8001f28 <Generate_Stop_Condition>


				I2C_EndDataTransmission(I2C_Handle);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fe85 	bl	8002254 <I2C_EndDataTransmission>
		}
	}

	//4) TxE flag is set indicating the data register is empty (in transmission)
	//		- Cleared by software writing to the DR of by hardware after a start/stop condition
	sr_flag = (I2C_Handle->I2Cx->SR1 & SR1_TXE_Flag) >> 7;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	09db      	lsrs	r3, r3, #7
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && buff_interrupt && sr_flag)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <IRQ_Event_Handler+0xd8>
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <IRQ_Event_Handler+0xd8>
 8002566:	7b7b      	ldrb	r3, [r7, #13]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <IRQ_Event_Handler+0xd8>
	{
		MasterTransmit_TxEInterrupt(I2C_Handle);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fe9e 	bl	80022ae <MasterTransmit_TxEInterrupt>
	}

	//5) RxNE flag is set indicating data is in the DR (when reciving data)
	sr_flag = (I2C_Handle->I2Cx->SR1 & SR1_RXNE_Flag) >> 6;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	737b      	strb	r3, [r7, #13]

	if(evt_interrupt && buff_interrupt && sr_flag)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <IRQ_Event_Handler+0x100>
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <IRQ_Event_Handler+0x100>
 800258e:	7b7b      	ldrb	r3, [r7, #13]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <IRQ_Event_Handler+0x100>
	{
		MasterRecieve_RXNEInterrupt(I2C_Handle);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fea9 	bl	80022ec <MasterRecieve_RXNEInterrupt>
	}
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <RCC_AHB1Cmd>:
 * @param	AHB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_AHB1Cmd(uint32_t AHB1_Periph, FunctionalState State)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d106      	bne.n	80025c4 <RCC_AHB1Cmd+0x20>
	{
		RCC->AHB1ENR |= AHB1_Periph;
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <RCC_AHB1Cmd+0x3c>)
 80025b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ba:	4909      	ldr	r1, [pc, #36]	; (80025e0 <RCC_AHB1Cmd+0x3c>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4313      	orrs	r3, r2
 80025c0:	630b      	str	r3, [r1, #48]	; 0x30

	else
	{
		RCC->AHB1ENR &= ~AHB1_Periph;
	}
}
 80025c2:	e006      	b.n	80025d2 <RCC_AHB1Cmd+0x2e>
		RCC->AHB1ENR &= ~AHB1_Periph;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <RCC_AHB1Cmd+0x3c>)
 80025c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4904      	ldr	r1, [pc, #16]	; (80025e0 <RCC_AHB1Cmd+0x3c>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800

080025e4 <RCC_APB1Cmd>:
 * @param	APB1_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB1Cmd(uint32_t APB1_Periph, FunctionalState State)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d106      	bne.n	8002604 <RCC_APB1Cmd+0x20>
	{
		RCC->APB1ENR |= APB1_Periph;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <RCC_APB1Cmd+0x3c>)
 80025f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fa:	4909      	ldr	r1, [pc, #36]	; (8002620 <RCC_APB1Cmd+0x3c>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4313      	orrs	r3, r2
 8002600:	640b      	str	r3, [r1, #64]	; 0x40

	else
	{
		RCC->APB1ENR &= ~APB1_Periph;
	}
}
 8002602:	e006      	b.n	8002612 <RCC_APB1Cmd+0x2e>
		RCC->APB1ENR &= ~APB1_Periph;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <RCC_APB1Cmd+0x3c>)
 8002606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	43db      	mvns	r3, r3
 800260c:	4904      	ldr	r1, [pc, #16]	; (8002620 <RCC_APB1Cmd+0x3c>)
 800260e:	4013      	ands	r3, r2
 8002610:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <RCC_APB2Cmd>:
 * @param	APB2_Periph: Specific peripheral selected by the user (GPIOx, SPIx, I2Cx etc)
 *
 * @param	State: Specifies whether to enable or disable the peripheral.
 */
void RCC_APB2Cmd(uint32_t APB2_Periph, FunctionalState State)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	70fb      	strb	r3, [r7, #3]
	if(State == ENABLE)
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d106      	bne.n	8002644 <RCC_APB2Cmd+0x20>
	{
		RCC->APB2ENR |= APB2_Periph;
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <RCC_APB2Cmd+0x3c>)
 8002638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800263a:	4909      	ldr	r1, [pc, #36]	; (8002660 <RCC_APB2Cmd+0x3c>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4313      	orrs	r3, r2
 8002640:	644b      	str	r3, [r1, #68]	; 0x44

	else
	{
		RCC->APB2ENR &= ~APB2_Periph;
	}
}
 8002642:	e006      	b.n	8002652 <RCC_APB2Cmd+0x2e>
		RCC->APB2ENR &= ~APB2_Periph;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <RCC_APB2Cmd+0x3c>)
 8002646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	43db      	mvns	r3, r3
 800264c:	4904      	ldr	r1, [pc, #16]	; (8002660 <RCC_APB2Cmd+0x3c>)
 800264e:	4013      	ands	r3, r2
 8002650:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <RCC_GetClockFreq>:
 *
 * @param	ClockSource: Points to the ClockSource data structure which contains the varibales to hold
 * 			the frequencies of the SYSCLCK, HCLCK, PCLCK1, PCLCK2.
 */
void RCC_GetClockFreq(RCC_ClockFrequency_t *ClockSource)
{
 8002664:	b480      	push	{r7}
 8002666:	b08b      	sub	sp, #44	; 0x2c
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	uint32_t pll_Value = 0, plln = 0, pllm = 2, pllp = 2, pll_src = 0, pll_fvco = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	2302      	movs	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	2302      	movs	r3, #2
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]

	uint32_t temp_variable, prescaler;

	/*Determine the clock source for the SYSCLCK*/
	if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x0)
 8002684:	4b43      	ldr	r3, [pc, #268]	; (8002794 <RCC_GetClockFreq+0x130>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <RCC_GetClockFreq+0x36>
	{
		ClockSource->SYSCLCK = HSI_Value;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a40      	ldr	r2, [pc, #256]	; (8002798 <RCC_GetClockFreq+0x134>)
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e03f      	b.n	800271a <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x1)
 800269a:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <RCC_GetClockFreq+0x130>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d103      	bne.n	80026b0 <RCC_GetClockFreq+0x4c>
	{
		ClockSource->SYSCLCK = HSE_Value;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3c      	ldr	r2, [pc, #240]	; (800279c <RCC_GetClockFreq+0x138>)
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e034      	b.n	800271a <RCC_GetClockFreq+0xb6>
	}

	else if(((RCC->CFGR & RCC_CFGR_SWS_Mask) >> 2) == 0x2)
 80026b0:	4b38      	ldr	r3, [pc, #224]	; (8002794 <RCC_GetClockFreq+0x130>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d12d      	bne.n	800271a <RCC_GetClockFreq+0xb6>
	{
		/*Determine the input source of the PLL*/
		if(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_Mask)
 80026be:	4b35      	ldr	r3, [pc, #212]	; (8002794 <RCC_GetClockFreq+0x130>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <RCC_GetClockFreq+0x6c>
		{
			pll_src = HSE_Value;
 80026ca:	4b34      	ldr	r3, [pc, #208]	; (800279c <RCC_GetClockFreq+0x138>)
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e001      	b.n	80026d4 <RCC_GetClockFreq+0x70>
		}

		else
		{
			pll_src = HSI_Value;
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <RCC_GetClockFreq+0x134>)
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
		}

		plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Mask) >> 6);
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <RCC_GetClockFreq+0x130>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026de:	61fb      	str	r3, [r7, #28]
		pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Mask);
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <RCC_GetClockFreq+0x130>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e8:	61bb      	str	r3, [r7, #24]
		pll_fvco = (pll_src/pllm) * plln;
 80026ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	613b      	str	r3, [r7, #16]
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP_Mask) >> 16) * 2) + 2);
 80026fa:	4b26      	ldr	r3, [pc, #152]	; (8002794 <RCC_GetClockFreq+0x130>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0c1b      	lsrs	r3, r3, #16
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	3301      	adds	r3, #1
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	617b      	str	r3, [r7, #20]
		pll_Value = pll_fvco/pllp;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	623b      	str	r3, [r7, #32]

		ClockSource->SYSCLCK = pll_Value;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a3a      	ldr	r2, [r7, #32]
 8002718:	601a      	str	r2, [r3, #0]
	}

	/*Determine the frequency of the HCLCK*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_HPRE_Mask) >> 4);
 800271a:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <RCC_GetClockFreq+0x130>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 8002726:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <RCC_GetClockFreq+0x13c>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800272e:	b29b      	uxth	r3, r3
 8002730:	60bb      	str	r3, [r7, #8]
	ClockSource->HCLCK = (ClockSource->SYSCLCK) >> prescaler;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	40da      	lsrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	605a      	str	r2, [r3, #4]

	/*Determine the frequency of the PCLCK1*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE1_Mask) >> 10);
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <RCC_GetClockFreq+0x130>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0a9b      	lsrs	r3, r3, #10
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <RCC_GetClockFreq+0x13c>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002752:	b29b      	uxth	r3, r3
 8002754:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK1 = (ClockSource->HCLCK) >> prescaler;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	40da      	lsrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	609a      	str	r2, [r3, #8]

	/*Determine frequency of PCLCK2*/
	temp_variable = ((RCC->CFGR & RCC_CFGR_PPRE2_Mask) >> 13);
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <RCC_GetClockFreq+0x130>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
	prescaler = prescalerTable[temp_variable];
 800276e:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <RCC_GetClockFreq+0x13c>)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002776:	b29b      	uxth	r3, r3
 8002778:	60bb      	str	r3, [r7, #8]
	ClockSource->PCLCK2 = (ClockSource->HCLCK) >> prescaler;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	40da      	lsrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	60da      	str	r2, [r3, #12]

}
 8002786:	bf00      	nop
 8002788:	372c      	adds	r7, #44	; 0x2c
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200
 80027a0:	2000000c 	.word	0x2000000c

080027a4 <__NVIC_EnableIRQ>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4907      	ldr	r1, [pc, #28]	; (80027dc <__NVIC_EnableIRQ+0x38>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	; (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <Check_Flag>:
 * brief	A helper function that keeps track of specific flags in the status register.
 *
 * @retval	Returns status of the flag which is defined in an enumeration.
 */
static Flag_Status Check_Flag(SPI_Handle_t *SPI_Handle, uint32_t flag)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	if(SPI_Handle->SPIx->SR & flag)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <Check_Flag+0x1c>
	{
		return Flag_Set;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <Check_Flag+0x1e>
	}

	else
	{
		return Flag_Unset;
 8002850:	2300      	movs	r3, #0
	}

}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <SPI_Init>:
/*
 * @Brief	SPI initialization function that sets all the configurations such as clock phase, polarity, data frame,
 * 			data format and more.
 */
void SPI_Init(SPI_Handle_t *SPI_Handle)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b087      	sub	sp, #28
 8002864:	af02      	add	r7, sp, #8
 8002866:	6078      	str	r0, [r7, #4]
	uint8_t cs_pin, clk_pin, mosi_pin, miso_pin;
	cs_pin = SPI_Handle->SPI_Config.pin_cs;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	791b      	ldrb	r3, [r3, #4]
 800286c:	73fb      	strb	r3, [r7, #15]
	clk_pin = SPI_Handle->SPI_Config.pin_clk;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	795b      	ldrb	r3, [r3, #5]
 8002872:	73bb      	strb	r3, [r7, #14]
	mosi_pin = SPI_Handle->SPI_Config.pin_mosi;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	799b      	ldrb	r3, [r3, #6]
 8002878:	737b      	strb	r3, [r7, #13]
	miso_pin = SPI_Handle->SPI_Config.pin_miso;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	79db      	ldrb	r3, [r3, #7]
 800287e:	733b      	strb	r3, [r7, #12]
	/*
	 * Set the specified pins based on which SPI peripheral is chosen and whether or not the SSM bit is enabled or
	 * disabled. These functions are called from the "stm32f401_gpio.h" file, and are defined in the stm32f401_gpio.c file.
	 * This also enables clock access to the specified SPI peripheral using functions from the stm32f401_rcc file.
	 */
	if(SPI_Handle->SPIx == SPI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a5f      	ldr	r2, [pc, #380]	; (8002a04 <SPI_Init+0x1a4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d112      	bne.n	80028b0 <SPI_Init+0x50>
	{
		SPI1_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7c58      	ldrb	r0, [r3, #17]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	7bbc      	ldrb	r4, [r7, #14]
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	7b3b      	ldrb	r3, [r7, #12]
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	7b7b      	ldrb	r3, [r7, #13]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	4623      	mov	r3, r4
 80028a0:	f7fe ffa6 	bl	80017f0 <SPI1_Periph_Enable>
		RCC_APB2Cmd(SPI1_Enable, ENABLE);
 80028a4:	2101      	movs	r1, #1
 80028a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028aa:	f7ff febb 	bl	8002624 <RCC_APB2Cmd>
 80028ae:	e041      	b.n	8002934 <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <SPI_Init+0x1a8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d112      	bne.n	80028e0 <SPI_Init+0x80>
	{
		SPI2_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7c58      	ldrb	r0, [r3, #17]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	7bbc      	ldrb	r4, [r7, #14]
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	7b3b      	ldrb	r3, [r7, #12]
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	7b7b      	ldrb	r3, [r7, #13]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	4623      	mov	r3, r4
 80028d0:	f7ff f846 	bl	8001960 <SPI2_Periph_Enable>
		RCC_APB1Cmd(SPI2_Enable, ENABLE);
 80028d4:	2101      	movs	r1, #1
 80028d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028da:	f7ff fe83 	bl	80025e4 <RCC_APB1Cmd>
 80028de:	e029      	b.n	8002934 <SPI_Init+0xd4>
	}
	else if(SPI_Handle->SPIx == SPI3)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <SPI_Init+0x1ac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d112      	bne.n	8002910 <SPI_Init+0xb0>
	{
		SPI3_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7c58      	ldrb	r0, [r3, #17]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	7bbc      	ldrb	r4, [r7, #14]
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	7b3b      	ldrb	r3, [r7, #12]
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	7b7b      	ldrb	r3, [r7, #13]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4623      	mov	r3, r4
 8002900:	f7ff f8fc 	bl	8001afc <SPI3_Periph_Enable>
		RCC_APB1Cmd(SPI3_Enable, ENABLE);
 8002904:	2101      	movs	r1, #1
 8002906:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800290a:	f7ff fe6b 	bl	80025e4 <RCC_APB1Cmd>
 800290e:	e011      	b.n	8002934 <SPI_Init+0xd4>
	}
	else
	{
		SPI4_Periph_Enable((SPI_Handle->ssm), (SPI_Handle->SPI_Config.cs_gpio), cs_pin, clk_pin, mosi_pin, miso_pin);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7c58      	ldrb	r0, [r3, #17]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6899      	ldr	r1, [r3, #8]
 8002918:	7bbc      	ldrb	r4, [r7, #14]
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	7b3b      	ldrb	r3, [r7, #12]
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	7b7b      	ldrb	r3, [r7, #13]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	4623      	mov	r3, r4
 8002926:	f7ff f9d3 	bl	8001cd0 <SPI4_Periph_Enable>
		RCC_APB2Cmd(SPI4_Enable, ENABLE);
 800292a:	2101      	movs	r1, #1
 800292c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002930:	f7ff fe78 	bl	8002624 <RCC_APB2Cmd>
	}

	//Set BaudRate control
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->SPI_Config.baudrate_ctrl) << CR1_BR_Pos);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7b1b      	ldrb	r3, [r3, #12]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4619      	mov	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

	//Set CPOL and CHPA
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpha);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7b9b      	ldrb	r3, [r3, #14]
 8002954:	4619      	mov	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.cpol);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7b5b      	ldrb	r3, [r3, #13]
 8002968:	4619      	mov	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

	//Set Data format to either LSB or MSB first
	SPI_Handle->SPIx->CR1 |= (SPI_Handle->SPI_Config.data_format);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7bdb      	ldrb	r3, [r3, #15]
 800297c:	4619      	mov	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]

	//Set mode to master
	SPI_Handle->SPIx->CR1 |= CR1_MSTR_Enable;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0204 	orr.w	r2, r2, #4
 8002994:	601a      	str	r2, [r3, #0]

	//Set 8 bit
	SPI_Handle->SPIx->CR1 |= ((SPI_Handle->data_frame) << CR1_DFF_Pos);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7c1b      	ldrb	r3, [r3, #16]
 80029a0:	02db      	lsls	r3, r3, #11
 80029a2:	4619      	mov	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
	 * If SSM is not enabled, then SSOE (slave select output enabled) is used which uses the NSS pin as the CS and
	 * it automatically handled by the MCU. When this mode is selected, as soon as the SPI is enabled in master mode, the
	 * CS will go low and will only go high when SPI is disabled. This is why if SSM is enabled, the SPI is enabled also but
	 * if SSOE is enabled it is not enabled in the Init function.
	 */
	if(SPI_Handle->ssm)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7c5b      	ldrb	r3, [r3, #17]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <SPI_Init+0x18c>
	{
		//Set SSM and SSI high
		SPI_Handle->SPIx->CR1 |= ((SPI_Handle->ssm) << CR1_SSM_Pos);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7c5b      	ldrb	r3, [r3, #17]
 80029be:	025b      	lsls	r3, r3, #9
 80029c0:	4619      	mov	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
		SPI_Handle->SPIx->CR1 |= CR1_SSI_Enable;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d8:	601a      	str	r2, [r3, #0]
		//Enable SPI periph
		SPI_Handle->SPIx->CR1 |= CR1_SPE_Enable;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e8:	601a      	str	r2, [r3, #0]
	{
		//Set SSOE high
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
	}

}
 80029ea:	e007      	b.n	80029fc <SPI_Init+0x19c>
		SPI_Handle->SPIx->CR2 |= CR2_SSOE_Enable;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0204 	orr.w	r2, r2, #4
 80029fa:	605a      	str	r2, [r3, #4]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}
 8002a04:	40013000 	.word	0x40013000
 8002a08:	40003800 	.word	0x40003800
 8002a0c:	40003c00 	.word	0x40003c00

08002a10 <Enable_NVIC>:

/*
 * @brief	Support function used to enable the NVIC interrupts
 */
static void Enable_NVIC(SPI_Handle_t *SPI_Handle)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	if(SPI_Handle->SPIx == SPI1){
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <Enable_NVIC+0x54>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d103      	bne.n	8002a2a <Enable_NVIC+0x1a>
		NVIC_EnableIRQ(SPI1_IRQn);
 8002a22:	2023      	movs	r0, #35	; 0x23
 8002a24:	f7ff febe 	bl	80027a4 <__NVIC_EnableIRQ>
 8002a28:	e014      	b.n	8002a54 <Enable_NVIC+0x44>
	}
	else if(SPI_Handle->SPIx == SPI2){
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <Enable_NVIC+0x58>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <Enable_NVIC+0x2c>
		NVIC_EnableIRQ(SPI2_IRQn);
 8002a34:	2024      	movs	r0, #36	; 0x24
 8002a36:	f7ff feb5 	bl	80027a4 <__NVIC_EnableIRQ>
 8002a3a:	e00b      	b.n	8002a54 <Enable_NVIC+0x44>
	}
	else if(SPI_Handle->SPIx == SPI3){
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <Enable_NVIC+0x5c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d103      	bne.n	8002a4e <Enable_NVIC+0x3e>
		NVIC_EnableIRQ(SPI3_IRQn);
 8002a46:	2033      	movs	r0, #51	; 0x33
 8002a48:	f7ff feac 	bl	80027a4 <__NVIC_EnableIRQ>
 8002a4c:	e002      	b.n	8002a54 <Enable_NVIC+0x44>
	}
	else{
		NVIC_EnableIRQ(SPI4_IRQn);
 8002a4e:	2054      	movs	r0, #84	; 0x54
 8002a50:	f7ff fea8 	bl	80027a4 <__NVIC_EnableIRQ>
	}

	NVIC_SetPriority(SPI1_IRQn, 6);
 8002a54:	2106      	movs	r1, #6
 8002a56:	2023      	movs	r0, #35	; 0x23
 8002a58:	f7ff fec2 	bl	80027e0 <__NVIC_SetPriority>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40013000 	.word	0x40013000
 8002a68:	40003800 	.word	0x40003800
 8002a6c:	40003c00 	.word	0x40003c00

08002a70 <Disable_SPI_Transmission>:
/*
 * @brief	Support function used to disable interrupt transmission only when SSOE
 * is being used.
 */
static void Disable_SPI_Transmission(SPI_Handle_t *SPI_Handle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	/*Temporary variable to clear the overrun flag - the overrun flag is cleared
	 * by reading the DR followed by the SR.
	 */
	uint32_t clear_overrun;

	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 8002a78:	bf00      	nop
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fed9 	bl	8002834 <Check_Flag>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f8      	beq.n	8002a7a <Disable_SPI_Transmission+0xa>
	//Disable TXEIE bit in CR2
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a96:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 8002a98:	bf00      	nop
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff fec9 	bl	8002834 <Check_Flag>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f8      	bne.n	8002a9a <Disable_SPI_Transmission+0x2a>

	//Clear overrun flag
	clear_overrun = SPI_Handle->SPIx->DR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	60fb      	str	r3, [r7, #12]
	clear_overrun = SPI_Handle->SPIx->SR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60fb      	str	r3, [r7, #12]

	//Disable SPI periph
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac6:	601a      	str	r2, [r3, #0]

	//Reset bus state back to SPI_Ready to allow another communication to begin.
	SPI_Handle->bus_state = SPI_Ready;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	765a      	strb	r2, [r3, #25]
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <Disable_SPI_Reception>:

/*
 * @brief	Support function used to disable SPI reception when using interrupts with SSOE.
 */
static void Disable_SPI_Reception(SPI_Handle_t *SPI_Handle)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
	while(!Check_Flag(SPI_Handle, SR_TXE_Flag));
 8002ade:	bf00      	nop
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fea6 	bl	8002834 <Check_Flag>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f8      	beq.n	8002ae0 <Disable_SPI_Reception+0xa>

	//Disable TXEIE and RXNEIE bit
	SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002afc:	605a      	str	r2, [r3, #4]
	SPI_Handle->SPIx->CR2 &= ~CR2_RXNEIE_Enable;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b0c:	605a      	str	r2, [r3, #4]

	while(Check_Flag(SPI_Handle, SR_BSY_Flag));
 8002b0e:	bf00      	nop
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fe8e 	bl	8002834 <Check_Flag>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f8      	bne.n	8002b10 <Disable_SPI_Reception+0x3a>

	//Disable SPI periph
	SPI_Handle->SPIx->CR1 &= ~CR1_SPE_Enable;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2c:	601a      	str	r2, [r3, #0]

	//Set the SPI bus state back to SPI_Ready to allow for another seperate SPI transmission
	SPI_Handle->bus_state = SPI_Ready;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	765a      	strb	r2, [r3, #25]
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <TXE_Interrupt_Handler>:
 * @brief	Support function to transmit data when an interrupt is generated by the TXE flag.
 *
 * @note	This function is called directly from the interrupt service routine.
 */
static void TXE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	//Check if the bus state is currently in SPI_Transmitting
	if(SPI_Handle->bus_state == SPI_Transmitting)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e5b      	ldrb	r3, [r3, #25]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d153      	bne.n	8002bf4 <TXE_Interrupt_Handler+0xb8>
	{
		//16 bit data mode
		if(SPI_Handle->data_frame == Data_16_Bits)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7c1b      	ldrb	r3, [r3, #16]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d11e      	bne.n	8002b92 <TXE_Interrupt_Handler+0x56>
		{
			if(SPI_Handle->tx_length)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7e1b      	ldrb	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00e      	beq.n	8002b7a <TXE_Interrupt_Handler+0x3e>
			{
				//Write values from the data buffer into the data register to be transmitted
				SPI_Handle->SPIx->DR = *((uint16_t *)SPI_Handle->pTxBuffer++);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	1c59      	adds	r1, r3, #1
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6151      	str	r1, [r2, #20]
 8002b66:	881a      	ldrh	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60da      	str	r2, [r3, #12]
				SPI_Handle->tx_length--;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7e1b      	ldrb	r3, [r3, #24]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	761a      	strb	r2, [r3, #24]
			}

			if(SPI_Handle->tx_length == 0 && (!SPI_Handle->ssm))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7e1b      	ldrb	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d13e      	bne.n	8002c00 <TXE_Interrupt_Handler+0xc4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7c5b      	ldrb	r3, [r3, #17]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d13a      	bne.n	8002c00 <TXE_Interrupt_Handler+0xc4>
			{
				Disable_SPI_Transmission(SPI_Handle);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff70 	bl	8002a70 <Disable_SPI_Transmission>
	{
		//Transmit the address of the register to read from
		SPI_Handle->SPIx->DR = SPI_Handle->reg_address;

	}
}
 8002b90:	e036      	b.n	8002c00 <TXE_Interrupt_Handler+0xc4>
			if(SPI_Handle->tx_length)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7e1b      	ldrb	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00e      	beq.n	8002bb8 <TXE_Interrupt_Handler+0x7c>
				SPI_Handle->SPIx->DR = *(SPI_Handle->pTxBuffer++);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	1c59      	adds	r1, r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6151      	str	r1, [r2, #20]
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60da      	str	r2, [r3, #12]
				SPI_Handle->tx_length--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7e1b      	ldrb	r3, [r3, #24]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	761a      	strb	r2, [r3, #24]
			if(SPI_Handle->tx_length == 0)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e1b      	ldrb	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d11f      	bne.n	8002c00 <TXE_Interrupt_Handler+0xc4>
				SPI_Handle->bus_state = SPI_Ready;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	765a      	strb	r2, [r3, #25]
				if(!SPI_Handle->ssm)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7c5b      	ldrb	r3, [r3, #17]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <TXE_Interrupt_Handler+0x9a>
					Disable_SPI_Transmission(SPI_Handle);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ff4e 	bl	8002a70 <Disable_SPI_Transmission>
}
 8002bd4:	e014      	b.n	8002c00 <TXE_Interrupt_Handler+0xc4>
					SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be4:	605a      	str	r2, [r3, #4]
					GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2101      	movs	r1, #1
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f8e7 	bl	8001dc0 <GPIO_WritePin>
}
 8002bf2:	e005      	b.n	8002c00 <TXE_Interrupt_Handler+0xc4>
		SPI_Handle->SPIx->DR = SPI_Handle->reg_address;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <RXNE_Interrupt_Handler>:
/*
 * @Brief	Support function called from the interrupt service handler when the RXNE flag
 * 			is raised.
 */
static void RXNE_Interrupt_Handler(SPI_Handle_t *SPI_Handle)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	//For 16 bit data transmission
	if(SPI_Handle->data_frame == Data_16_Bits)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7c1b      	ldrb	r3, [r3, #16]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d117      	bne.n	8002c48 <RXNE_Interrupt_Handler+0x40>
	{
		//If rx_length is greater than 0
		if(SPI_Handle->rx_length)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d029      	beq.n	8002c76 <RXNE_Interrupt_Handler+0x6e>
		{
			//Read value from Data register inot buffer
			*((uint16_t *)SPI_Handle->pRxBuffer++) = SPI_Handle->SPIx->DR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68d8      	ldr	r0, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	1c59      	adds	r1, r3, #1
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	61d1      	str	r1, [r2, #28]
 8002c32:	b282      	uxth	r2, r0
 8002c34:	801a      	strh	r2, [r3, #0]
			SPI_Handle->rx_length--;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f883 2020 	strb.w	r2, [r3, #32]
 8002c46:	e016      	b.n	8002c76 <RXNE_Interrupt_Handler+0x6e>

	//For 8 bit data transmission
	else
	{
		//If rx_length is greater than 0
		if(SPI_Handle->rx_length)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d011      	beq.n	8002c76 <RXNE_Interrupt_Handler+0x6e>
		{
			//Read value from Data register inot buffer
			*(SPI_Handle->pRxBuffer++) = SPI_Handle->SPIx->DR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68d8      	ldr	r0, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	1c59      	adds	r1, r3, #1
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	61d1      	str	r1, [r2, #28]
 8002c62:	b2c2      	uxtb	r2, r0
 8002c64:	701a      	strb	r2, [r3, #0]
			SPI_Handle->rx_length--;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}


	if(SPI_Handle->rx_length == 0)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d120      	bne.n	8002cc2 <RXNE_Interrupt_Handler+0xba>
	{
		//Set the spi bus back to SPI_Ready
		SPI_Handle->bus_state = SPI_Ready;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	765a      	strb	r2, [r3, #25]

		//If SSM is disabled
		if(!SPI_Handle->ssm)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7c5b      	ldrb	r3, [r3, #17]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <RXNE_Interrupt_Handler+0x8e>
		{
			Disable_SPI_Reception(SPI_Handle);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ff21 	bl	8002ad6 <Disable_SPI_Reception>

			//Pull chip select high
			GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
		}
	}
}
 8002c94:	e015      	b.n	8002cc2 <RXNE_Interrupt_Handler+0xba>
			SPI_Handle->SPIx->CR2 &= ~CR2_TXEIE_Enable;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca4:	605a      	str	r2, [r3, #4]
			SPI_Handle->SPIx->CR2 &= ~CR2_RXNEIE_Enable;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb4:	605a      	str	r2, [r3, #4]
			GPIO_WritePin(SPI_Handle->Slave, GPIO_Write);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f87f 	bl	8001dc0 <GPIO_WritePin>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <SPI_MultiSlave_TransmitIT>:
 *
 * @note	This requires a GPIO slave device to be passed in, which is created form the GPIO driver included in this file.
 * 			This function will handle pulling the CS low, all that is needed, is to specifcy which slave to interact with.
 */
void SPI_MultiSlave_TransmitIT(SPI_Handle_t *SPI_Handle, GPIO_Config_t *Slave_Device, uint8_t *input_buffer, uint8_t num_of_bytes)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	70fb      	strb	r3, [r7, #3]
	if(SPI_Handle->bus_state == SPI_Ready)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	7e5b      	ldrb	r3, [r3, #25]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d11a      	bne.n	8002d16 <SPI_MultiSlave_TransmitIT+0x4c>
	{
		SPI_Handle->pTxBuffer = input_buffer;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	615a      	str	r2, [r3, #20]
		SPI_Handle->tx_length = num_of_bytes;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	761a      	strb	r2, [r3, #24]
		SPI_Handle->bus_state = SPI_Transmitting;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	765a      	strb	r2, [r3, #25]
		SPI_Handle->Slave = Slave_Device;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

		//Enable NVIC interrupts
		Enable_NVIC(SPI_Handle);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff fe89 	bl	8002a10 <Enable_NVIC>

		//Pull Slave Device Low to begin data transmission
		GPIO_WritePin(Slave_Device, GPIO_Reset);
 8002cfe:	2102      	movs	r1, #2
 8002d00:	68b8      	ldr	r0, [r7, #8]
 8002d02:	f7ff f85d 	bl	8001dc0 <GPIO_WritePin>

		//Enable TXEIE and RXNEIE bit in CR2
		SPI_Handle->SPIx->CR2 |= CR2_TXEIE_Enable;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d14:	605a      	str	r2, [r3, #4]
	}
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <SPI_MultiSlave_RecieveIT>:
 *
 * @note	This requires a GPIO slave device to be passed in, which is created form the GPIO driver included in this file.
 * 			This function will handle pulling the CS low, all that is needed, is to specifcy which slave to interact with.
 */
void SPI_MultiSlave_RecieveIT(SPI_Handle_t *SPI_Handle, GPIO_Config_t *Slave_Device, uint8_t *output_buffer, uint8_t num_of_bytes, uint8_t address)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	70fb      	strb	r3, [r7, #3]
	if(SPI_Handle->bus_state == SPI_Ready)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	7e5b      	ldrb	r3, [r3, #25]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d127      	bne.n	8002d84 <SPI_MultiSlave_RecieveIT+0x66>
	{
		SPI_Handle->pRxBuffer = output_buffer;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	61da      	str	r2, [r3, #28]
		SPI_Handle->rx_length = num_of_bytes;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	f883 2020 	strb.w	r2, [r3, #32]
		SPI_Handle->bus_state = SPI_Receiving;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2202      	movs	r2, #2
 8002d46:	765a      	strb	r2, [r3, #25]
		SPI_Handle->reg_address = address;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	7e3a      	ldrb	r2, [r7, #24]
 8002d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		SPI_Handle->Slave = Slave_Device;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

		//Enable NVIC interrupts
		Enable_NVIC(SPI_Handle);
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff fe5a 	bl	8002a10 <Enable_NVIC>

		//Pull Slave Device Low to begin data transmission
		GPIO_WritePin(Slave_Device, GPIO_Reset);
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	68b8      	ldr	r0, [r7, #8]
 8002d60:	f7ff f82e 	bl	8001dc0 <GPIO_WritePin>

		//Enable TXEIE and RXNEIE bit in CR2
		SPI_Handle->SPIx->CR2 |= CR2_RXNEIE_Enable;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d72:	605a      	str	r2, [r3, #4]
		SPI_Handle->SPIx->CR2 |= CR2_TXEIE_Enable;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d82:	605a      	str	r2, [r3, #4]
	}
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <SPI_IRQ_Handler>:
 *
 * @note	This function is called whenever an interrupt occurs generated by the TXE or RXNE flag. It also
 * 			services both the TXE and RXNE interrupts.
 */
void SPI_IRQ_Handler(SPI_Handle_t *SPI_Handle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2;

	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_RXNEIE_Enable) >> 6);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
	temp2 = (SPI_Handle->SPIx->SR & SR_RXNE_Flag);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	60bb      	str	r3, [r7, #8]
	//If the RXNE flag is raised and the RXNEIE bit is set - call the RXNE interrupt support function
	if(temp1 && temp2)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <SPI_IRQ_Handler+0x34>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <SPI_IRQ_Handler+0x34>
	{
		RXNE_Interrupt_Handler(SPI_Handle);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff24 	bl	8002c08 <RXNE_Interrupt_Handler>
	}


	temp1 = ((SPI_Handle->SPIx->CR2 & CR2_TXEIE_Enable) >> 7);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	09db      	lsrs	r3, r3, #7
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
	temp2 = ((SPI_Handle->SPIx->SR & SR_TXE_Flag) >> 1);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
	//If the TXE flag is raised and the TXEIE bit is set - call the TXE interrupt support function
	if(temp1 && temp2)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <SPI_IRQ_Handler+0x62>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <SPI_IRQ_Handler+0x62>
	{
		TXE_Interrupt_Handler(SPI_Handle);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff fea7 	bl	8002b3c <TXE_Interrupt_Handler>
	}


}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <__NVIC_EnableIRQ>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	; (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <UART_Config>:
 *
 * @param	baudrate: Allows the user to input their desired baud-rate for the UART peripheral.
 *
 */
void UART_Config(UART_Config_t *UART_Config, USART_TypeDef *UARTx, uint16_t mode, uint32_t baudrate)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80fb      	strh	r3, [r7, #6]
	UART_Config->UARTx = UARTx;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	611a      	str	r2, [r3, #16]
	UART_Config->Mode = mode;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	88fa      	ldrh	r2, [r7, #6]
 8002e4e:	819a      	strh	r2, [r3, #12]
	UART_Config->BaudRate = baudrate;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	609a      	str	r2, [r3, #8]
	UART_Config->World_Length = UART_WORDLEN_8BITS;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	805a      	strh	r2, [r3, #2]
	UART_Config->Parity = UART_PARITY_DISABLED;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	80da      	strh	r2, [r3, #6]
	UART_Config->oversampling = UART_OVERSAMPLING_16;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	809a      	strh	r2, [r3, #4]
	UART_Config->Stop_Bits = UART_STOPBITS_1;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	801a      	strh	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <Select_UART_Periph>:
 *
 * @param	alt_function: Defines the alternate function value to input into the Alternate function register.
 *
 */
void Select_UART_Periph(GPIO_TypeDef *GPIOx, uint8_t pin, AFR_Config_t alt_function)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b08c      	sub	sp, #48	; 0x30
 8002e7e:	af04      	add	r7, sp, #16
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70fb      	strb	r3, [r7, #3]
 8002e86:	4613      	mov	r3, r2
 8002e88:	70bb      	strb	r3, [r7, #2]
	GPIO_Config_t GPIOx_UARTx_Tx, GPIOx_UARTx_Rx;

	GPIO_Config(&GPIOx_UARTx_Tx, GPIOx, pin, GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	f107 0014 	add.w	r0, r7, #20
 8002e90:	2300      	movs	r3, #0
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	2300      	movs	r3, #0
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	f7fe fa93 	bl	80013ca <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Tx, alt_function);
 8002ea4:	78ba      	ldrb	r2, [r7, #2]
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fb75 	bl	800159c <GPIO_Init>

	GPIO_Config(&GPIOx_UARTx_Rx, GPIOx, (pin + 1), GPIO_AF, GPIO_PushPull, GPIO_LowSpeed, GPIO_PUPD_None);
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	f107 0008 	add.w	r0, r7, #8
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2302      	movs	r3, #2
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	f7fe fa7d 	bl	80013ca <GPIO_Config>
	GPIO_Init(&GPIOx_UARTx_Rx, alt_function);
 8002ed0:	78ba      	ldrb	r2, [r7, #2]
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fb5f 	bl	800159c <GPIO_Init>
}
 8002ede:	bf00      	nop
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <Enable_UART_Periph>:
 * 			based on the peripheral selected by the user.
 *
 * @param	UARTx: Defines which UART peripheral the user chooses, this can be: USART1, USART2 or USART6.
 */
void Enable_UART_Periph(USART_TypeDef *UARTx)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	if(UARTx == USART2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <Enable_UART_Periph+0x7c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10f      	bne.n	8002f18 <Enable_UART_Periph+0x30>
	{

		Select_UART_Periph(GPIOA, Pin2, AF7);
 8002ef8:	2207      	movs	r2, #7
 8002efa:	2102      	movs	r1, #2
 8002efc:	481a      	ldr	r0, [pc, #104]	; (8002f68 <Enable_UART_Periph+0x80>)
 8002efe:	f7ff ffbc 	bl	8002e7a <Select_UART_Periph>
		Select_UART_Periph(GPIOD, Pin5, AF7);
 8002f02:	2207      	movs	r2, #7
 8002f04:	2105      	movs	r1, #5
 8002f06:	4819      	ldr	r0, [pc, #100]	; (8002f6c <Enable_UART_Periph+0x84>)
 8002f08:	f7ff ffb7 	bl	8002e7a <Select_UART_Periph>

		RCC_APB1Cmd(USART2_Enable, ENABLE);
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002f12:	f7ff fb67 	bl	80025e4 <RCC_APB1Cmd>
		Select_UART_Periph(GPIOC, Pin6, AF7);

		RCC_APB2Cmd(USART6_Enable, ENABLE);

	}
}
 8002f16:	e020      	b.n	8002f5a <Enable_UART_Periph+0x72>
	else if(UARTx == USART1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <Enable_UART_Periph+0x88>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10e      	bne.n	8002f3e <Enable_UART_Periph+0x56>
		Select_UART_Periph(GPIOA, Pin9, AF7);
 8002f20:	2207      	movs	r2, #7
 8002f22:	2109      	movs	r1, #9
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <Enable_UART_Periph+0x80>)
 8002f26:	f7ff ffa8 	bl	8002e7a <Select_UART_Periph>
		Select_UART_Periph(GPIOB, Pin6, AF7);
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	2106      	movs	r1, #6
 8002f2e:	4811      	ldr	r0, [pc, #68]	; (8002f74 <Enable_UART_Periph+0x8c>)
 8002f30:	f7ff ffa3 	bl	8002e7a <Select_UART_Periph>
		RCC_APB2Cmd(USART1_Enable, ENABLE);
 8002f34:	2101      	movs	r1, #1
 8002f36:	2010      	movs	r0, #16
 8002f38:	f7ff fb74 	bl	8002624 <RCC_APB2Cmd>
}
 8002f3c:	e00d      	b.n	8002f5a <Enable_UART_Periph+0x72>
		Select_UART_Periph(GPIOA, Pin11, AF8);
 8002f3e:	2208      	movs	r2, #8
 8002f40:	210b      	movs	r1, #11
 8002f42:	4809      	ldr	r0, [pc, #36]	; (8002f68 <Enable_UART_Periph+0x80>)
 8002f44:	f7ff ff99 	bl	8002e7a <Select_UART_Periph>
		Select_UART_Periph(GPIOC, Pin6, AF7);
 8002f48:	2207      	movs	r2, #7
 8002f4a:	2106      	movs	r1, #6
 8002f4c:	480a      	ldr	r0, [pc, #40]	; (8002f78 <Enable_UART_Periph+0x90>)
 8002f4e:	f7ff ff94 	bl	8002e7a <Select_UART_Periph>
		RCC_APB2Cmd(USART6_Enable, ENABLE);
 8002f52:	2101      	movs	r1, #1
 8002f54:	2020      	movs	r0, #32
 8002f56:	f7ff fb65 	bl	8002624 <RCC_APB2Cmd>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40004400 	.word	0x40004400
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40011000 	.word	0x40011000
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800

08002f7c <Set_BaudRate>:
 *@param	ClockSource: Defines the specific clock source for the MCU which includes SYSCLK,
 *			HCLK, PCLK1, PCLK2.
 *
 */
void Set_BaudRate(RCC_ClockFrequency_t *ClockSource, UART_Config_t *UART_Config)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	RCC_GetClockFreq(ClockSource);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fb6c 	bl	8002664 <RCC_GetClockFreq>

	uint32_t periph_clk, over8, usartdiv, baudrate;
	uint32_t mantissa_value, fraction_value, tempvariable = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	623b      	str	r3, [r7, #32]

	over8 = (UART_Config->UARTx->CR1) & (UART_CR1_OVER8_Mask);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9a:	61fb      	str	r3, [r7, #28]
	baudrate = UART_Config->BaudRate;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	61bb      	str	r3, [r7, #24]

	if(UART_Config->UARTx == USART2)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	4a32      	ldr	r2, [pc, #200]	; (8003070 <Set_BaudRate+0xf4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d103      	bne.n	8002fb4 <Set_BaudRate+0x38>
	{
		periph_clk = ClockSource->PCLCK1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	e002      	b.n	8002fba <Set_BaudRate+0x3e>
	}

	else
	{
		periph_clk = ClockSource->PCLCK2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/*Over-sampling by 16*/
	if(over8 == 0)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d125      	bne.n	800300c <Set_BaudRate+0x90>
	{
		usartdiv = (periph_clk * 100)/(16 * baudrate);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	2264      	movs	r2, #100	; 0x64
 8002fc4:	fb03 f202 	mul.w	r2, r3, r2
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4a27      	ldr	r2, [pc, #156]	; (8003074 <Set_BaudRate+0xf8>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	613b      	str	r3, [r7, #16]
		tempvariable |= mantissa_value << 4;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	6a3a      	ldr	r2, [r7, #32]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	623b      	str	r3, [r7, #32]

		fraction_value = (((usartdiv - (mantissa_value * 100)) * 16) + 50)/100;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2264      	movs	r2, #100	; 0x64
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	3332      	adds	r3, #50	; 0x32
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	; (8003074 <Set_BaudRate+0xf8>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 8003002:	6a3a      	ldr	r2, [r7, #32]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	e024      	b.n	8003056 <Set_BaudRate+0xda>
	}

	/*Over-sampling by 8*/
	else
	{
		usartdiv = ((periph_clk * 100)/(8 * baudrate));
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	2264      	movs	r2, #100	; 0x64
 8003010:	fb03 f202 	mul.w	r2, r3, r2
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
		mantissa_value = usartdiv/100;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	4a14      	ldr	r2, [pc, #80]	; (8003074 <Set_BaudRate+0xf8>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	613b      	str	r3, [r7, #16]
		tempvariable |= (mantissa_value << 4);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	4313      	orrs	r3, r2
 8003032:	623b      	str	r3, [r7, #32]
		fraction_value = (((usartdiv - (mantissa_value * 100)) * 8) + 50)/100;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2264      	movs	r2, #100	; 0x64
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	3332      	adds	r3, #50	; 0x32
 8003044:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <Set_BaudRate+0xf8>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	60fb      	str	r3, [r7, #12]
		tempvariable |= fraction_value;
 800304e:	6a3a      	ldr	r2, [r7, #32]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	623b      	str	r3, [r7, #32]
	}

	UART_Config->UARTx->BRR |= tempvariable;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	6899      	ldr	r1, [r3, #8]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
}
 8003066:	bf00      	nop
 8003068:	3728      	adds	r7, #40	; 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40004400 	.word	0x40004400
 8003074:	51eb851f 	.word	0x51eb851f

08003078 <UART_Init>:
 *
 * @param	UART_Config_t: This points to the UART_Config_t data structure that holds all of the information for the
 * 			specific UART peripheral.
 */
void UART_Init(UART_Config_t *UART_Config)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	RCC_ClockFrequency_t Clock_Source;

	Enable_UART_Periph(UART_Config->UARTx);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff2f 	bl	8002ee8 <Enable_UART_Periph>

	/**Configuring UART**/

	/*Select the Word-Length (8 bits/9 bits)*/
	UART_Config->UARTx->CR1 &= ~UART_WORDLEN_9BITS;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003098:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->World_Length;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	885b      	ldrh	r3, [r3, #2]
 80030a4:	4619      	mov	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]

	/*Select over-sampling (8 or 16)*/
	UART_Config->UARTx->CR1 &= ~UART_OVERSAMPLING_8;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030bc:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->oversampling;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	889b      	ldrh	r3, [r3, #4]
 80030c8:	4619      	mov	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]

	/*Select transmission direction (Tx, Rx or Tx & Rx)*/
	UART_Config->UARTx->CR1 &= ~UART_MODE_TXRX;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f022 020c 	bic.w	r2, r2, #12
 80030e0:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Mode;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	899b      	ldrh	r3, [r3, #12]
 80030ec:	4619      	mov	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	60da      	str	r2, [r3, #12]

	/*Select parity (odd or even)*/
	UART_Config->UARTx->CR1 &= ~UART_PARITY_ODD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003104:	60da      	str	r2, [r3, #12]
	UART_Config->UARTx->CR1 |= UART_Config->Parity;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	88db      	ldrh	r3, [r3, #6]
 8003110:	4619      	mov	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	430a      	orrs	r2, r1
 8003118:	60da      	str	r2, [r3, #12]

	/*Select number of stop bits (0.5, 1, 1.5, 2)*/
	UART_Config->UARTx->CR2 &= ~UART_STOPBITS_1_5;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003128:	611a      	str	r2, [r3, #16]
	UART_Config->UARTx->CR2 |= UART_Config->Stop_Bits;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	430a      	orrs	r2, r1
 800313c:	611a      	str	r2, [r3, #16]

	/*Calculate and set baud-rate*/
	Set_BaudRate(&Clock_Source, UART_Config);
 800313e:	f107 0308 	add.w	r3, r7, #8
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff19 	bl	8002f7c <Set_BaudRate>

	/*Enable UART*/
	UART_Config->UARTx->CR1 |= UART_CR1_Enable;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003158:	60da      	str	r2, [r3, #12]

}
 800315a:	bf00      	nop
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <WriteByte>:
 * 			specific UART peripheral.
 *
 * @param	data: This specifies the data the user wishes to transmit.
 */
void WriteByte(UART_Config_t *UART_Config, uint16_t data)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	807b      	strh	r3, [r7, #2]
	while(!(UART_Config->UARTx->SR) && (UART_SR_TXE_Mask)){}
 800316e:	bf00      	nop
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0fa      	beq.n	8003170 <WriteByte+0xe>

	//Word length is 9 bits
	if(UART_Config->UARTx->CR1 & UART_WORDLEN_9BITS)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01a      	beq.n	80031be <WriteByte+0x5c>
	{
		//If parity is enabled 8 bits of data are sent with the 9th bit being the parity bit
		if((UART_Config->UARTx->CR1 & UART_PARITY_EVEN) || (UART_Config->UARTx->CR1 & UART_PARITY_ODD))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <WriteByte+0x42>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <WriteByte+0x4e>
		{
			UART_Config->UARTx->DR = ((uint8_t)data);
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	e021      	b.n	80031f4 <WriteByte+0x92>
		}

		//If parity is disabled then all 9 bits of data will be read as information
		else
		{
			UART_Config->UARTx->DR = (data & 0x1FF);
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ba:	605a      	str	r2, [r3, #4]
		else
		{
			UART_Config->UARTx->DR = ((uint8_t)data);
		}
	}
}
 80031bc:	e01a      	b.n	80031f4 <WriteByte+0x92>
		if((UART_Config->UARTx->CR1 & UART_PARITY_EVEN) || (UART_Config->UARTx->CR1 & UART_PARITY_ODD))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <WriteByte+0x78>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <WriteByte+0x86>
			UART_Config->UARTx->DR = (data & 0x7F);
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	e005      	b.n	80031f4 <WriteByte+0x92>
			UART_Config->UARTx->DR = ((uint8_t)data);
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	605a      	str	r2, [r3, #4]
}
 80031f2:	e7ff      	b.n	80031f4 <WriteByte+0x92>
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <ReadByte>:
 * 			specific UART peripheral.
 *
 * @retval	The function returns the value of the data register which is an 8 bit (1 byte) value.
 */
uint8_t ReadByte(UART_Config_t *UART_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	while(!((UART_Config->UARTx->SR) & (UART_SR_RXNE_Mask))){}
 8003208:	bf00      	nop
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f8      	beq.n	800320a <ReadByte+0xa>

	return UART_Config->UARTx->DR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	b2db      	uxtb	r3, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <UART_Interrupt_Init>:
 * 			 	1)UART_RXNEIE_Enable
 * 				2)UART_TXEIE_Enable
 * 				3)UART_TCIE_Enable
 */
void UART_Interrupt_Init(UART_Config_t *UART_Config, uint8_t interrupt_line)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
	UART_Config->UARTx->CR1 |= interrupt_line;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	68d9      	ldr	r1, [r3, #12]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	430a      	orrs	r2, r1
 8003246:	60da      	str	r2, [r3, #12]

	if(UART_Config->UARTx == USART2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <UART_Interrupt_Init+0x58>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d103      	bne.n	800325a <UART_Interrupt_Init+0x2e>
	{
		NVIC_EnableIRQ(USART2_IRQn);
 8003252:	2026      	movs	r0, #38	; 0x26
 8003254:	f7ff fdd0 	bl	8002df8 <__NVIC_EnableIRQ>

	else if(UART_Config->UARTx == USART6)
	{
		NVIC_EnableIRQ(USART6_IRQn);
	}
}
 8003258:	e010      	b.n	800327c <UART_Interrupt_Init+0x50>
	else if(UART_Config->UARTx == USART1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <UART_Interrupt_Init+0x5c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d103      	bne.n	800326c <UART_Interrupt_Init+0x40>
		NVIC_EnableIRQ(USART1_IRQn);
 8003264:	2025      	movs	r0, #37	; 0x25
 8003266:	f7ff fdc7 	bl	8002df8 <__NVIC_EnableIRQ>
}
 800326a:	e007      	b.n	800327c <UART_Interrupt_Init+0x50>
	else if(UART_Config->UARTx == USART6)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	4a06      	ldr	r2, [pc, #24]	; (800328c <UART_Interrupt_Init+0x60>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d102      	bne.n	800327c <UART_Interrupt_Init+0x50>
		NVIC_EnableIRQ(USART6_IRQn);
 8003276:	2047      	movs	r0, #71	; 0x47
 8003278:	f7ff fdbe 	bl	8002df8 <__NVIC_EnableIRQ>
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40004400 	.word	0x40004400
 8003288:	40011000 	.word	0x40011000
 800328c:	40011400 	.word	0x40011400

08003290 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Handler+0x1c>)
 8003296:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003298:	f001 fde4 	bl	8004e64 <xTaskGetSchedulerState>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80032a2:	f002 fd29 	bl	8005cf8 <xPortSysTickHandler>
  }
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <vApplicationGetIdleTaskMemory+0x2c>)
 80032c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4a06      	ldr	r2, [pc, #24]	; (80032e0 <vApplicationGetIdleTaskMemory+0x30>)
 80032c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000308 	.word	0x20000308
 80032e0:	20000364 	.word	0x20000364

080032e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <vApplicationGetTimerTaskMemory+0x2c>)
 80032f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4a06      	ldr	r2, [pc, #24]	; (8003314 <vApplicationGetTimerTaskMemory+0x30>)
 80032fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003302:	601a      	str	r2, [r3, #0]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	20000564 	.word	0x20000564
 8003314:	200005c0 	.word	0x200005c0

08003318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f103 0208 	add.w	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f103 0208 	add.w	r2, r3, #8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f103 0208 	add.w	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d103      	bne.n	80033da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e00c      	b.n	80033f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3308      	adds	r3, #8
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e002      	b.n	80033e8 <vListInsert+0x2e>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d2f6      	bcs.n	80033e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	601a      	str	r2, [r3, #0]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6892      	ldr	r2, [r2, #8]
 8003442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6852      	ldr	r2, [r2, #4]
 800344c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d103      	bne.n	8003460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034aa:	f002 fb93 	bl	8005bd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	441a      	add	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	3b01      	subs	r3, #1
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	441a      	add	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	22ff      	movs	r2, #255	; 0xff
 80034f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d114      	bne.n	800352a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3310      	adds	r3, #16
 800350c:	4618      	mov	r0, r3
 800350e:	f001 faeb 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d012      	beq.n	800353e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <xQueueGenericReset+0xcc>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	e009      	b.n	800353e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3310      	adds	r3, #16
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fef2 	bl	8003318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff feed 	bl	8003318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800353e:	f002 fb79 	bl	8005c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	; 0x38
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <xQueueGenericCreateStatic+0x52>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <xQueueGenericCreateStatic+0x56>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <xQueueGenericCreateStatic+0x58>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	623b      	str	r3, [r7, #32]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <xQueueGenericCreateStatic+0x7e>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <xQueueGenericCreateStatic+0x82>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xQueueGenericCreateStatic+0x84>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	61fb      	str	r3, [r7, #28]
}
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035ee:	2350      	movs	r3, #80	; 0x50
 80035f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b50      	cmp	r3, #80	; 0x50
 80035f6:	d00a      	beq.n	800360e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	61bb      	str	r3, [r7, #24]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800360e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003622:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f83f 	bl	80036b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003638:	4618      	mov	r0, r3
 800363a:	3730      	adds	r7, #48	; 0x30
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	613b      	str	r3, [r7, #16]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3350      	adds	r3, #80	; 0x50
 8003678:	4618      	mov	r0, r3
 800367a:	f002 fbcd 	bl	8005e18 <pvPortMalloc>
 800367e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d011      	beq.n	80036aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3350      	adds	r3, #80	; 0x50
 800368e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003698:	79fa      	ldrb	r2, [r7, #7]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f805 	bl	80036b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036aa:	69bb      	ldr	r3, [r7, #24]
	}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e002      	b.n	80036d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036e2:	2101      	movs	r1, #1
 80036e4:	69b8      	ldr	r0, [r7, #24]
 80036e6:	f7ff fecb 	bl	8003480 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800371a:	2300      	movs	r3, #0
 800371c:	2200      	movs	r2, #0
 800371e:	2100      	movs	r1, #0
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f81d 	bl	8003760 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003738:	2301      	movs	r3, #1
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	461a      	mov	r2, r3
 8003744:	6939      	ldr	r1, [r7, #16]
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff ff7a 	bl	8003640 <xQueueGenericCreate>
 800374c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff ffd3 	bl	80036fa <prvInitialiseMutex>

		return xNewQueue;
 8003754:	68fb      	ldr	r3, [r7, #12]
	}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <xQueueGenericSend+0x32>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <xQueueGenericSend+0x40>
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <xQueueGenericSend+0x44>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <xQueueGenericSend+0x46>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <xQueueGenericSend+0x60>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d103      	bne.n	80037ce <xQueueGenericSend+0x6e>
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <xQueueGenericSend+0x72>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xQueueGenericSend+0x74>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xQueueGenericSend+0x8e>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	623b      	str	r3, [r7, #32]
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ee:	f001 fb39 	bl	8004e64 <xTaskGetSchedulerState>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <xQueueGenericSend+0x9e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <xQueueGenericSend+0xa2>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericSend+0xa4>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <xQueueGenericSend+0xbe>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	61fb      	str	r3, [r7, #28]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800381e:	f002 f9d9 	bl	8005bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <xQueueGenericSend+0xd4>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d129      	bne.n	8003888 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800383a:	f000 fbbb 	bl	8003fb4 <prvCopyDataToQueue>
 800383e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	3324      	adds	r3, #36	; 0x24
 800384c:	4618      	mov	r0, r3
 800384e:	f001 f94b 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003858:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <xQueueGenericSend+0x1f8>)
 800385a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	e00a      	b.n	8003880 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003870:	4b39      	ldr	r3, [pc, #228]	; (8003958 <xQueueGenericSend+0x1f8>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003880:	f002 f9d8 	bl	8005c34 <vPortExitCritical>
				return pdPASS;
 8003884:	2301      	movs	r3, #1
 8003886:	e063      	b.n	8003950 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800388e:	f002 f9d1 	bl	8005c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003892:	2300      	movs	r3, #0
 8003894:	e05c      	b.n	8003950 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 f985 	bl	8004bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038aa:	f002 f9c3 	bl	8005c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ae:	f000 fef7 	bl	80046a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038b2:	f002 f98f 	bl	8005bd4 <vPortEnterCritical>
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038bc:	b25b      	sxtb	r3, r3
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d103      	bne.n	80038cc <xQueueGenericSend+0x16c>
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d103      	bne.n	80038e2 <xQueueGenericSend+0x182>
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e2:	f002 f9a7 	bl	8005c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038e6:	1d3a      	adds	r2, r7, #4
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 f974 	bl	8004bdc <xTaskCheckForTimeOut>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d124      	bne.n	8003944 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038fc:	f000 fc52 	bl	80041a4 <prvIsQueueFull>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	3310      	adds	r3, #16
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f89a 	bl	8004a48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003916:	f000 fbdd 	bl	80040d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800391a:	f000 fecf 	bl	80046bc <xTaskResumeAll>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f af7c 	bne.w	800381e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <xQueueGenericSend+0x1f8>)
 8003928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	e772      	b.n	800381e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800393a:	f000 fbcb 	bl	80040d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800393e:	f000 febd 	bl	80046bc <xTaskResumeAll>
 8003942:	e76c      	b.n	800381e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003946:	f000 fbc5 	bl	80040d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800394a:	f000 feb7 	bl	80046bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800394e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003950:	4618      	mov	r0, r3
 8003952:	3738      	adds	r7, #56	; 0x38
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b090      	sub	sp, #64	; 0x40
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <xQueueGenericSendFromISR+0x3c>
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <xQueueGenericSendFromISR+0x40>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <xQueueGenericSendFromISR+0x42>
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d103      	bne.n	80039c6 <xQueueGenericSendFromISR+0x6a>
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <xQueueGenericSendFromISR+0x6e>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericSendFromISR+0x70>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039e6:	f002 f9d7 	bl	8005d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039ea:	f3ef 8211 	mrs	r2, BASEPRI
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	61fa      	str	r2, [r7, #28]
 8003a00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <xQueueGenericSendFromISR+0xbc>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d12f      	bne.n	8003a78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a2e:	f000 fac1 	bl	8003fb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d112      	bne.n	8003a62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	3324      	adds	r3, #36	; 0x24
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 f84d 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00e      	beq.n	8003a72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e007      	b.n	8003a72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	b25a      	sxtb	r2, r3
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a72:	2301      	movs	r3, #1
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a76:	e001      	b.n	8003a7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3740      	adds	r7, #64	; 0x40
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b08e      	sub	sp, #56	; 0x38
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	623b      	str	r3, [r7, #32]
}
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <xQueueGiveFromISR+0x48>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	61fb      	str	r3, [r7, #28]
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <xQueueGiveFromISR+0x58>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <xQueueGiveFromISR+0x5c>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <xQueueGiveFromISR+0x5e>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61bb      	str	r3, [r7, #24]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b0a:	f002 f945 	bl	8005d98 <vPortValidateInterruptPriority>
	__asm volatile
 8003b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	617a      	str	r2, [r7, #20]
 8003b24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003b26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d22b      	bcs.n	8003b92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d112      	bne.n	8003b7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	3324      	adds	r3, #36	; 0x24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 ffc0 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00e      	beq.n	8003b8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00b      	beq.n	8003b8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e007      	b.n	8003b8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b80:	3301      	adds	r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	b25a      	sxtb	r2, r3
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b90:	e001      	b.n	8003b96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f383 8811 	msr	BASEPRI, r3
}
 8003ba0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3738      	adds	r7, #56	; 0x38
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <xQueueReceive+0x30>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	623b      	str	r3, [r7, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <xQueueReceive+0x3e>
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <xQueueReceive+0x42>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <xQueueReceive+0x44>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xQueueReceive+0x5e>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61fb      	str	r3, [r7, #28]
}
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c0a:	f001 f92b 	bl	8004e64 <xTaskGetSchedulerState>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <xQueueReceive+0x6e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <xQueueReceive+0x72>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <xQueueReceive+0x74>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueReceive+0x8e>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	61bb      	str	r3, [r7, #24]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c3a:	f001 ffcb 	bl	8005bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01f      	beq.n	8003c8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4e:	f000 fa1b 	bl	8004088 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00f      	beq.n	8003c82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	3310      	adds	r3, #16
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 ff3e 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <xQueueReceive+0x1bc>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c82:	f001 ffd7 	bl	8005c34 <vPortExitCritical>
				return pdPASS;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e069      	b.n	8003d5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c90:	f001 ffd0 	bl	8005c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e062      	b.n	8003d5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c9e:	f107 0310 	add.w	r3, r7, #16
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 ff84 	bl	8004bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cac:	f001 ffc2 	bl	8005c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb0:	f000 fcf6 	bl	80046a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cb4:	f001 ff8e 	bl	8005bd4 <vPortEnterCritical>
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cbe:	b25b      	sxtb	r3, r3
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d103      	bne.n	8003cce <xQueueReceive+0x122>
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d103      	bne.n	8003ce4 <xQueueReceive+0x138>
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce4:	f001 ffa6 	bl	8005c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce8:	1d3a      	adds	r2, r7, #4
 8003cea:	f107 0310 	add.w	r3, r7, #16
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 ff73 	bl	8004bdc <xTaskCheckForTimeOut>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d123      	bne.n	8003d44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfe:	f000 fa3b 	bl	8004178 <prvIsQueueEmpty>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	3324      	adds	r3, #36	; 0x24
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fe99 	bl	8004a48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f000 f9dc 	bl	80040d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d1c:	f000 fcce 	bl	80046bc <xTaskResumeAll>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d189      	bne.n	8003c3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <xQueueReceive+0x1bc>)
 8003d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	e780      	b.n	8003c3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 f9cb 	bl	80040d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d3e:	f000 fcbd 	bl	80046bc <xTaskResumeAll>
 8003d42:	e77a      	b.n	8003c3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d46:	f000 f9c5 	bl	80040d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d4a:	f000 fcb7 	bl	80046bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d50:	f000 fa12 	bl	8004178 <prvIsQueueEmpty>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f43f af6f 	beq.w	8003c3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3730      	adds	r7, #48	; 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08e      	sub	sp, #56	; 0x38
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	623b      	str	r3, [r7, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	61fb      	str	r3, [r7, #28]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dbc:	f001 f852 	bl	8004e64 <xTaskGetSchedulerState>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <xQueueSemaphoreTake+0x60>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <xQueueSemaphoreTake+0x64>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <xQueueSemaphoreTake+0x66>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	61bb      	str	r3, [r7, #24]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dec:	f001 fef2 	bl	8005bd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d024      	beq.n	8003e46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	1e5a      	subs	r2, r3, #1
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e0c:	f001 f9a0 	bl	8005150 <pvTaskIncrementMutexHeldCount>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00f      	beq.n	8003e3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	3310      	adds	r3, #16
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fe60 	bl	8004ae8 <xTaskRemoveFromEventList>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e2e:	4b54      	ldr	r3, [pc, #336]	; (8003f80 <xQueueSemaphoreTake+0x214>)
 8003e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e3e:	f001 fef9 	bl	8005c34 <vPortExitCritical>
				return pdPASS;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e097      	b.n	8003f76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	617b      	str	r3, [r7, #20]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e68:	f001 fee4 	bl	8005c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e082      	b.n	8003f76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e76:	f107 030c 	add.w	r3, r7, #12
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fe98 	bl	8004bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e84:	f001 fed6 	bl	8005c34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e88:	f000 fc0a 	bl	80046a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e8c:	f001 fea2 	bl	8005bd4 <vPortEnterCritical>
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d103      	bne.n	8003ea6 <xQueueSemaphoreTake+0x13a>
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d103      	bne.n	8003ebc <xQueueSemaphoreTake+0x150>
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ebc:	f001 feba 	bl	8005c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ec0:	463a      	mov	r2, r7
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fe87 	bl	8004bdc <xTaskCheckForTimeOut>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d132      	bne.n	8003f3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ed6:	f000 f94f 	bl	8004178 <prvIsQueueEmpty>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d026      	beq.n	8003f2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ee8:	f001 fe74 	bl	8005bd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 ffd5 	bl	8004ea0 <xTaskPriorityInherit>
 8003ef6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ef8:	f001 fe9c 	bl	8005c34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	3324      	adds	r3, #36	; 0x24
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fd9f 	bl	8004a48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f0c:	f000 f8e2 	bl	80040d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f10:	f000 fbd4 	bl	80046bc <xTaskResumeAll>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f47f af68 	bne.w	8003dec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <xQueueSemaphoreTake+0x214>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	e75e      	b.n	8003dec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f30:	f000 f8d0 	bl	80040d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f34:	f000 fbc2 	bl	80046bc <xTaskResumeAll>
 8003f38:	e758      	b.n	8003dec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f3c:	f000 f8ca 	bl	80040d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f40:	f000 fbbc 	bl	80046bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f46:	f000 f917 	bl	8004178 <prvIsQueueEmpty>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f43f af4d 	beq.w	8003dec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f58:	f001 fe3c 	bl	8005bd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f5e:	f000 f811 	bl	8003f84 <prvGetDisinheritPriorityAfterTimeout>
 8003f62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f86e 	bl	800504c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f70:	f001 fe60 	bl	8005c34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3738      	adds	r7, #56	; 0x38
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d006      	beq.n	8003fa2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e001      	b.n	8003fa6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
	}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d14d      	bne.n	8004076 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 ffc6 	bl	8004f70 <xTaskPriorityDisinherit>
 8003fe4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	e043      	b.n	8004076 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d119      	bne.n	8004028 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6858      	ldr	r0, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	f003 fbad 	bl	800775e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	441a      	add	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d32b      	bcc.n	8004076 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	e026      	b.n	8004076 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68d8      	ldr	r0, [r3, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	461a      	mov	r2, r3
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	f003 fb93 	bl	800775e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	425b      	negs	r3, r3
 8004042:	441a      	add	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d207      	bcs.n	8004064 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	425b      	negs	r3, r3
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d105      	bne.n	8004076 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3b01      	subs	r3, #1
 8004074:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800407e:	697b      	ldr	r3, [r7, #20]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d018      	beq.n	80040cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	441a      	add	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d303      	bcc.n	80040bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	461a      	mov	r2, r3
 80040c6:	6838      	ldr	r0, [r7, #0]
 80040c8:	f003 fb49 	bl	800775e <memcpy>
	}
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040dc:	f001 fd7a 	bl	8005bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040e8:	e011      	b.n	800410e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d012      	beq.n	8004118 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fcf6 	bl	8004ae8 <xTaskRemoveFromEventList>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004102:	f000 fdcd 	bl	8004ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	3b01      	subs	r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800410e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	dce9      	bgt.n	80040ea <prvUnlockQueue+0x16>
 8004116:	e000      	b.n	800411a <prvUnlockQueue+0x46>
					break;
 8004118:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	22ff      	movs	r2, #255	; 0xff
 800411e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004122:	f001 fd87 	bl	8005c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004126:	f001 fd55 	bl	8005bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004130:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004132:	e011      	b.n	8004158 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3310      	adds	r3, #16
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fcd1 	bl	8004ae8 <xTaskRemoveFromEventList>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800414c:	f000 fda8 	bl	8004ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	3b01      	subs	r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800415c:	2b00      	cmp	r3, #0
 800415e:	dce9      	bgt.n	8004134 <prvUnlockQueue+0x60>
 8004160:	e000      	b.n	8004164 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004162:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	22ff      	movs	r2, #255	; 0xff
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800416c:	f001 fd62 	bl	8005c34 <vPortExitCritical>
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004180:	f001 fd28 	bl	8005bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800418c:	2301      	movs	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e001      	b.n	8004196 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004196:	f001 fd4d 	bl	8005c34 <vPortExitCritical>

	return xReturn;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041ac:	f001 fd12 	bl	8005bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d102      	bne.n	80041c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e001      	b.n	80041c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041c6:	f001 fd35 	bl	8005c34 <vPortExitCritical>

	return xReturn;
 80041ca:	68fb      	ldr	r3, [r7, #12]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e014      	b.n	800420e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041e4:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <vQueueAddToRegistry+0x50>)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041f0:	490c      	ldr	r1, [pc, #48]	; (8004224 <vQueueAddToRegistry+0x50>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <vQueueAddToRegistry+0x50>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004206:	e006      	b.n	8004216 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b07      	cmp	r3, #7
 8004212:	d9e7      	bls.n	80041e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	200009c0 	.word	0x200009c0

08004228 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004238:	f001 fccc 	bl	8005bd4 <vPortEnterCritical>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004242:	b25b      	sxtb	r3, r3
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d103      	bne.n	8004252 <vQueueWaitForMessageRestricted+0x2a>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004258:	b25b      	sxtb	r3, r3
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d103      	bne.n	8004268 <vQueueWaitForMessageRestricted+0x40>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004268:	f001 fce4 	bl	8005c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fc07 	bl	8004a90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f7ff ff26 	bl	80040d4 <prvUnlockQueue>
	}
 8004288:	bf00      	nop
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af04      	add	r7, sp, #16
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	623b      	str	r3, [r7, #32]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	61fb      	str	r3, [r7, #28]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042d6:	235c      	movs	r3, #92	; 0x5c
 80042d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b5c      	cmp	r3, #92	; 0x5c
 80042de:	d00a      	beq.n	80042f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61bb      	str	r3, [r7, #24]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01e      	beq.n	800433c <xTaskCreateStatic+0xac>
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800430c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004316:	2300      	movs	r3, #0
 8004318:	9303      	str	r3, [sp, #12]
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	9302      	str	r3, [sp, #8]
 800431e:	f107 0314 	add.w	r3, r7, #20
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f850 	bl	80043d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004336:	f000 f8dd 	bl	80044f4 <prvAddNewTaskToReadyList>
 800433a:	e001      	b.n	8004340 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004340:	697b      	ldr	r3, [r7, #20]
	}
 8004342:	4618      	mov	r0, r3
 8004344:	3728      	adds	r7, #40	; 0x28
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800434a:	b580      	push	{r7, lr}
 800434c:	b08c      	sub	sp, #48	; 0x30
 800434e:	af04      	add	r7, sp, #16
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4618      	mov	r0, r3
 8004360:	f001 fd5a 	bl	8005e18 <pvPortMalloc>
 8004364:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800436c:	205c      	movs	r0, #92	; 0x5c
 800436e:	f001 fd53 	bl	8005e18 <pvPortMalloc>
 8004372:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
 8004380:	e005      	b.n	800438e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004382:	6978      	ldr	r0, [r7, #20]
 8004384:	f001 fe14 	bl	8005fb0 <vPortFree>
 8004388:	e001      	b.n	800438e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	2300      	movs	r3, #0
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	9302      	str	r3, [sp, #8]
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f80e 	bl	80043d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043b8:	69f8      	ldr	r0, [r7, #28]
 80043ba:	f000 f89b 	bl	80044f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043be:	2301      	movs	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e002      	b.n	80043ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
 80043c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043ca:	69bb      	ldr	r3, [r7, #24]
	}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	21a5      	movs	r1, #165	; 0xa5
 80043ee:	f003 f936 	bl	800765e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043fc:	3b01      	subs	r3, #1
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	617b      	str	r3, [r7, #20]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01f      	beq.n	8004472 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e012      	b.n	800445e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	7819      	ldrb	r1, [r3, #0]
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	3334      	adds	r3, #52	; 0x34
 8004448:	460a      	mov	r2, r1
 800444a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b0f      	cmp	r3, #15
 8004462:	d9e9      	bls.n	8004438 <prvInitialiseNewTask+0x64>
 8004464:	e000      	b.n	8004468 <prvInitialiseNewTask+0x94>
			{
				break;
 8004466:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004470:	e003      	b.n	800447a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2b37      	cmp	r3, #55	; 0x37
 800447e:	d901      	bls.n	8004484 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004480:	2337      	movs	r3, #55	; 0x37
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2200      	movs	r2, #0
 8004494:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	3304      	adds	r3, #4
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe ff5c 	bl	8003358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	3318      	adds	r3, #24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe ff57 	bl	8003358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2200      	movs	r2, #0
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	69b8      	ldr	r0, [r7, #24]
 80044d4:	f001 fa4e 	bl	8005974 <pxPortInitialiseStack>
 80044d8:	4602      	mov	r2, r0
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ea:	bf00      	nop
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044fc:	f001 fb6a 	bl	8005bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 8004508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800450a:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004512:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <prvAddNewTaskToReadyList+0xc4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d110      	bne.n	8004542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004520:	f000 fbe2 	bl	8004ce8 <prvInitialiseTaskLists>
 8004524:	e00d      	b.n	8004542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <prvAddNewTaskToReadyList+0xcc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	429a      	cmp	r2, r3
 800453a:	d802      	bhi.n	8004542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 800454a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <prvAddNewTaskToReadyList+0xd0>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <prvAddNewTaskToReadyList+0xd4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d903      	bls.n	8004568 <prvAddNewTaskToReadyList+0x74>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <prvAddNewTaskToReadyList+0xd4>)
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <prvAddNewTaskToReadyList+0xd8>)
 8004576:	441a      	add	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7fe fef7 	bl	8003372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004584:	f001 fb56 	bl	8005c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <prvAddNewTaskToReadyList+0xcc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <prvAddNewTaskToReadyList+0xc8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	429a      	cmp	r2, r3
 800459c:	d207      	bcs.n	80045ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <prvAddNewTaskToReadyList+0xdc>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000ed4 	.word	0x20000ed4
 80045bc:	20000a00 	.word	0x20000a00
 80045c0:	20000ee0 	.word	0x20000ee0
 80045c4:	20000ef0 	.word	0x20000ef0
 80045c8:	20000edc 	.word	0x20000edc
 80045cc:	20000a04 	.word	0x20000a04
 80045d0:	e000ed04 	.word	0xe000ed04

080045d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045e2:	463a      	mov	r2, r7
 80045e4:	1d39      	adds	r1, r7, #4
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fe60 	bl	80032b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	9202      	str	r2, [sp, #8]
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2300      	movs	r3, #0
 8004600:	460a      	mov	r2, r1
 8004602:	4921      	ldr	r1, [pc, #132]	; (8004688 <vTaskStartScheduler+0xb4>)
 8004604:	4821      	ldr	r0, [pc, #132]	; (800468c <vTaskStartScheduler+0xb8>)
 8004606:	f7ff fe43 	bl	8004290 <xTaskCreateStatic>
 800460a:	4603      	mov	r3, r0
 800460c:	4a20      	ldr	r2, [pc, #128]	; (8004690 <vTaskStartScheduler+0xbc>)
 800460e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <vTaskStartScheduler+0xbc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e001      	b.n	8004622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d102      	bne.n	800462e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004628:	f000 fdfa 	bl	8005220 <xTimerCreateTimerTask>
 800462c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d116      	bne.n	8004662 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	613b      	str	r3, [r7, #16]
}
 8004646:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004648:	4b12      	ldr	r3, [pc, #72]	; (8004694 <vTaskStartScheduler+0xc0>)
 800464a:	f04f 32ff 	mov.w	r2, #4294967295
 800464e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <vTaskStartScheduler+0xc4>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <vTaskStartScheduler+0xc8>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800465c:	f001 fa18 	bl	8005a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004660:	e00e      	b.n	8004680 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d10a      	bne.n	8004680 <vTaskStartScheduler+0xac>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60fb      	str	r3, [r7, #12]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vTaskStartScheduler+0xaa>
}
 8004680:	bf00      	nop
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	08009594 	.word	0x08009594
 800468c:	08004cb9 	.word	0x08004cb9
 8004690:	20000ef8 	.word	0x20000ef8
 8004694:	20000ef4 	.word	0x20000ef4
 8004698:	20000ee0 	.word	0x20000ee0
 800469c:	20000ed8 	.word	0x20000ed8

080046a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <vTaskSuspendAll+0x18>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	4a03      	ldr	r2, [pc, #12]	; (80046b8 <vTaskSuspendAll+0x18>)
 80046ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046ae:	bf00      	nop
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	20000efc 	.word	0x20000efc

080046bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046ca:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <xTaskResumeAll+0x118>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	603b      	str	r3, [r7, #0]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046e8:	f001 fa74 	bl	8005bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046ec:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <xTaskResumeAll+0x118>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	4a38      	ldr	r2, [pc, #224]	; (80047d4 <xTaskResumeAll+0x118>)
 80046f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f6:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <xTaskResumeAll+0x118>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d162      	bne.n	80047c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <xTaskResumeAll+0x11c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d05e      	beq.n	80047c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004706:	e02f      	b.n	8004768 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004708:	4b34      	ldr	r3, [pc, #208]	; (80047dc <xTaskResumeAll+0x120>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3318      	adds	r3, #24
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe fe89 	bl	800342c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3304      	adds	r3, #4
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fe84 	bl	800342c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <xTaskResumeAll+0x124>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d903      	bls.n	8004738 <xTaskResumeAll+0x7c>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <xTaskResumeAll+0x124>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <xTaskResumeAll+0x128>)
 8004746:	441a      	add	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fe0f 	bl	8003372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <xTaskResumeAll+0x12c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <xTaskResumeAll+0x130>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <xTaskResumeAll+0x120>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1cb      	bne.n	8004708 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004776:	f000 fb55 	bl	8004e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800477a:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <xTaskResumeAll+0x134>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004786:	f000 f847 	bl	8004818 <xTaskIncrementTick>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004790:	4b16      	ldr	r3, [pc, #88]	; (80047ec <xTaskResumeAll+0x130>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3b01      	subs	r3, #1
 800479a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f1      	bne.n	8004786 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <xTaskResumeAll+0x134>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <xTaskResumeAll+0x130>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047b0:	2301      	movs	r3, #1
 80047b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <xTaskResumeAll+0x138>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047c4:	f001 fa36 	bl	8005c34 <vPortExitCritical>

	return xAlreadyYielded;
 80047c8:	68bb      	ldr	r3, [r7, #8]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000efc 	.word	0x20000efc
 80047d8:	20000ed4 	.word	0x20000ed4
 80047dc:	20000e94 	.word	0x20000e94
 80047e0:	20000edc 	.word	0x20000edc
 80047e4:	20000a04 	.word	0x20000a04
 80047e8:	20000a00 	.word	0x20000a00
 80047ec:	20000ee8 	.word	0x20000ee8
 80047f0:	20000ee4 	.word	0x20000ee4
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <xTaskGetTickCount+0x1c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004804:	687b      	ldr	r3, [r7, #4]
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000ed8 	.word	0x20000ed8

08004818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004822:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <xTaskIncrementTick+0x148>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 808f 	bne.w	800494a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800482c:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <xTaskIncrementTick+0x14c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004834:	4a4b      	ldr	r2, [pc, #300]	; (8004964 <xTaskIncrementTick+0x14c>)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d120      	bne.n	8004882 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004840:	4b49      	ldr	r3, [pc, #292]	; (8004968 <xTaskIncrementTick+0x150>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <xTaskIncrementTick+0x48>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	603b      	str	r3, [r7, #0]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <xTaskIncrementTick+0x46>
 8004860:	4b41      	ldr	r3, [pc, #260]	; (8004968 <xTaskIncrementTick+0x150>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	4b41      	ldr	r3, [pc, #260]	; (800496c <xTaskIncrementTick+0x154>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a3f      	ldr	r2, [pc, #252]	; (8004968 <xTaskIncrementTick+0x150>)
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4a3f      	ldr	r2, [pc, #252]	; (800496c <xTaskIncrementTick+0x154>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <xTaskIncrementTick+0x158>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	4a3d      	ldr	r2, [pc, #244]	; (8004970 <xTaskIncrementTick+0x158>)
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	f000 fad1 	bl	8004e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004882:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <xTaskIncrementTick+0x15c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	d349      	bcc.n	8004920 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800488c:	4b36      	ldr	r3, [pc, #216]	; (8004968 <xTaskIncrementTick+0x150>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d104      	bne.n	80048a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004896:	4b37      	ldr	r3, [pc, #220]	; (8004974 <xTaskIncrementTick+0x15c>)
 8004898:	f04f 32ff 	mov.w	r2, #4294967295
 800489c:	601a      	str	r2, [r3, #0]
					break;
 800489e:	e03f      	b.n	8004920 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a0:	4b31      	ldr	r3, [pc, #196]	; (8004968 <xTaskIncrementTick+0x150>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d203      	bcs.n	80048c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048b8:	4a2e      	ldr	r2, [pc, #184]	; (8004974 <xTaskIncrementTick+0x15c>)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048be:	e02f      	b.n	8004920 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe fdb1 	bl	800342c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3318      	adds	r3, #24
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fda8 	bl	800342c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <xTaskIncrementTick+0x160>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d903      	bls.n	80048f0 <xTaskIncrementTick+0xd8>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4a22      	ldr	r2, [pc, #136]	; (8004978 <xTaskIncrementTick+0x160>)
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <xTaskIncrementTick+0x164>)
 80048fe:	441a      	add	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7fe fd33 	bl	8003372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4b1b      	ldr	r3, [pc, #108]	; (8004980 <xTaskIncrementTick+0x168>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	429a      	cmp	r2, r3
 8004918:	d3b8      	bcc.n	800488c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800491a:	2301      	movs	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800491e:	e7b5      	b.n	800488c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004920:	4b17      	ldr	r3, [pc, #92]	; (8004980 <xTaskIncrementTick+0x168>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	4915      	ldr	r1, [pc, #84]	; (800497c <xTaskIncrementTick+0x164>)
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d901      	bls.n	800493c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <xTaskIncrementTick+0x16c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004944:	2301      	movs	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	e004      	b.n	8004954 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <xTaskIncrementTick+0x170>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	4a0d      	ldr	r2, [pc, #52]	; (8004988 <xTaskIncrementTick+0x170>)
 8004952:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004954:	697b      	ldr	r3, [r7, #20]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000efc 	.word	0x20000efc
 8004964:	20000ed8 	.word	0x20000ed8
 8004968:	20000e8c 	.word	0x20000e8c
 800496c:	20000e90 	.word	0x20000e90
 8004970:	20000eec 	.word	0x20000eec
 8004974:	20000ef4 	.word	0x20000ef4
 8004978:	20000edc 	.word	0x20000edc
 800497c:	20000a04 	.word	0x20000a04
 8004980:	20000a00 	.word	0x20000a00
 8004984:	20000ee8 	.word	0x20000ee8
 8004988:	20000ee4 	.word	0x20000ee4

0800498c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004992:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <vTaskSwitchContext+0xa8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800499a:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <vTaskSwitchContext+0xac>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049a0:	e041      	b.n	8004a26 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049a2:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <vTaskSwitchContext+0xac>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <vTaskSwitchContext+0xb0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e010      	b.n	80049d2 <vTaskSwitchContext+0x46>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <vTaskSwitchContext+0x40>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	607b      	str	r3, [r7, #4]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <vTaskSwitchContext+0x3e>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	491b      	ldr	r1, [pc, #108]	; (8004a40 <vTaskSwitchContext+0xb4>)
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0e4      	beq.n	80049b0 <vTaskSwitchContext+0x24>
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <vTaskSwitchContext+0xb4>)
 80049f2:	4413      	add	r3, r2
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3308      	adds	r3, #8
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d104      	bne.n	8004a16 <vTaskSwitchContext+0x8a>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a09      	ldr	r2, [pc, #36]	; (8004a44 <vTaskSwitchContext+0xb8>)
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <vTaskSwitchContext+0xb0>)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6013      	str	r3, [r2, #0]
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000efc 	.word	0x20000efc
 8004a38:	20000ee8 	.word	0x20000ee8
 8004a3c:	20000edc 	.word	0x20000edc
 8004a40:	20000a04 	.word	0x20000a04
 8004a44:	20000a00 	.word	0x20000a00

08004a48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <vTaskPlaceOnEventList+0x44>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3318      	adds	r3, #24
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fe fc9f 	bl	80033ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	6838      	ldr	r0, [r7, #0]
 8004a80:	f000 fb7a 	bl	8005178 <prvAddCurrentTaskToDelayedList>
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000a00 	.word	0x20000a00

08004a90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	617b      	str	r3, [r7, #20]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3318      	adds	r3, #24
 8004abe:	4619      	mov	r1, r3
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7fe fc56 	bl	8003372 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004acc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	68b8      	ldr	r0, [r7, #8]
 8004ad6:	f000 fb4f 	bl	8005178 <prvAddCurrentTaskToDelayedList>
	}
 8004ada:	bf00      	nop
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000a00 	.word	0x20000a00

08004ae8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	60fb      	str	r3, [r7, #12]
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3318      	adds	r3, #24
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe fc87 	bl	800342c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <xTaskRemoveFromEventList+0xb0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11d      	bne.n	8004b62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fc7e 	bl	800342c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <xTaskRemoveFromEventList+0xb4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d903      	bls.n	8004b44 <xTaskRemoveFromEventList+0x5c>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <xTaskRemoveFromEventList+0xb4>)
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <xTaskRemoveFromEventList+0xb8>)
 8004b52:	441a      	add	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f7fe fc09 	bl	8003372 <vListInsertEnd>
 8004b60:	e005      	b.n	8004b6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	3318      	adds	r3, #24
 8004b66:	4619      	mov	r1, r3
 8004b68:	480e      	ldr	r0, [pc, #56]	; (8004ba4 <xTaskRemoveFromEventList+0xbc>)
 8004b6a:	f7fe fc02 	bl	8003372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <xTaskRemoveFromEventList+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d905      	bls.n	8004b88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <xTaskRemoveFromEventList+0xc4>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e001      	b.n	8004b8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b8c:	697b      	ldr	r3, [r7, #20]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000efc 	.word	0x20000efc
 8004b9c:	20000edc 	.word	0x20000edc
 8004ba0:	20000a04 	.word	0x20000a04
 8004ba4:	20000e94 	.word	0x20000e94
 8004ba8:	20000a00 	.word	0x20000a00
 8004bac:	20000ee8 	.word	0x20000ee8

08004bb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <vTaskInternalSetTimeOutState+0x24>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <vTaskInternalSetTimeOutState+0x28>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000eec 	.word	0x20000eec
 8004bd8:	20000ed8 	.word	0x20000ed8

08004bdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	613b      	str	r3, [r7, #16]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60fb      	str	r3, [r7, #12]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c1e:	f000 ffd9 	bl	8005bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <xTaskCheckForTimeOut+0xbc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d102      	bne.n	8004c42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e023      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <xTaskCheckForTimeOut+0xc0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d007      	beq.n	8004c5e <xTaskCheckForTimeOut+0x82>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e015      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d20b      	bcs.n	8004c80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff9b 	bl	8004bb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	e004      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c8a:	f000 ffd3 	bl	8005c34 <vPortExitCritical>

	return xReturn;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000ed8 	.word	0x20000ed8
 8004c9c:	20000eec 	.word	0x20000eec

08004ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <vTaskMissedYield+0x14>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	20000ee8 	.word	0x20000ee8

08004cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cc0:	f000 f852 	bl	8004d68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <prvIdleTask+0x28>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d9f9      	bls.n	8004cc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <prvIdleTask+0x2c>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cdc:	e7f0      	b.n	8004cc0 <prvIdleTask+0x8>
 8004cde:	bf00      	nop
 8004ce0:	20000a04 	.word	0x20000a04
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	e00c      	b.n	8004d0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <prvInitialiseTaskLists+0x60>)
 8004d00:	4413      	add	r3, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fb08 	bl	8003318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b37      	cmp	r3, #55	; 0x37
 8004d12:	d9ef      	bls.n	8004cf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d14:	480d      	ldr	r0, [pc, #52]	; (8004d4c <prvInitialiseTaskLists+0x64>)
 8004d16:	f7fe faff 	bl	8003318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d1a:	480d      	ldr	r0, [pc, #52]	; (8004d50 <prvInitialiseTaskLists+0x68>)
 8004d1c:	f7fe fafc 	bl	8003318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d20:	480c      	ldr	r0, [pc, #48]	; (8004d54 <prvInitialiseTaskLists+0x6c>)
 8004d22:	f7fe faf9 	bl	8003318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d26:	480c      	ldr	r0, [pc, #48]	; (8004d58 <prvInitialiseTaskLists+0x70>)
 8004d28:	f7fe faf6 	bl	8003318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d2c:	480b      	ldr	r0, [pc, #44]	; (8004d5c <prvInitialiseTaskLists+0x74>)
 8004d2e:	f7fe faf3 	bl	8003318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <prvInitialiseTaskLists+0x78>)
 8004d34:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <prvInitialiseTaskLists+0x64>)
 8004d36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <prvInitialiseTaskLists+0x7c>)
 8004d3a:	4a05      	ldr	r2, [pc, #20]	; (8004d50 <prvInitialiseTaskLists+0x68>)
 8004d3c:	601a      	str	r2, [r3, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000a04 	.word	0x20000a04
 8004d4c:	20000e64 	.word	0x20000e64
 8004d50:	20000e78 	.word	0x20000e78
 8004d54:	20000e94 	.word	0x20000e94
 8004d58:	20000ea8 	.word	0x20000ea8
 8004d5c:	20000ec0 	.word	0x20000ec0
 8004d60:	20000e8c 	.word	0x20000e8c
 8004d64:	20000e90 	.word	0x20000e90

08004d68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d6e:	e019      	b.n	8004da4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d70:	f000 ff30 	bl	8005bd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d74:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <prvCheckTasksWaitingTermination+0x50>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fb53 	bl	800342c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004d8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004d98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d9a:	f000 ff4b 	bl	8005c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f810 	bl	8004dc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e1      	bne.n	8004d70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000ea8 	.word	0x20000ea8
 8004dbc:	20000ed4 	.word	0x20000ed4
 8004dc0:	20000ebc 	.word	0x20000ebc

08004dc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d108      	bne.n	8004de8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f8e8 	bl	8005fb0 <vPortFree>
				vPortFree( pxTCB );
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 f8e5 	bl	8005fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004de6:	e018      	b.n	8004e1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d103      	bne.n	8004dfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f001 f8dc 	bl	8005fb0 <vPortFree>
	}
 8004df8:	e00f      	b.n	8004e1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d00a      	beq.n	8004e1a <prvDeleteTCB+0x56>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	60fb      	str	r3, [r7, #12]
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <prvDeleteTCB+0x54>
	}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <prvResetNextTaskUnblockTime+0x38>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <prvResetNextTaskUnblockTime+0x3c>)
 8004e36:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e3c:	e008      	b.n	8004e50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <prvResetNextTaskUnblockTime+0x38>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <prvResetNextTaskUnblockTime+0x3c>)
 8004e4e:	6013      	str	r3, [r2, #0]
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000e8c 	.word	0x20000e8c
 8004e60:	20000ef4 	.word	0x20000ef4

08004e64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <xTaskGetSchedulerState+0x34>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e72:	2301      	movs	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	e008      	b.n	8004e8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <xTaskGetSchedulerState+0x38>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e80:	2302      	movs	r3, #2
 8004e82:	607b      	str	r3, [r7, #4]
 8004e84:	e001      	b.n	8004e8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e8a:	687b      	ldr	r3, [r7, #4]
	}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	20000ee0 	.word	0x20000ee0
 8004e9c:	20000efc 	.word	0x20000efc

08004ea0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d051      	beq.n	8004f5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <xTaskPriorityInherit+0xc4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d241      	bcs.n	8004f48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	db06      	blt.n	8004eda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ecc:	4b25      	ldr	r3, [pc, #148]	; (8004f64 <xTaskPriorityInherit+0xc4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6959      	ldr	r1, [r3, #20]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <xTaskPriorityInherit+0xc8>)
 8004eec:	4413      	add	r3, r2
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d122      	bne.n	8004f38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe fa98 	bl	800342c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <xTaskPriorityInherit+0xc4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0a:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <xTaskPriorityInherit+0xcc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d903      	bls.n	8004f1a <xTaskPriorityInherit+0x7a>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <xTaskPriorityInherit+0xcc>)
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <xTaskPriorityInherit+0xc8>)
 8004f28:	441a      	add	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f7fe fa1e 	bl	8003372 <vListInsertEnd>
 8004f36:	e004      	b.n	8004f42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <xTaskPriorityInherit+0xc4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f42:	2301      	movs	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e008      	b.n	8004f5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <xTaskPriorityInherit+0xc4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d201      	bcs.n	8004f5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000a00 	.word	0x20000a00
 8004f68:	20000a04 	.word	0x20000a04
 8004f6c:	20000edc 	.word	0x20000edc

08004f70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d056      	beq.n	8005034 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f86:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <xTaskPriorityDisinherit+0xd0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d00a      	beq.n	8004fa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	60bb      	str	r3, [r7, #8]
}
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d02c      	beq.n	8005034 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d128      	bne.n	8005034 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fa20 	bl	800342c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <xTaskPriorityDisinherit+0xd4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d903      	bls.n	8005014 <xTaskPriorityDisinherit+0xa4>
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <xTaskPriorityDisinherit+0xd4>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a09      	ldr	r2, [pc, #36]	; (8005048 <xTaskPriorityDisinherit+0xd8>)
 8005022:	441a      	add	r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fe f9a1 	bl	8003372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005034:	697b      	ldr	r3, [r7, #20]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000a00 	.word	0x20000a00
 8005044:	20000edc 	.word	0x20000edc
 8005048:	20000a04 	.word	0x20000a04

0800504c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800505a:	2301      	movs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d06a      	beq.n	800513a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60fb      	str	r3, [r7, #12]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d902      	bls.n	8005092 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	e002      	b.n	8005098 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005096:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d04b      	beq.n	800513a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d146      	bne.n	800513a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d10a      	bne.n	80050cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	db04      	blt.n	80050ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	6959      	ldr	r1, [r3, #20]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80050fa:	4413      	add	r3, r2
 80050fc:	4299      	cmp	r1, r3
 80050fe:	d11c      	bne.n	800513a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe f991 	bl	800342c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510e:	4b0f      	ldr	r3, [pc, #60]	; (800514c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d903      	bls.n	800511e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	4a0c      	ldr	r2, [pc, #48]	; (800514c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4a07      	ldr	r2, [pc, #28]	; (8005148 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800512c:	441a      	add	r2, r3
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7fe f91c 	bl	8003372 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800513a:	bf00      	nop
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000a00 	.word	0x20000a00
 8005148:	20000a04 	.word	0x20000a04
 800514c:	20000edc 	.word	0x20000edc

08005150 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <pvTaskIncrementMutexHeldCount+0x24>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <pvTaskIncrementMutexHeldCount+0x24>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005162:	3201      	adds	r2, #1
 8005164:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005166:	4b03      	ldr	r3, [pc, #12]	; (8005174 <pvTaskIncrementMutexHeldCount+0x24>)
 8005168:	681b      	ldr	r3, [r3, #0]
	}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	20000a00 	.word	0x20000a00

08005178 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005182:	4b21      	ldr	r3, [pc, #132]	; (8005208 <prvAddCurrentTaskToDelayedList+0x90>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005188:	4b20      	ldr	r3, [pc, #128]	; (800520c <prvAddCurrentTaskToDelayedList+0x94>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3304      	adds	r3, #4
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe f94c 	bl	800342c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d10a      	bne.n	80051b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a2:	4b1a      	ldr	r3, [pc, #104]	; (800520c <prvAddCurrentTaskToDelayedList+0x94>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4819      	ldr	r0, [pc, #100]	; (8005210 <prvAddCurrentTaskToDelayedList+0x98>)
 80051ac:	f7fe f8e1 	bl	8003372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051b0:	e026      	b.n	8005200 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4413      	add	r3, r2
 80051b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051ba:	4b14      	ldr	r3, [pc, #80]	; (800520c <prvAddCurrentTaskToDelayedList+0x94>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d209      	bcs.n	80051de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <prvAddCurrentTaskToDelayedList+0x9c>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <prvAddCurrentTaskToDelayedList+0x94>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f7fe f8ef 	bl	80033ba <vListInsert>
}
 80051dc:	e010      	b.n	8005200 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051de:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <prvAddCurrentTaskToDelayedList+0xa0>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <prvAddCurrentTaskToDelayedList+0x94>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3304      	adds	r3, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f7fe f8e5 	bl	80033ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <prvAddCurrentTaskToDelayedList+0xa4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d202      	bcs.n	8005200 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051fa:	4a08      	ldr	r2, [pc, #32]	; (800521c <prvAddCurrentTaskToDelayedList+0xa4>)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6013      	str	r3, [r2, #0]
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000ed8 	.word	0x20000ed8
 800520c:	20000a00 	.word	0x20000a00
 8005210:	20000ec0 	.word	0x20000ec0
 8005214:	20000e90 	.word	0x20000e90
 8005218:	20000e8c 	.word	0x20000e8c
 800521c:	20000ef4 	.word	0x20000ef4

08005220 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	; 0x28
 8005224:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800522a:	f000 fb63 	bl	80058f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800522e:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <xTimerCreateTimerTask+0x80>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d021      	beq.n	800527a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800523e:	1d3a      	adds	r2, r7, #4
 8005240:	f107 0108 	add.w	r1, r7, #8
 8005244:	f107 030c 	add.w	r3, r7, #12
 8005248:	4618      	mov	r0, r3
 800524a:	f7fe f84b 	bl	80032e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	9202      	str	r2, [sp, #8]
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	2302      	movs	r3, #2
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2300      	movs	r3, #0
 800525e:	460a      	mov	r2, r1
 8005260:	4910      	ldr	r1, [pc, #64]	; (80052a4 <xTimerCreateTimerTask+0x84>)
 8005262:	4811      	ldr	r0, [pc, #68]	; (80052a8 <xTimerCreateTimerTask+0x88>)
 8005264:	f7ff f814 	bl	8004290 <xTaskCreateStatic>
 8005268:	4603      	mov	r3, r0
 800526a:	4a10      	ldr	r2, [pc, #64]	; (80052ac <xTimerCreateTimerTask+0x8c>)
 800526c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <xTimerCreateTimerTask+0x8c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005276:	2301      	movs	r3, #1
 8005278:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	613b      	str	r3, [r7, #16]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005296:	697b      	ldr	r3, [r7, #20]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000f30 	.word	0x20000f30
 80052a4:	0800959c 	.word	0x0800959c
 80052a8:	0800549d 	.word	0x0800549d
 80052ac:	20000f34 	.word	0x20000f34

080052b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80052be:	202c      	movs	r0, #44	; 0x2c
 80052c0:	f000 fdaa 	bl	8005e18 <pvPortMalloc>
 80052c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f805 	bl	80052f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80052e8:	697b      	ldr	r3, [r7, #20]
	}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b086      	sub	sp, #24
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	617b      	str	r3, [r7, #20]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01e      	beq.n	8005360 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005322:	f000 fae7 	bl	80058f4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	6a3a      	ldr	r2, [r7, #32]
 800533c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	3304      	adds	r3, #4
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe f808 	bl	8003358 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	b2da      	uxtb	r2, r3
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005360:	bf00      	nop
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	623b      	str	r3, [r7, #32]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <xTimerGenericCommand+0x98>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02a      	beq.n	80053f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	dc18      	bgt.n	80053e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053b0:	f7ff fd58 	bl	8004e64 <xTaskGetSchedulerState>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d109      	bne.n	80053ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <xTimerGenericCommand+0x98>)
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	f107 0110 	add.w	r1, r7, #16
 80053c2:	2300      	movs	r3, #0
 80053c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c6:	f7fe f9cb 	bl	8003760 <xQueueGenericSend>
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24
 80053cc:	e012      	b.n	80053f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <xTimerGenericCommand+0x98>)
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f107 0110 	add.w	r1, r7, #16
 80053d6:	2300      	movs	r3, #0
 80053d8:	2200      	movs	r2, #0
 80053da:	f7fe f9c1 	bl	8003760 <xQueueGenericSend>
 80053de:	6278      	str	r0, [r7, #36]	; 0x24
 80053e0:	e008      	b.n	80053f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <xTimerGenericCommand+0x98>)
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	f107 0110 	add.w	r1, r7, #16
 80053ea:	2300      	movs	r3, #0
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	f7fe fab5 	bl	800395c <xQueueGenericSendFromISR>
 80053f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3728      	adds	r7, #40	; 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000f30 	.word	0x20000f30

08005404 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af02      	add	r7, sp, #8
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800540e:	4b22      	ldr	r3, [pc, #136]	; (8005498 <prvProcessExpiredTimer+0x94>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe f805 	bl	800342c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d022      	beq.n	8005476 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	18d1      	adds	r1, r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	6978      	ldr	r0, [r7, #20]
 800543e:	f000 f8d1 	bl	80055e4 <prvInsertTimerInActiveList>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01f      	beq.n	8005488 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005448:	2300      	movs	r3, #0
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	2300      	movs	r3, #0
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	2100      	movs	r1, #0
 8005452:	6978      	ldr	r0, [r7, #20]
 8005454:	f7ff ff88 	bl	8005368 <xTimerGenericCommand>
 8005458:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d113      	bne.n	8005488 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	b2da      	uxtb	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	6978      	ldr	r0, [r7, #20]
 800548e:	4798      	blx	r3
}
 8005490:	bf00      	nop
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000f28 	.word	0x20000f28

0800549c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054a4:	f107 0308 	add.w	r3, r7, #8
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 f857 	bl	800555c <prvGetNextExpireTime>
 80054ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4619      	mov	r1, r3
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f803 	bl	80054c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054ba:	f000 f8d5 	bl	8005668 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054be:	e7f1      	b.n	80054a4 <prvTimerTask+0x8>

080054c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054ca:	f7ff f8e9 	bl	80046a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f866 	bl	80055a4 <prvSampleTimeNow>
 80054d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d130      	bne.n	8005542 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <prvProcessTimerOrBlockTask+0x3c>
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d806      	bhi.n	80054fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054ee:	f7ff f8e5 	bl	80046bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ff85 	bl	8005404 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054fa:	e024      	b.n	8005546 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005502:	4b13      	ldr	r3, [pc, #76]	; (8005550 <prvProcessTimerOrBlockTask+0x90>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <prvProcessTimerOrBlockTask+0x50>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <prvProcessTimerOrBlockTask+0x52>
 8005510:	2300      	movs	r3, #0
 8005512:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005514:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <prvProcessTimerOrBlockTask+0x94>)
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	4619      	mov	r1, r3
 8005522:	f7fe fe81 	bl	8004228 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005526:	f7ff f8c9 	bl	80046bc <xTaskResumeAll>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <prvProcessTimerOrBlockTask+0x98>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
}
 8005540:	e001      	b.n	8005546 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005542:	f7ff f8bb 	bl	80046bc <xTaskResumeAll>
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000f2c 	.word	0x20000f2c
 8005554:	20000f30 	.word	0x20000f30
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <prvGetNextExpireTime+0x44>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <prvGetNextExpireTime+0x16>
 800556e:	2201      	movs	r2, #1
 8005570:	e000      	b.n	8005574 <prvGetNextExpireTime+0x18>
 8005572:	2200      	movs	r2, #0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <prvGetNextExpireTime+0x44>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e001      	b.n	8005590 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000f28 	.word	0x20000f28

080055a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055ac:	f7ff f924 	bl	80047f8 <xTaskGetTickCount>
 80055b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055b2:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <prvSampleTimeNow+0x3c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d205      	bcs.n	80055c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055bc:	f000 f936 	bl	800582c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e002      	b.n	80055ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055ce:	4a04      	ldr	r2, [pc, #16]	; (80055e0 <prvSampleTimeNow+0x3c>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000f38 	.word	0x20000f38

080055e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d812      	bhi.n	8005630 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005618:	2301      	movs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e01b      	b.n	8005656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <prvInsertTimerInActiveList+0x7c>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3304      	adds	r3, #4
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f7fd fec6 	bl	80033ba <vListInsert>
 800562e:	e012      	b.n	8005656 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d206      	bcs.n	8005646 <prvInsertTimerInActiveList+0x62>
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e007      	b.n	8005656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005646:	4b07      	ldr	r3, [pc, #28]	; (8005664 <prvInsertTimerInActiveList+0x80>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3304      	adds	r3, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f7fd feb2 	bl	80033ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005656:	697b      	ldr	r3, [r7, #20]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000f2c 	.word	0x20000f2c
 8005664:	20000f28 	.word	0x20000f28

08005668 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08e      	sub	sp, #56	; 0x38
 800566c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800566e:	e0ca      	b.n	8005806 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	da18      	bge.n	80056a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005676:	1d3b      	adds	r3, r7, #4
 8005678:	3304      	adds	r3, #4
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	61fb      	str	r3, [r7, #28]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800569e:	6850      	ldr	r0, [r2, #4]
 80056a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a2:	6892      	ldr	r2, [r2, #8]
 80056a4:	4611      	mov	r1, r2
 80056a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f2c0 80ab 	blt.w	8005806 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fd feb3 	bl	800342c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056c6:	463b      	mov	r3, r7
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ff6b 	bl	80055a4 <prvSampleTimeNow>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b09      	cmp	r3, #9
 80056d4:	f200 8096 	bhi.w	8005804 <prvProcessReceivedCommands+0x19c>
 80056d8:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <prvProcessReceivedCommands+0x78>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005709 	.word	0x08005709
 80056ec:	0800577d 	.word	0x0800577d
 80056f0:	08005791 	.word	0x08005791
 80056f4:	080057db 	.word	0x080057db
 80056f8:	08005709 	.word	0x08005709
 80056fc:	08005709 	.word	0x08005709
 8005700:	0800577d 	.word	0x0800577d
 8005704:	08005791 	.word	0x08005791
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	b2da      	uxtb	r2, r3
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	18d1      	adds	r1, r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005728:	f7ff ff5c 	bl	80055e4 <prvInsertTimerInActiveList>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d069      	beq.n	8005806 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005738:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d05e      	beq.n	8005806 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	441a      	add	r2, r3
 8005750:	2300      	movs	r3, #0
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	2100      	movs	r1, #0
 8005758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575a:	f7ff fe05 	bl	8005368 <xTimerGenericCommand>
 800575e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d14f      	bne.n	8005806 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	61bb      	str	r3, [r7, #24]
}
 8005778:	bf00      	nop
 800577a:	e7fe      	b.n	800577a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	b2da      	uxtb	r2, r3
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800578e:	e03a      	b.n	8005806 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	b2da      	uxtb	r2, r3
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	617b      	str	r3, [r7, #20]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	18d1      	adds	r1, r2, r3
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d4:	f7ff ff06 	bl	80055e4 <prvInsertTimerInActiveList>
					break;
 80057d8:	e015      	b.n	8005806 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d103      	bne.n	80057f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80057e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ea:	f000 fbe1 	bl	8005fb0 <vPortFree>
 80057ee:	e00a      	b.n	8005806 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005802:	e000      	b.n	8005806 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005804:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005806:	4b08      	ldr	r3, [pc, #32]	; (8005828 <prvProcessReceivedCommands+0x1c0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	1d39      	adds	r1, r7, #4
 800580c:	2200      	movs	r2, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe f9cc 	bl	8003bac <xQueueReceive>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	f47f af2a 	bne.w	8005670 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	3730      	adds	r7, #48	; 0x30
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000f30 	.word	0x20000f30

0800582c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005832:	e048      	b.n	80058c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005834:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <prvSwitchTimerLists+0xc0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800583e:	4b2b      	ldr	r3, [pc, #172]	; (80058ec <prvSwitchTimerLists+0xc0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3304      	adds	r3, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f7fd fded 	bl	800342c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02e      	beq.n	80058c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4413      	add	r3, r2
 8005870:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d90e      	bls.n	8005898 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005886:	4b19      	ldr	r3, [pc, #100]	; (80058ec <prvSwitchTimerLists+0xc0>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3304      	adds	r3, #4
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f7fd fd92 	bl	80033ba <vListInsert>
 8005896:	e016      	b.n	80058c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005898:	2300      	movs	r3, #0
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2300      	movs	r3, #0
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	2100      	movs	r1, #0
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff fd60 	bl	8005368 <xTimerGenericCommand>
 80058a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	603b      	str	r3, [r7, #0]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <prvSwitchTimerLists+0xc0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1b1      	bne.n	8005834 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <prvSwitchTimerLists+0xc0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <prvSwitchTimerLists+0xc4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a04      	ldr	r2, [pc, #16]	; (80058ec <prvSwitchTimerLists+0xc0>)
 80058dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058de:	4a04      	ldr	r2, [pc, #16]	; (80058f0 <prvSwitchTimerLists+0xc4>)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	6013      	str	r3, [r2, #0]
}
 80058e4:	bf00      	nop
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000f28 	.word	0x20000f28
 80058f0:	20000f2c 	.word	0x20000f2c

080058f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058fa:	f000 f96b 	bl	8005bd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <prvCheckForValidListAndQueue+0x60>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d120      	bne.n	8005948 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005906:	4814      	ldr	r0, [pc, #80]	; (8005958 <prvCheckForValidListAndQueue+0x64>)
 8005908:	f7fd fd06 	bl	8003318 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800590c:	4813      	ldr	r0, [pc, #76]	; (800595c <prvCheckForValidListAndQueue+0x68>)
 800590e:	f7fd fd03 	bl	8003318 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005912:	4b13      	ldr	r3, [pc, #76]	; (8005960 <prvCheckForValidListAndQueue+0x6c>)
 8005914:	4a10      	ldr	r2, [pc, #64]	; (8005958 <prvCheckForValidListAndQueue+0x64>)
 8005916:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005918:	4b12      	ldr	r3, [pc, #72]	; (8005964 <prvCheckForValidListAndQueue+0x70>)
 800591a:	4a10      	ldr	r2, [pc, #64]	; (800595c <prvCheckForValidListAndQueue+0x68>)
 800591c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800591e:	2300      	movs	r3, #0
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <prvCheckForValidListAndQueue+0x74>)
 8005924:	4a11      	ldr	r2, [pc, #68]	; (800596c <prvCheckForValidListAndQueue+0x78>)
 8005926:	2110      	movs	r1, #16
 8005928:	200a      	movs	r0, #10
 800592a:	f7fd fe11 	bl	8003550 <xQueueGenericCreateStatic>
 800592e:	4603      	mov	r3, r0
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <prvCheckForValidListAndQueue+0x60>)
 8005932:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005934:	4b07      	ldr	r3, [pc, #28]	; (8005954 <prvCheckForValidListAndQueue+0x60>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <prvCheckForValidListAndQueue+0x60>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	490b      	ldr	r1, [pc, #44]	; (8005970 <prvCheckForValidListAndQueue+0x7c>)
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe fc46 	bl	80041d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005948:	f000 f974 	bl	8005c34 <vPortExitCritical>
}
 800594c:	bf00      	nop
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000f30 	.word	0x20000f30
 8005958:	20000f00 	.word	0x20000f00
 800595c:	20000f14 	.word	0x20000f14
 8005960:	20000f28 	.word	0x20000f28
 8005964:	20000f2c 	.word	0x20000f2c
 8005968:	20000fdc 	.word	0x20000fdc
 800596c:	20000f3c 	.word	0x20000f3c
 8005970:	080095a4 	.word	0x080095a4

08005974 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3b04      	subs	r3, #4
 8005984:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800598c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b04      	subs	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f023 0201 	bic.w	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3b04      	subs	r3, #4
 80059a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059a4:	4a0c      	ldr	r2, [pc, #48]	; (80059d8 <pxPortInitialiseStack+0x64>)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3b14      	subs	r3, #20
 80059ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3b04      	subs	r3, #4
 80059ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f06f 0202 	mvn.w	r2, #2
 80059c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3b20      	subs	r3, #32
 80059c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059ca:	68fb      	ldr	r3, [r7, #12]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	080059dd 	.word	0x080059dd

080059dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <prvTaskExitError+0x54>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d00a      	beq.n	8005a06 <prvTaskExitError+0x2a>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	60fb      	str	r3, [r7, #12]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <prvTaskExitError+0x28>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	60bb      	str	r3, [r7, #8]
}
 8005a18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a1a:	bf00      	nop
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0fc      	beq.n	8005a1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	2000002c 	.word	0x2000002c
	...

08005a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <pxCurrentTCBConst2>)
 8005a42:	6819      	ldr	r1, [r3, #0]
 8005a44:	6808      	ldr	r0, [r1, #0]
 8005a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4a:	f380 8809 	msr	PSP, r0
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f380 8811 	msr	BASEPRI, r0
 8005a5a:	4770      	bx	lr
 8005a5c:	f3af 8000 	nop.w

08005a60 <pxCurrentTCBConst2>:
 8005a60:	20000a00 	.word	0x20000a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop

08005a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a68:	4808      	ldr	r0, [pc, #32]	; (8005a8c <prvPortStartFirstTask+0x24>)
 8005a6a:	6800      	ldr	r0, [r0, #0]
 8005a6c:	6800      	ldr	r0, [r0, #0]
 8005a6e:	f380 8808 	msr	MSP, r0
 8005a72:	f04f 0000 	mov.w	r0, #0
 8005a76:	f380 8814 	msr	CONTROL, r0
 8005a7a:	b662      	cpsie	i
 8005a7c:	b661      	cpsie	f
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	df00      	svc	0
 8005a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a8a:	bf00      	nop
 8005a8c:	e000ed08 	.word	0xe000ed08

08005a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a96:	4b46      	ldr	r3, [pc, #280]	; (8005bb0 <xPortStartScheduler+0x120>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a46      	ldr	r2, [pc, #280]	; (8005bb4 <xPortStartScheduler+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10a      	bne.n	8005ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	613b      	str	r3, [r7, #16]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ab6:	4b3e      	ldr	r3, [pc, #248]	; (8005bb0 <xPortStartScheduler+0x120>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a3f      	ldr	r2, [pc, #252]	; (8005bb8 <xPortStartScheduler+0x128>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10a      	bne.n	8005ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60fb      	str	r3, [r7, #12]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ad6:	4b39      	ldr	r3, [pc, #228]	; (8005bbc <xPortStartScheduler+0x12c>)
 8005ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	22ff      	movs	r2, #255	; 0xff
 8005ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <xPortStartScheduler+0x130>)
 8005afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005afe:	4b31      	ldr	r3, [pc, #196]	; (8005bc4 <xPortStartScheduler+0x134>)
 8005b00:	2207      	movs	r2, #7
 8005b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b04:	e009      	b.n	8005b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b06:	4b2f      	ldr	r3, [pc, #188]	; (8005bc4 <xPortStartScheduler+0x134>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	4a2d      	ldr	r2, [pc, #180]	; (8005bc4 <xPortStartScheduler+0x134>)
 8005b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b80      	cmp	r3, #128	; 0x80
 8005b24:	d0ef      	beq.n	8005b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b26:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <xPortStartScheduler+0x134>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f1c3 0307 	rsb	r3, r3, #7
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d00a      	beq.n	8005b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60bb      	str	r3, [r7, #8]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b48:	4b1e      	ldr	r3, [pc, #120]	; (8005bc4 <xPortStartScheduler+0x134>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	4a1d      	ldr	r2, [pc, #116]	; (8005bc4 <xPortStartScheduler+0x134>)
 8005b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b52:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <xPortStartScheduler+0x134>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b5a:	4a1a      	ldr	r2, [pc, #104]	; (8005bc4 <xPortStartScheduler+0x134>)
 8005b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b66:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <xPortStartScheduler+0x138>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <xPortStartScheduler+0x138>)
 8005b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <xPortStartScheduler+0x138>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <xPortStartScheduler+0x138>)
 8005b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b7e:	f000 f8dd 	bl	8005d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <xPortStartScheduler+0x13c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b88:	f000 f8fc 	bl	8005d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b8c:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <xPortStartScheduler+0x140>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0f      	ldr	r2, [pc, #60]	; (8005bd0 <xPortStartScheduler+0x140>)
 8005b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b98:	f7ff ff66 	bl	8005a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b9c:	f7fe fef6 	bl	800498c <vTaskSwitchContext>
	prvTaskExitError();
 8005ba0:	f7ff ff1c 	bl	80059dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	e000ed00 	.word	0xe000ed00
 8005bb4:	410fc271 	.word	0x410fc271
 8005bb8:	410fc270 	.word	0x410fc270
 8005bbc:	e000e400 	.word	0xe000e400
 8005bc0:	2000102c 	.word	0x2000102c
 8005bc4:	20001030 	.word	0x20001030
 8005bc8:	e000ed20 	.word	0xe000ed20
 8005bcc:	2000002c 	.word	0x2000002c
 8005bd0:	e000ef34 	.word	0xe000ef34

08005bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	607b      	str	r3, [r7, #4]
}
 8005bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bee:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <vPortEnterCritical+0x58>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <vPortEnterCritical+0x58>)
 8005bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bf8:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <vPortEnterCritical+0x58>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d10f      	bne.n	8005c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c00:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <vPortEnterCritical+0x5c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	603b      	str	r3, [r7, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <vPortEnterCritical+0x4a>
	}
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	2000002c 	.word	0x2000002c
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c3a:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <vPortExitCritical+0x50>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <vPortExitCritical+0x24>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	607b      	str	r3, [r7, #4]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <vPortExitCritical+0x50>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <vPortExitCritical+0x50>)
 8005c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <vPortExitCritical+0x50>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <vPortExitCritical+0x42>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	f383 8811 	msr	BASEPRI, r3
}
 8005c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	2000002c 	.word	0x2000002c
	...

08005c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c90:	f3ef 8009 	mrs	r0, PSP
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <pxCurrentTCBConst>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	f01e 0f10 	tst.w	lr, #16
 8005ca0:	bf08      	it	eq
 8005ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	6010      	str	r0, [r2, #0]
 8005cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cb4:	f380 8811 	msr	BASEPRI, r0
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f7fe fe64 	bl	800498c <vTaskSwitchContext>
 8005cc4:	f04f 0000 	mov.w	r0, #0
 8005cc8:	f380 8811 	msr	BASEPRI, r0
 8005ccc:	bc09      	pop	{r0, r3}
 8005cce:	6819      	ldr	r1, [r3, #0]
 8005cd0:	6808      	ldr	r0, [r1, #0]
 8005cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd6:	f01e 0f10 	tst.w	lr, #16
 8005cda:	bf08      	it	eq
 8005cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ce0:	f380 8809 	msr	PSP, r0
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	f3af 8000 	nop.w

08005cf0 <pxCurrentTCBConst>:
 8005cf0:	20000a00 	.word	0x20000a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop

08005cf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	607b      	str	r3, [r7, #4]
}
 8005d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d12:	f7fe fd81 	bl	8004818 <xTaskIncrementTick>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <xPortSysTickHandler+0x40>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	2300      	movs	r3, #0
 8005d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f383 8811 	msr	BASEPRI, r3
}
 8005d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <vPortSetupTimerInterrupt+0x34>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <vPortSetupTimerInterrupt+0x38>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <vPortSetupTimerInterrupt+0x3c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <vPortSetupTimerInterrupt+0x40>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <vPortSetupTimerInterrupt+0x44>)
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d5e:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <vPortSetupTimerInterrupt+0x34>)
 8005d60:	2207      	movs	r2, #7
 8005d62:	601a      	str	r2, [r3, #0]
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	e000e010 	.word	0xe000e010
 8005d74:	e000e018 	.word	0xe000e018
 8005d78:	20000008 	.word	0x20000008
 8005d7c:	10624dd3 	.word	0x10624dd3
 8005d80:	e000e014 	.word	0xe000e014

08005d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d94 <vPortEnableVFP+0x10>
 8005d88:	6801      	ldr	r1, [r0, #0]
 8005d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d8e:	6001      	str	r1, [r0, #0]
 8005d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d92:	bf00      	nop
 8005d94:	e000ed88 	.word	0xe000ed88

08005d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d9e:	f3ef 8305 	mrs	r3, IPSR
 8005da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	d914      	bls.n	8005dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005daa:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <vPortValidateInterruptPriority+0x70>)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005db4:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <vPortValidateInterruptPriority+0x74>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	7afa      	ldrb	r2, [r7, #11]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d20a      	bcs.n	8005dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	607b      	str	r3, [r7, #4]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <vPortValidateInterruptPriority+0x78>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ddc:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <vPortValidateInterruptPriority+0x7c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d90a      	bls.n	8005dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	603b      	str	r3, [r7, #0]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <vPortValidateInterruptPriority+0x60>
	}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	e000e3f0 	.word	0xe000e3f0
 8005e0c:	2000102c 	.word	0x2000102c
 8005e10:	e000ed0c 	.word	0xe000ed0c
 8005e14:	20001030 	.word	0x20001030

08005e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e24:	f7fe fc3c 	bl	80046a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e28:	4b5b      	ldr	r3, [pc, #364]	; (8005f98 <pvPortMalloc+0x180>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e30:	f000 f920 	bl	8006074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e34:	4b59      	ldr	r3, [pc, #356]	; (8005f9c <pvPortMalloc+0x184>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 8093 	bne.w	8005f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01d      	beq.n	8005e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e48:	2208      	movs	r2, #8
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d014      	beq.n	8005e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f023 0307 	bic.w	r3, r3, #7
 8005e60:	3308      	adds	r3, #8
 8005e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <pvPortMalloc+0x6c>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	617b      	str	r3, [r7, #20]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d06e      	beq.n	8005f68 <pvPortMalloc+0x150>
 8005e8a:	4b45      	ldr	r3, [pc, #276]	; (8005fa0 <pvPortMalloc+0x188>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d869      	bhi.n	8005f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e94:	4b43      	ldr	r3, [pc, #268]	; (8005fa4 <pvPortMalloc+0x18c>)
 8005e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e98:	4b42      	ldr	r3, [pc, #264]	; (8005fa4 <pvPortMalloc+0x18c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e9e:	e004      	b.n	8005eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d903      	bls.n	8005ebc <pvPortMalloc+0xa4>
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f1      	bne.n	8005ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ebc:	4b36      	ldr	r3, [pc, #216]	; (8005f98 <pvPortMalloc+0x180>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d050      	beq.n	8005f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2208      	movs	r2, #8
 8005ecc:	4413      	add	r3, r2
 8005ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d91f      	bls.n	8005f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4413      	add	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <pvPortMalloc+0xf8>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	613b      	str	r3, [r7, #16]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	1ad2      	subs	r2, r2, r3
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f22:	69b8      	ldr	r0, [r7, #24]
 8005f24:	f000 f908 	bl	8006138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f28:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <pvPortMalloc+0x188>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	4a1b      	ldr	r2, [pc, #108]	; (8005fa0 <pvPortMalloc+0x188>)
 8005f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <pvPortMalloc+0x188>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <pvPortMalloc+0x190>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d203      	bcs.n	8005f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f42:	4b17      	ldr	r3, [pc, #92]	; (8005fa0 <pvPortMalloc+0x188>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <pvPortMalloc+0x190>)
 8005f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <pvPortMalloc+0x184>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <pvPortMalloc+0x194>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	4a11      	ldr	r2, [pc, #68]	; (8005fac <pvPortMalloc+0x194>)
 8005f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f68:	f7fe fba8 	bl	80046bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <pvPortMalloc+0x174>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	60fb      	str	r3, [r7, #12]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <pvPortMalloc+0x172>
	return pvReturn;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3728      	adds	r7, #40	; 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20004c3c 	.word	0x20004c3c
 8005f9c:	20004c50 	.word	0x20004c50
 8005fa0:	20004c40 	.word	0x20004c40
 8005fa4:	20004c34 	.word	0x20004c34
 8005fa8:	20004c44 	.word	0x20004c44
 8005fac:	20004c48 	.word	0x20004c48

08005fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d04d      	beq.n	800605e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	425b      	negs	r3, r3
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	4b24      	ldr	r3, [pc, #144]	; (8006068 <vPortFree+0xb8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <vPortFree+0x44>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	60fb      	str	r3, [r7, #12]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <vPortFree+0x62>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60bb      	str	r3, [r7, #8]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	4b14      	ldr	r3, [pc, #80]	; (8006068 <vPortFree+0xb8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01e      	beq.n	800605e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11a      	bne.n	800605e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <vPortFree+0xb8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	43db      	mvns	r3, r3
 8006032:	401a      	ands	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006038:	f7fe fb32 	bl	80046a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	4b0a      	ldr	r3, [pc, #40]	; (800606c <vPortFree+0xbc>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4413      	add	r3, r2
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <vPortFree+0xbc>)
 8006048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800604a:	6938      	ldr	r0, [r7, #16]
 800604c:	f000 f874 	bl	8006138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <vPortFree+0xc0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	4a06      	ldr	r2, [pc, #24]	; (8006070 <vPortFree+0xc0>)
 8006058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800605a:	f7fe fb2f 	bl	80046bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800605e:	bf00      	nop
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20004c50 	.word	0x20004c50
 800606c:	20004c40 	.word	0x20004c40
 8006070:	20004c4c 	.word	0x20004c4c

08006074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800607a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800607e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006080:	4b27      	ldr	r3, [pc, #156]	; (8006120 <prvHeapInit+0xac>)
 8006082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3307      	adds	r3, #7
 8006092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0307 	bic.w	r3, r3, #7
 800609a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <prvHeapInit+0xac>)
 80060a4:	4413      	add	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060ac:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <prvHeapInit+0xb0>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <prvHeapInit+0xb0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060c0:	2208      	movs	r2, #8
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0307 	bic.w	r3, r3, #7
 80060ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a15      	ldr	r2, [pc, #84]	; (8006128 <prvHeapInit+0xb4>)
 80060d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <prvHeapInit+0xb4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <prvHeapInit+0xb4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060f4:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <prvHeapInit+0xb4>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a0a      	ldr	r2, [pc, #40]	; (800612c <prvHeapInit+0xb8>)
 8006102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <prvHeapInit+0xbc>)
 800610a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <prvHeapInit+0xc0>)
 800610e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	20001034 	.word	0x20001034
 8006124:	20004c34 	.word	0x20004c34
 8006128:	20004c3c 	.word	0x20004c3c
 800612c:	20004c44 	.word	0x20004c44
 8006130:	20004c40 	.word	0x20004c40
 8006134:	20004c50 	.word	0x20004c50

08006138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006140:	4b28      	ldr	r3, [pc, #160]	; (80061e4 <prvInsertBlockIntoFreeList+0xac>)
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e002      	b.n	800614c <prvInsertBlockIntoFreeList+0x14>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d8f7      	bhi.n	8006146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4413      	add	r3, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	429a      	cmp	r2, r3
 8006166:	d108      	bne.n	800617a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	441a      	add	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d118      	bne.n	80061c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d00d      	beq.n	80061b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e008      	b.n	80061c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <prvInsertBlockIntoFreeList+0xb0>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e003      	b.n	80061c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d002      	beq.n	80061d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20004c34 	.word	0x20004c34
 80061e8:	20004c3c 	.word	0x20004c3c

080061ec <Compensation_values_Derivation>:
 * @Brief	Derives the compensation values from the read values and stores them in the data structure
 * @Note	This is done by converting pairs of 8 bit values into 16 bit values
 * @Note	The first compensation value for pressure and temp are both unsigned whereas the others are signed
 */
static void Compensation_values_Derivation(BME_Values *values, uint8_t comp_readings[])
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
	uint8_t index;

	//Compensation Values for temperature:
	values->Compensation_Vals.dig_T1 = ((uint16_t)comp_readings[2] << 8) | comp_readings[1];
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	3302      	adds	r3, #2
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	b21a      	sxth	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b21b      	sxth	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b21b      	sxth	r3, r3
 800620c:	b29a      	uxth	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	819a      	strh	r2, [r3, #12]
	values->Compensation_Vals.dig_T2 = ((uint16_t)comp_readings[4] << 8) | comp_readings[3];
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	3304      	adds	r3, #4
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	b21a      	sxth	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	3303      	adds	r3, #3
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	b21b      	sxth	r3, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	b21a      	sxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	81da      	strh	r2, [r3, #14]
	values->Compensation_Vals.dig_T3 = ((uint16_t)comp_readings[6] << 8) | comp_readings[5];
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	3306      	adds	r3, #6
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	b21a      	sxth	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	3305      	adds	r3, #5
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b21b      	sxth	r3, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	b21a      	sxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	821a      	strh	r2, [r3, #16]

}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <Read_Compensation_Values>:
/*
 * @Brief	Read compensation values from the device - addresses can be found in data sheet
 * @Note	These values are used for calculation of the data into readable values
 */
static void Read_Compensation_Values(BME_Values *values)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	uint8_t starting_address = 0x88;
 800625c:	2388      	movs	r3, #136	; 0x88
 800625e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t compensation_values[25];

	I2C_MasterTransmitIT(&BME_Sensor, &starting_address, 0x77, 1);
 8006262:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8006266:	2301      	movs	r3, #1
 8006268:	2277      	movs	r2, #119	; 0x77
 800626a:	480f      	ldr	r0, [pc, #60]	; (80062a8 <Read_Compensation_Values+0x54>)
 800626c:	f7fc f884 	bl	8002378 <I2C_MasterTransmitIT>
	while(BME_Sensor.I2C_Bus_Direction != I2C_Ready){}
 8006270:	bf00      	nop
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <Read_Compensation_Values+0x54>)
 8006274:	7f5b      	ldrb	r3, [r3, #29]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1fb      	bne.n	8006272 <Read_Compensation_Values+0x1e>
	I2C_MasterRecieveIT(&BME_Sensor, compensation_values, 0x77, 24);
 800627a:	f107 010c 	add.w	r1, r7, #12
 800627e:	2318      	movs	r3, #24
 8006280:	2277      	movs	r2, #119	; 0x77
 8006282:	4809      	ldr	r0, [pc, #36]	; (80062a8 <Read_Compensation_Values+0x54>)
 8006284:	f7fc f8bb 	bl	80023fe <I2C_MasterRecieveIT>
	while(BME_Sensor.I2C_Bus_Direction != I2C_Ready){}
 8006288:	bf00      	nop
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <Read_Compensation_Values+0x54>)
 800628c:	7f5b      	ldrb	r3, [r3, #29]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1fb      	bne.n	800628a <Read_Compensation_Values+0x36>

	Compensation_values_Derivation(values, compensation_values);
 8006292:	f107 030c 	add.w	r3, r7, #12
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ffa7 	bl	80061ec <Compensation_values_Derivation>

}
 800629e:	bf00      	nop
 80062a0:	3728      	adds	r7, #40	; 0x28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	200002a0 	.word	0x200002a0

080062ac <BME280_compenstae_temp>:

/*
 * @Brief	returns value of temperature in DegC
 */
static void BME280_compenstae_temp(BME_Values *values, BME280_S32_t adc_T)
{
 80062ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80062b0:	b088      	sub	sp, #32
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6039      	str	r1, [r7, #0]
	float var1, var2;
	uint16_t dig_T1;
	int16_t dig_T2, dig_T3;

	//Initializing values for dig_Tx for easy use
	dig_T1 = values->Compensation_Vals.dig_T1;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	899b      	ldrh	r3, [r3, #12]
 80062bc:	83fb      	strh	r3, [r7, #30]
	dig_T2 = values->Compensation_Vals.dig_T2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	89db      	ldrh	r3, [r3, #14]
 80062c2:	83bb      	strh	r3, [r7, #28]
	dig_T3 = values->Compensation_Vals.dig_T3;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8a1b      	ldrh	r3, [r3, #16]
 80062c8:	837b      	strh	r3, [r7, #26]

	var1 = (((float)adc_T)/16384.0 - ((float)dig_T1)/1024.0) * ((float)dig_T2);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062d4:	ee17 0a90 	vmov	r0, s15
 80062d8:	f7fa f94e 	bl	8000578 <__aeabi_f2d>
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	4b6d      	ldr	r3, [pc, #436]	; (8006498 <BME280_compenstae_temp+0x1ec>)
 80062e2:	f7fa facb 	bl	800087c <__aeabi_ddiv>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4614      	mov	r4, r2
 80062ec:	461d      	mov	r5, r3
 80062ee:	8bfb      	ldrh	r3, [r7, #30]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f8:	ee17 0a90 	vmov	r0, s15
 80062fc:	f7fa f93c 	bl	8000578 <__aeabi_f2d>
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	4b65      	ldr	r3, [pc, #404]	; (800649c <BME280_compenstae_temp+0x1f0>)
 8006306:	f7fa fab9 	bl	800087c <__aeabi_ddiv>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7f9 ffd1 	bl	80002b8 <__aeabi_dsub>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4614      	mov	r4, r2
 800631c:	461d      	mov	r5, r3
 800631e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800632a:	ee17 0a90 	vmov	r0, s15
 800632e:	f7fa f923 	bl	8000578 <__aeabi_f2d>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7fa f975 	bl	8000628 <__aeabi_dmul>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	4610      	mov	r0, r2
 8006344:	4619      	mov	r1, r3
 8006346:	f7fa fc47 	bl	8000bd8 <__aeabi_d2f>
 800634a:	4603      	mov	r3, r0
 800634c:	617b      	str	r3, [r7, #20]
    var2 = ((((float)adc_T)/131072.0 - ((float)dig_T1)/8192.0) * (((float)adc_T)/131072.0 - ((float)dig_T1)/8192.0)) * ((float)dig_T3);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006358:	ee17 0a90 	vmov	r0, s15
 800635c:	f7fa f90c 	bl	8000578 <__aeabi_f2d>
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8006368:	f7fa fa88 	bl	800087c <__aeabi_ddiv>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4614      	mov	r4, r2
 8006372:	461d      	mov	r5, r3
 8006374:	8bfb      	ldrh	r3, [r7, #30]
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637e:	ee17 0a90 	vmov	r0, s15
 8006382:	f7fa f8f9 	bl	8000578 <__aeabi_f2d>
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	4b45      	ldr	r3, [pc, #276]	; (80064a0 <BME280_compenstae_temp+0x1f4>)
 800638c:	f7fa fa76 	bl	800087c <__aeabi_ddiv>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7f9 ff8e 	bl	80002b8 <__aeabi_dsub>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4614      	mov	r4, r2
 80063a2:	461d      	mov	r5, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ae:	ee17 0a90 	vmov	r0, s15
 80063b2:	f7fa f8e1 	bl	8000578 <__aeabi_f2d>
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80063be:	f7fa fa5d 	bl	800087c <__aeabi_ddiv>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4690      	mov	r8, r2
 80063c8:	4699      	mov	r9, r3
 80063ca:	8bfb      	ldrh	r3, [r7, #30]
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d4:	ee17 0a90 	vmov	r0, s15
 80063d8:	f7fa f8ce 	bl	8000578 <__aeabi_f2d>
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	4b2f      	ldr	r3, [pc, #188]	; (80064a0 <BME280_compenstae_temp+0x1f4>)
 80063e2:	f7fa fa4b 	bl	800087c <__aeabi_ddiv>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4640      	mov	r0, r8
 80063ec:	4649      	mov	r1, r9
 80063ee:	f7f9 ff63 	bl	80002b8 <__aeabi_dsub>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7fa f915 	bl	8000628 <__aeabi_dmul>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4614      	mov	r4, r2
 8006404:	461d      	mov	r5, r3
 8006406:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006412:	ee17 0a90 	vmov	r0, s15
 8006416:	f7fa f8af 	bl	8000578 <__aeabi_f2d>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4620      	mov	r0, r4
 8006420:	4629      	mov	r1, r5
 8006422:	f7fa f901 	bl	8000628 <__aeabi_dmul>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4610      	mov	r0, r2
 800642c:	4619      	mov	r1, r3
 800642e:	f7fa fbd3 	bl	8000bd8 <__aeabi_d2f>
 8006432:	4603      	mov	r3, r0
 8006434:	613b      	str	r3, [r7, #16]
    t_fine = (BME280_S32_t)(var1 + var2);
 8006436:	ed97 7a05 	vldr	s14, [r7, #20]
 800643a:	edd7 7a04 	vldr	s15, [r7, #16]
 800643e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006446:	ee17 2a90 	vmov	r2, s15
 800644a:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <BME280_compenstae_temp+0x1f8>)
 800644c:	601a      	str	r2, [r3, #0]
    T = (var1 + var2)/5120.0;
 800644e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006452:	edd7 7a04 	vldr	s15, [r7, #16]
 8006456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800645a:	ee17 0a90 	vmov	r0, s15
 800645e:	f7fa f88b 	bl	8000578 <__aeabi_f2d>
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <BME280_compenstae_temp+0x1fc>)
 8006468:	f7fa fa08 	bl	800087c <__aeabi_ddiv>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	f7fa fb88 	bl	8000b88 <__aeabi_d2iz>
 8006478:	4603      	mov	r3, r0
 800647a:	60fb      	str	r3, [r7, #12]

    values->temperature = T;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	edc3 7a00 	vstr	s15, [r3]
}
 800648c:	bf00      	nop
 800648e:	3720      	adds	r7, #32
 8006490:	46bd      	mov	sp, r7
 8006492:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006496:	bf00      	nop
 8006498:	40d00000 	.word	0x40d00000
 800649c:	40900000 	.word	0x40900000
 80064a0:	40c00000 	.word	0x40c00000
 80064a4:	20004c54 	.word	0x20004c54
 80064a8:	40b40000 	.word	0x40b40000

080064ac <BME_Data_Calculation>:

void BME_Data_Calculation()
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08e      	sub	sp, #56	; 0x38
 80064b0:	af00      	add	r7, sp, #0
	uint8_t bme_new_data[9];
	BME_Values Raw_BME_Data;
	BME280_S32_t temperature;

	Read_Compensation_Values(&Raw_BME_Data);
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fecd 	bl	8006254 <Read_Compensation_Values>

	while(1)
	{
		comp_count++;
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <BME_Data_Calculation+0x5c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3301      	adds	r3, #1
 80064c0:	4a11      	ldr	r2, [pc, #68]	; (8006508 <BME_Data_Calculation+0x5c>)
 80064c2:	6013      	str	r3, [r2, #0]
		xQueueReceive(send_raw_i2c, &bme_new_data, _10ms);
 80064c4:	4b11      	ldr	r3, [pc, #68]	; (800650c <BME_Data_Calculation+0x60>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a11      	ldr	r2, [pc, #68]	; (8006510 <BME_Data_Calculation+0x64>)
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fd fb6b 	bl	8003bac <xQueueReceive>

		temperature = ((int32_t)bme_new_data[4] << 16) | ((int32_t)bme_new_data[5] << 8) | bme_new_data[6];
 80064d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064da:	041a      	lsls	r2, r3, #16
 80064dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80064e8:	4313      	orrs	r3, r2
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
		BME280_compenstae_temp(&Raw_BME_Data, temperature);
 80064ec:	1d3b      	adds	r3, r7, #4
 80064ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fedb 	bl	80062ac <BME280_compenstae_temp>

		xQueueSend(print_i2c_data, &Raw_BME_Data, 0);
 80064f6:	4b07      	ldr	r3, [pc, #28]	; (8006514 <BME_Data_Calculation+0x68>)
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	1d39      	adds	r1, r7, #4
 80064fc:	2300      	movs	r3, #0
 80064fe:	2200      	movs	r2, #0
 8006500:	f7fd f92e 	bl	8003760 <xQueueGenericSend>
		comp_count++;
 8006504:	e7d9      	b.n	80064ba <BME_Data_Calculation+0xe>
 8006506:	bf00      	nop
 8006508:	200002fc 	.word	0x200002fc
 800650c:	200002d0 	.word	0x200002d0
 8006510:	20000004 	.word	0x20000004
 8006514:	200002cc 	.word	0x200002cc

08006518 <CommandLineParser>:
/*
 * @Brief	Function used to compare the FIFO Buffer contents with pre-set messages.
 * @Note	This function will determine output based off CLI input
 */
static void CommandLineParser()
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
	if(strcmp(x_axis_, Command_Line_Buffer.buffer) == 0){
 800651c:	4915      	ldr	r1, [pc, #84]	; (8006574 <CommandLineParser+0x5c>)
 800651e:	4816      	ldr	r0, [pc, #88]	; (8006578 <CommandLineParser+0x60>)
 8006520:	f7f9 fe5e 	bl	80001e0 <strcmp>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <CommandLineParser+0x20>
		axis_to_display = x_axis;
 800652a:	4b14      	ldr	r3, [pc, #80]	; (800657c <CommandLineParser+0x64>)
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
		ClearBuffer(&Command_Line_Buffer);}
 8006530:	4810      	ldr	r0, [pc, #64]	; (8006574 <CommandLineParser+0x5c>)
 8006532:	f7fa fbb3 	bl	8000c9c <ClearBuffer>
		ClearBuffer(&Command_Line_Buffer);}

	else if(strcmp(z_axis_, Command_Line_Buffer.buffer) == 0){
		axis_to_display = z_axis;
		ClearBuffer(&Command_Line_Buffer);}
}
 8006536:	e01a      	b.n	800656e <CommandLineParser+0x56>
	else if(strcmp(y_axis_, Command_Line_Buffer.buffer) == 0){
 8006538:	490e      	ldr	r1, [pc, #56]	; (8006574 <CommandLineParser+0x5c>)
 800653a:	4811      	ldr	r0, [pc, #68]	; (8006580 <CommandLineParser+0x68>)
 800653c:	f7f9 fe50 	bl	80001e0 <strcmp>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <CommandLineParser+0x3c>
		axis_to_display = y_axis;
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <CommandLineParser+0x64>)
 8006548:	2202      	movs	r2, #2
 800654a:	701a      	strb	r2, [r3, #0]
		ClearBuffer(&Command_Line_Buffer);}
 800654c:	4809      	ldr	r0, [pc, #36]	; (8006574 <CommandLineParser+0x5c>)
 800654e:	f7fa fba5 	bl	8000c9c <ClearBuffer>
}
 8006552:	e00c      	b.n	800656e <CommandLineParser+0x56>
	else if(strcmp(z_axis_, Command_Line_Buffer.buffer) == 0){
 8006554:	4907      	ldr	r1, [pc, #28]	; (8006574 <CommandLineParser+0x5c>)
 8006556:	480b      	ldr	r0, [pc, #44]	; (8006584 <CommandLineParser+0x6c>)
 8006558:	f7f9 fe42 	bl	80001e0 <strcmp>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <CommandLineParser+0x56>
		axis_to_display = z_axis;
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <CommandLineParser+0x64>)
 8006564:	2203      	movs	r2, #3
 8006566:	701a      	strb	r2, [r3, #0]
		ClearBuffer(&Command_Line_Buffer);}
 8006568:	4802      	ldr	r0, [pc, #8]	; (8006574 <CommandLineParser+0x5c>)
 800656a:	f7fa fb97 	bl	8000c9c <ClearBuffer>
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20004c58 	.word	0x20004c58
 8006578:	080095c0 	.word	0x080095c0
 800657c:	20000300 	.word	0x20000300
 8006580:	080095c8 	.word	0x080095c8
 8006584:	080095d0 	.word	0x080095d0

08006588 <CommandLineRead>:

/*
 * @Brief This will be the function passed into the thread
 */
void CommandLineRead()
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
	while(1)
	{
		cli_interface++;
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <CommandLineRead+0x24>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a06      	ldr	r2, [pc, #24]	; (80065ac <CommandLineRead+0x24>)
 8006594:	6013      	str	r3, [r2, #0]
		xSemaphoreTake(read_uart, portMAX_DELAY);
 8006596:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <CommandLineRead+0x28>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f04f 31ff 	mov.w	r1, #4294967295
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fd fbe4 	bl	8003d6c <xQueueSemaphoreTake>

		CommandLineParser();
 80065a4:	f7ff ffb8 	bl	8006518 <CommandLineParser>
		cli_interface++;
 80065a8:	e7f0      	b.n	800658c <CommandLineRead+0x4>
 80065aa:	bf00      	nop
 80065ac:	200002f0 	.word	0x200002f0
 80065b0:	200002d4 	.word	0x200002d4

080065b4 <USART2_IRQHandler>:

/*
 * @Brief	Interrupt Service Routine for UART RXNE Flag
 */
void USART2_IRQHandler(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
	if((USART2->SR) && (UART_SR_RXNE_Mask))
 80065ba:	4b13      	ldr	r3, [pc, #76]	; (8006608 <USART2_IRQHandler+0x54>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01e      	beq.n	8006600 <USART2_IRQHandler+0x4c>
	{
		//Push value form UART RX Buffer into FIFIO Buffer
		if(Push(&Command_Line_Buffer, ReadByte(&UART2)))
 80065c2:	4812      	ldr	r0, [pc, #72]	; (800660c <USART2_IRQHandler+0x58>)
 80065c4:	f7fc fe1c 	bl	8003200 <ReadByte>
 80065c8:	4603      	mov	r3, r0
 80065ca:	4619      	mov	r1, r3
 80065cc:	4810      	ldr	r0, [pc, #64]	; (8006610 <USART2_IRQHandler+0x5c>)
 80065ce:	f7fa fb87 	bl	8000ce0 <Push>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d013      	beq.n	8006600 <USART2_IRQHandler+0x4c>
		{
			BaseType_t xHigherPriorityTaskWoken = pdTRUE;
 80065d8:	2301      	movs	r3, #1
 80065da:	607b      	str	r3, [r7, #4]

			//Give semaphore to enable main task to run
			xSemaphoreGiveFromISR(read_uart, &xHigherPriorityTaskWoken);
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <USART2_IRQHandler+0x60>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	1d3a      	adds	r2, r7, #4
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fd fa54 	bl	8003a92 <xQueueGiveFromISR>

			//Causes a context switch for the CPU
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <USART2_IRQHandler+0x4c>
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <USART2_IRQHandler+0x64>)
 80065f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	f3bf 8f6f 	isb	sy
		}
	}

}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40004400 	.word	0x40004400
 800660c:	2000028c 	.word	0x2000028c
 8006610:	20004c58 	.word	0x20004c58
 8006614:	200002d4 	.word	0x200002d4
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <InitFIRFilter>:

/*
 * @Brief	Used to initialize the FIR filter by setting default values to 0.
 */
static void InitFIRFilter(FIR_LowPass_Filter *filter)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	//Clear the FIFO buffers
	for(int index = 0; index <= FIR_FILTER_ORDER; index++)
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	e009      	b.n	800663e <InitFIRFilter+0x22>
	{
		filter->moving_avg_buffer[index] = 0.0f;
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	601a      	str	r2, [r3, #0]
	for(int index = 0; index <= FIR_FILTER_ORDER; index++)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b10      	cmp	r3, #16
 8006642:	ddf2      	ble.n	800662a <InitFIRFilter+0xe>
	}

	//Ensure the head of the FIFO is starting at index 0
	filter->input_front = 0;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	//Set the initial output to 0
	filter->output = 0.0f;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	649a      	str	r2, [r3, #72]	; 0x48

}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <FIRFilterComputation>:
 * @Note	This filter (unlike the IIR) was implemented linearly based off the convolution sum formula.
 *
 * @Note	This filter is based off a low pass FIR filter with a Hanning window applied.
 */
static void FIRFilterComputation(FIR_LowPass_Filter *filter, AccelerometerData *input)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
	uint8_t indexCounter;

	//Store the current input in the FIFO
	filter->moving_avg_buffer[filter->input_front] = input->value;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006670:	4618      	mov	r0, r3
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	0083      	lsls	r3, r0, #2
 800667a:	440b      	add	r3, r1
 800667c:	601a      	str	r2, [r3, #0]

	//Increment the head of the FIFO and ensure it wraps around forming a circular buffer
	filter->input_front = (filter->input_front + 1) % (FIR_FILTER_ORDER + 1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <FIRFilterComputation+0xb8>)
 8006688:	fb83 1302 	smull	r1, r3, r3, r2
 800668c:	10d9      	asrs	r1, r3, #3
 800668e:	17d3      	asrs	r3, r2, #31
 8006690:	1ac9      	subs	r1, r1, r3
 8006692:	460b      	mov	r3, r1
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	440b      	add	r3, r1
 8006698:	1ad1      	subs	r1, r2, r3
 800669a:	b2ca      	uxtb	r2, r1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	indexCounter = filter->input_front;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a8:	73fb      	strb	r3, [r7, #15]
	filter->output = 0.0f;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	649a      	str	r2, [r3, #72]	; 0x48

	//Convolution of input values and coefficients
	for(int i = 0; i <= FIR_FILTER_ORDER; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	e021      	b.n	80066fc <FIRFilterComputation+0x9c>
	{
		//Retrieve the input values from the FIFO Buffer
		if(indexCounter == 0)
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <FIRFilterComputation+0x64>
		{
			indexCounter = FIR_FILTER_ORDER;
 80066be:	2310      	movs	r3, #16
 80066c0:	73fb      	strb	r3, [r7, #15]
 80066c2:	e002      	b.n	80066ca <FIRFilterComputation+0x6a>
		}
		else
		{
			indexCounter--;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	73fb      	strb	r3, [r7, #15]
		}

		//Multiply value by the filter coefficient
		filter->output += (filter->moving_avg_buffer[indexCounter]) * (FIR_FILTER_COEFFICIENTS[i]);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	edd3 6a00 	vldr	s13, [r3]
 80066dc:	4a0f      	ldr	r2, [pc, #60]	; (800671c <FIRFilterComputation+0xbc>)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	edd3 7a00 	vldr	s15, [r3]
 80066e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	for(int i = 0; i <= FIR_FILTER_ORDER; i++)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	3301      	adds	r3, #1
 80066fa:	60bb      	str	r3, [r7, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b10      	cmp	r3, #16
 8006700:	ddda      	ble.n	80066b8 <FIRFilterComputation+0x58>
	}

	input->value = filter->output;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	605a      	str	r2, [r3, #4]
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	78787879 	.word	0x78787879
 800671c:	20000030 	.word	0x20000030

08006720 <DataProcessing>:

/*
 * @Brief	Function used to create data processing thread
 */
void DataProcessing()
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b0bc      	sub	sp, #240	; 0xf0
 8006724:	af00      	add	r7, sp, #0
	AccelerometerData rec_data;
	FIR_LowPass_Filter x_lowpass, y_lowpass, z_lowpass;

	InitFIRFilter(&x_lowpass);
 8006726:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff ff76 	bl	800661c <InitFIRFilter>
	InitFIRFilter(&y_lowpass);
 8006730:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff ff71 	bl	800661c <InitFIRFilter>
	InitFIRFilter(&z_lowpass);
 800673a:	1d3b      	adds	r3, r7, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ff6d 	bl	800661c <InitFIRFilter>

	while(1)
	{
		filterTask++;
 8006742:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <DataProcessing+0xa4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3301      	adds	r3, #1
 8006748:	4a1e      	ldr	r2, [pc, #120]	; (80067c4 <DataProcessing+0xa4>)
 800674a:	6013      	str	r3, [r2, #0]

		//xQueueReceive(adxl_data_queue, &rec_data, 0);			//Read accelerometer data from FreeRTOS queue
		xQueueReceive(adxl_data_queue, &rec_data, 0);
 800674c:	4b1e      	ldr	r3, [pc, #120]	; (80067c8 <DataProcessing+0xa8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8006754:	2200      	movs	r2, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f7fd fa28 	bl	8003bac <xQueueReceive>

		switch(rec_data.axis)
 800675c:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8006760:	2b03      	cmp	r3, #3
 8006762:	d825      	bhi.n	80067b0 <DataProcessing+0x90>
 8006764:	a201      	add	r2, pc, #4	; (adr r2, 800676c <DataProcessing+0x4c>)
 8006766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676a:	bf00      	nop
 800676c:	080067b1 	.word	0x080067b1
 8006770:	0800677d 	.word	0x0800677d
 8006774:	0800678f 	.word	0x0800678f
 8006778:	080067a1 	.word	0x080067a1
		{
			case x_axis:
				FIRFilterComputation(&x_lowpass, &rec_data);
 800677c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006780:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ff6a 	bl	8006660 <FIRFilterComputation>
				break;
 800678c:	e010      	b.n	80067b0 <DataProcessing+0x90>

			case y_axis:
				FIRFilterComputation(&y_lowpass, &rec_data);
 800678e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006792:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006796:	4611      	mov	r1, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff ff61 	bl	8006660 <FIRFilterComputation>
				break;
 800679e:	e007      	b.n	80067b0 <DataProcessing+0x90>

			case z_axis:
				FIRFilterComputation(&z_lowpass, &rec_data);
 80067a0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80067a4:	1d3b      	adds	r3, r7, #4
 80067a6:	4611      	mov	r1, r2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff ff59 	bl	8006660 <FIRFilterComputation>
				break;
 80067ae:	bf00      	nop

			case no_axis:
				break;
		}

		xQueueSend(filtered_data_queue, &rec_data, _10ms);
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <DataProcessing+0xac>)
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <DataProcessing+0xb0>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80067bc:	2300      	movs	r3, #0
 80067be:	f7fc ffcf 	bl	8003760 <xQueueGenericSend>
		filterTask++;
 80067c2:	e7be      	b.n	8006742 <DataProcessing+0x22>
 80067c4:	200002e8 	.word	0x200002e8
 80067c8:	200002c0 	.word	0x200002c0
 80067cc:	200002c4 	.word	0x200002c4
 80067d0:	20000004 	.word	0x20000004

080067d4 <SetDutyCycle>:
/*
 * @Brief	Adjust Duty cycle for LED display.
 * @Note	This will cause the LEDs to adjust brightness as each axis is changes
 */
static void SetDutyCycle(uint8_t channel, int value)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	71fb      	strb	r3, [r7, #7]
	//Use to ensure no negative values are used
	if(value < 0)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	da02      	bge.n	80067ec <SetDutyCycle+0x18>
	{
		value *= (-1);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	425b      	negs	r3, r3
 80067ea:	603b      	str	r3, [r7, #0]
	}

	//Set the duty cycle for each channel for TIM3
	switch(channel)
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d00e      	beq.n	8006810 <SetDutyCycle+0x3c>
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	dc10      	bgt.n	8006818 <SetDutyCycle+0x44>
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d002      	beq.n	8006800 <SetDutyCycle+0x2c>
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d004      	beq.n	8006808 <SetDutyCycle+0x34>

	case 4:
		TIM3->CCR4 = value;
		break;
	}
}
 80067fe:	e00b      	b.n	8006818 <SetDutyCycle+0x44>
		TIM3->CCR1 = value;
 8006800:	4a08      	ldr	r2, [pc, #32]	; (8006824 <SetDutyCycle+0x50>)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8006806:	e007      	b.n	8006818 <SetDutyCycle+0x44>
		TIM3->CCR2 = value;
 8006808:	4a06      	ldr	r2, [pc, #24]	; (8006824 <SetDutyCycle+0x50>)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800680e:	e003      	b.n	8006818 <SetDutyCycle+0x44>
		TIM3->CCR4 = value;
 8006810:	4a04      	ldr	r2, [pc, #16]	; (8006824 <SetDutyCycle+0x50>)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8006816:	bf00      	nop
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40000400 	.word	0x40000400

08006828 <DisplayData_PWM>:

void DisplayData_PWM(void *pvParameters)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	AccelerometerData rec_data;

	while(1)
	{
		xQueueReceive(print_data, &rec_data, 0);
 8006830:	4b1d      	ldr	r3, [pc, #116]	; (80068a8 <DisplayData_PWM+0x80>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	2200      	movs	r2, #0
 800683a:	4618      	mov	r0, r3
 800683c:	f7fd f9b6 	bl	8003bac <xQueueReceive>
		pwm_count++;
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <DisplayData_PWM+0x84>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	4a19      	ldr	r2, [pc, #100]	; (80068ac <DisplayData_PWM+0x84>)
 8006848:	6013      	str	r3, [r2, #0]

		switch(rec_data.axis)
 800684a:	7a3b      	ldrb	r3, [r7, #8]
 800684c:	2b03      	cmp	r3, #3
 800684e:	d8ef      	bhi.n	8006830 <DisplayData_PWM+0x8>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <DisplayData_PWM+0x30>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	08006831 	.word	0x08006831
 800685c:	08006869 	.word	0x08006869
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006891 	.word	0x08006891
		{
		case no_axis:
			break;

		case x_axis:
			SetDutyCycle(1, (int)rec_data.value);
 8006868:	edd7 7a03 	vldr	s15, [r7, #12]
 800686c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006870:	ee17 1a90 	vmov	r1, s15
 8006874:	2001      	movs	r0, #1
 8006876:	f7ff ffad 	bl	80067d4 <SetDutyCycle>
			break;
 800687a:	e014      	b.n	80068a6 <DisplayData_PWM+0x7e>

		case y_axis:
			SetDutyCycle(2, (int)rec_data.value);
 800687c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006884:	ee17 1a90 	vmov	r1, s15
 8006888:	2002      	movs	r0, #2
 800688a:	f7ff ffa3 	bl	80067d4 <SetDutyCycle>
			break;
 800688e:	e00a      	b.n	80068a6 <DisplayData_PWM+0x7e>

		case z_axis:
			SetDutyCycle(4, (int)rec_data.value);
 8006890:	edd7 7a03 	vldr	s15, [r7, #12]
 8006894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006898:	ee17 1a90 	vmov	r1, s15
 800689c:	2004      	movs	r0, #4
 800689e:	f7ff ff99 	bl	80067d4 <SetDutyCycle>
			break;
 80068a2:	bf00      	nop
 80068a4:	e7c4      	b.n	8006830 <DisplayData_PWM+0x8>
		xQueueReceive(print_data, &rec_data, 0);
 80068a6:	e7c3      	b.n	8006830 <DisplayData_PWM+0x8>
 80068a8:	200002c8 	.word	0x200002c8
 80068ac:	200002f4 	.word	0x200002f4

080068b0 <ReadData>:

/*
 * @Brief	Reading data from BME pressure, temperature and humidity Sensor via I2C
 */
void ReadData()
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
	bme_raw_array bme_data_rec;
	uint8_t init_bme[] = {0xF2, 0x01, 0xF4, 0x25, 0xF5, 0x80};
 80068b6:	4a20      	ldr	r2, [pc, #128]	; (8006938 <ReadData+0x88>)
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068be:	6018      	str	r0, [r3, #0]
 80068c0:	3304      	adds	r3, #4
 80068c2:	8019      	strh	r1, [r3, #0]
	uint8_t bme_force_measure[] = {0xF4, 0x25, 0xF7};
 80068c4:	4a1d      	ldr	r2, [pc, #116]	; (800693c <ReadData+0x8c>)
 80068c6:	463b      	mov	r3, r7
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	4611      	mov	r1, r2
 80068cc:	8019      	strh	r1, [r3, #0]
 80068ce:	3302      	adds	r3, #2
 80068d0:	0c12      	lsrs	r2, r2, #16
 80068d2:	701a      	strb	r2, [r3, #0]

	if(i2c_count == 0)
 80068d4:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <ReadData+0x90>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <ReadData+0x38>
	{
		I2C_MasterTransmitIT(&BME_Sensor, init_bme, slave_address, 8);
 80068dc:	2277      	movs	r2, #119	; 0x77
 80068de:	1d39      	adds	r1, r7, #4
 80068e0:	2308      	movs	r3, #8
 80068e2:	4818      	ldr	r0, [pc, #96]	; (8006944 <ReadData+0x94>)
 80068e4:	f7fb fd48 	bl	8002378 <I2C_MasterTransmitIT>
	}

	i2c_count++;
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <ReadData+0x90>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	4a14      	ldr	r2, [pc, #80]	; (8006940 <ReadData+0x90>)
 80068f0:	6013      	str	r3, [r2, #0]

	I2C_MasterTransmitIT(&BME_Sensor, bme_force_measure, slave_address, 3);
 80068f2:	2277      	movs	r2, #119	; 0x77
 80068f4:	4639      	mov	r1, r7
 80068f6:	2303      	movs	r3, #3
 80068f8:	4812      	ldr	r0, [pc, #72]	; (8006944 <ReadData+0x94>)
 80068fa:	f7fb fd3d 	bl	8002378 <I2C_MasterTransmitIT>
	while(BME_Sensor.I2C_Bus_Direction != I2C_Ready){}
 80068fe:	bf00      	nop
 8006900:	4b10      	ldr	r3, [pc, #64]	; (8006944 <ReadData+0x94>)
 8006902:	7f5b      	ldrb	r3, [r3, #29]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1fb      	bne.n	8006900 <ReadData+0x50>
	I2C_MasterRecieveIT(&BME_Sensor, bme_data_rec, slave_address, 8);
 8006908:	2277      	movs	r2, #119	; 0x77
 800690a:	f107 010c 	add.w	r1, r7, #12
 800690e:	2308      	movs	r3, #8
 8006910:	480c      	ldr	r0, [pc, #48]	; (8006944 <ReadData+0x94>)
 8006912:	f7fb fd74 	bl	80023fe <I2C_MasterRecieveIT>
	while(BME_Sensor.I2C_Bus_Direction != I2C_Ready){}
 8006916:	bf00      	nop
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <ReadData+0x94>)
 800691a:	7f5b      	ldrb	r3, [r3, #29]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1fb      	bne.n	8006918 <ReadData+0x68>

	xQueueSend(send_raw_i2c, &bme_data_rec, 0);
 8006920:	4b09      	ldr	r3, [pc, #36]	; (8006948 <ReadData+0x98>)
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	f107 010c 	add.w	r1, r7, #12
 8006928:	2300      	movs	r3, #0
 800692a:	2200      	movs	r2, #0
 800692c:	f7fc ff18 	bl	8003760 <xQueueGenericSend>

}
 8006930:	bf00      	nop
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	080095ac 	.word	0x080095ac
 800693c:	080095b4 	.word	0x080095b4
 8006940:	200002f8 	.word	0x200002f8
 8006944:	200002a0 	.word	0x200002a0
 8006948:	200002d0 	.word	0x200002d0

0800694c <I2C1_EV_IRQHandler>:

/*
 * @Brief Interrupt Service Routine for I2C
 */
void I2C1_EV_IRQHandler()
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	607b      	str	r3, [r7, #4]

	IRQ_Event_Handler(&BME_Sensor);
 8006956:	4809      	ldr	r0, [pc, #36]	; (800697c <I2C1_EV_IRQHandler+0x30>)
 8006958:	f7fb fd9f 	bl	800249a <IRQ_Event_Handler>

	//Causes a context switch for the CPU
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <I2C1_EV_IRQHandler+0x26>
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <I2C1_EV_IRQHandler+0x34>)
 8006964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	f3bf 8f6f 	isb	sy
}
 8006972:	bf00      	nop
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	200002a0 	.word	0x200002a0
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <InitADXL>:
/*
 * @Brief	Used to initialize ADXL registers: Set range to +-4g, allow continuous
 * reading of data registers and set transfer frequency at 100Hz.
 */
static void InitADXL()
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
	uint8_t adxl_set_data_format[2] = {0x31, 0x01};
 800698a:	f240 1331 	movw	r3, #305	; 0x131
 800698e:	81bb      	strh	r3, [r7, #12]
	uint8_t adxl_clear_powerctl_reg[2] = {0x2D, 0x00};
 8006990:	232d      	movs	r3, #45	; 0x2d
 8006992:	813b      	strh	r3, [r7, #8]
	uint8_t adxl_set_powerctl_reg[2] = {0x2D, 0x08};
 8006994:	f640 032d 	movw	r3, #2093	; 0x82d
 8006998:	80bb      	strh	r3, [r7, #4]
	uint8_t adxl_set_bw_rate_reg[2] = {0x2C, 0x0A};
 800699a:	f640 232c 	movw	r3, #2604	; 0xa2c
 800699e:	803b      	strh	r3, [r7, #0]

	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_clear_powerctl_reg, 2);
 80069a0:	f107 0208 	add.w	r2, r7, #8
 80069a4:	2302      	movs	r3, #2
 80069a6:	490d      	ldr	r1, [pc, #52]	; (80069dc <InitADXL+0x58>)
 80069a8:	480d      	ldr	r0, [pc, #52]	; (80069e0 <InitADXL+0x5c>)
 80069aa:	f7fc f98e 	bl	8002cca <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_data_format, 2);
 80069ae:	f107 020c 	add.w	r2, r7, #12
 80069b2:	2302      	movs	r3, #2
 80069b4:	4909      	ldr	r1, [pc, #36]	; (80069dc <InitADXL+0x58>)
 80069b6:	480a      	ldr	r0, [pc, #40]	; (80069e0 <InitADXL+0x5c>)
 80069b8:	f7fc f987 	bl	8002cca <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_bw_rate_reg, 2);
 80069bc:	463a      	mov	r2, r7
 80069be:	2302      	movs	r3, #2
 80069c0:	4906      	ldr	r1, [pc, #24]	; (80069dc <InitADXL+0x58>)
 80069c2:	4807      	ldr	r0, [pc, #28]	; (80069e0 <InitADXL+0x5c>)
 80069c4:	f7fc f981 	bl	8002cca <SPI_MultiSlave_TransmitIT>
	SPI_MultiSlave_TransmitIT(&SPI1_Example, &ADXL, adxl_set_powerctl_reg, 2);
 80069c8:	1d3a      	adds	r2, r7, #4
 80069ca:	2302      	movs	r3, #2
 80069cc:	4903      	ldr	r1, [pc, #12]	; (80069dc <InitADXL+0x58>)
 80069ce:	4804      	ldr	r0, [pc, #16]	; (80069e0 <InitADXL+0x5c>)
 80069d0:	f7fc f97b 	bl	8002cca <SPI_MultiSlave_TransmitIT>
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000280 	.word	0x20000280
 80069e0:	20000258 	.word	0x20000258

080069e4 <ReadADXLData>:

void ReadADXLData()
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	; 0x28
 80069e8:	af02      	add	r7, sp, #8
	AccelerometerData data;

	uint8_t adxl_address[1] = {0xF2};	//Address of data register to read from
 80069ea:	23f2      	movs	r3, #242	; 0xf2
 80069ec:	733b      	strb	r3, [r7, #12]
	uint8_t adxl_data_rec[7];			//Buffer to store the adxl data
	int16_t x, y, z;					//Variables that will store the data from the buffer

	InitADXL();
 80069ee:	f7ff ffc9 	bl	8006984 <InitADXL>

	while(1)
	{
		readingTask++;
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <ReadADXLData+0xc8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <ReadADXLData+0xc8>)
 80069fa:	6013      	str	r3, [r2, #0]

		//Reading data from the SPI
		SPI_MultiSlave_RecieveIT(&SPI1_Example, &ADXL, adxl_data_rec, 7, *adxl_address);
 80069fc:	7b3b      	ldrb	r3, [r7, #12]
 80069fe:	1d3a      	adds	r2, r7, #4
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	2307      	movs	r3, #7
 8006a04:	492a      	ldr	r1, [pc, #168]	; (8006ab0 <ReadADXLData+0xcc>)
 8006a06:	482b      	ldr	r0, [pc, #172]	; (8006ab4 <ReadADXLData+0xd0>)
 8006a08:	f7fc f989 	bl	8002d1e <SPI_MultiSlave_RecieveIT>

		/*
		* Convert the data into usable/readable values - this can be found in the ADXL345 documentation,
		* and send the stored values to a queue.
		*/
		x = ((adxl_data_rec[2] << 8) | adxl_data_rec[1]);
 8006a0c:	79bb      	ldrb	r3, [r7, #6]
 8006a0e:	021b      	lsls	r3, r3, #8
 8006a10:	b21a      	sxth	r2, r3
 8006a12:	797b      	ldrb	r3, [r7, #5]
 8006a14:	b21b      	sxth	r3, r3
 8006a16:	4313      	orrs	r3, r2
 8006a18:	83fb      	strh	r3, [r7, #30]
		data.axis = x_axis;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	743b      	strb	r3, [r7, #16]
		data.value = x;
 8006a1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a2a:	edc7 7a05 	vstr	s15, [r7, #20]
		xQueueSend(adxl_data_queue, &data, _5ms);
 8006a2e:	4b22      	ldr	r3, [pc, #136]	; (8006ab8 <ReadADXLData+0xd4>)
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	4b22      	ldr	r3, [pc, #136]	; (8006abc <ReadADXLData+0xd8>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	f107 0110 	add.w	r1, r7, #16
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f7fc fe90 	bl	8003760 <xQueueGenericSend>

		y = ((adxl_data_rec[4] << 8) | adxl_data_rec[3]);
 8006a40:	7a3b      	ldrb	r3, [r7, #8]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	b21a      	sxth	r2, r3
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	b21b      	sxth	r3, r3
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	83bb      	strh	r3, [r7, #28]
		data.axis = y_axis;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	743b      	strb	r3, [r7, #16]
		data.value = y;
 8006a52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a5e:	edc7 7a05 	vstr	s15, [r7, #20]
		xQueueSend(adxl_data_queue, &data, _5ms);
 8006a62:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <ReadADXLData+0xd4>)
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	4b15      	ldr	r3, [pc, #84]	; (8006abc <ReadADXLData+0xd8>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	f107 0110 	add.w	r1, r7, #16
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f7fc fe76 	bl	8003760 <xQueueGenericSend>

		z = ((adxl_data_rec[6] << 8) | adxl_data_rec[5]);
 8006a74:	7abb      	ldrb	r3, [r7, #10]
 8006a76:	021b      	lsls	r3, r3, #8
 8006a78:	b21a      	sxth	r2, r3
 8006a7a:	7a7b      	ldrb	r3, [r7, #9]
 8006a7c:	b21b      	sxth	r3, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	837b      	strh	r3, [r7, #26]
		data.axis = z_axis;
 8006a82:	2303      	movs	r3, #3
 8006a84:	743b      	strb	r3, [r7, #16]
		data.value = z;
 8006a86:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a92:	edc7 7a05 	vstr	s15, [r7, #20]
		xQueueSend(adxl_data_queue, &data, _5ms);
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <ReadADXLData+0xd4>)
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <ReadADXLData+0xd8>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	f107 0110 	add.w	r1, r7, #16
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fc fe5c 	bl	8003760 <xQueueGenericSend>
		readingTask++;
 8006aa8:	e7a3      	b.n	80069f2 <ReadADXLData+0xe>
 8006aaa:	bf00      	nop
 8006aac:	200002e4 	.word	0x200002e4
 8006ab0:	20000280 	.word	0x20000280
 8006ab4:	20000258 	.word	0x20000258
 8006ab8:	200002c0 	.word	0x200002c0
 8006abc:	20000000 	.word	0x20000000

08006ac0 <SPI1_IRQHandler>:
/*
 * @Brief	Interrupt Service Routine for the SPI Peripheral
 * @Note	Serviced by the SPI_IRQ_Handler function defined in the stm32f4xx_periphDrivers
 */
void SPI1_IRQHandler()
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	607b      	str	r3, [r7, #4]

	SPI_IRQ_Handler(&SPI1_Example);
 8006aca:	4809      	ldr	r0, [pc, #36]	; (8006af0 <SPI1_IRQHandler+0x30>)
 8006acc:	f7fc f95e 	bl	8002d8c <SPI_IRQ_Handler>

	//Causes a context switch for the CPU
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <SPI1_IRQHandler+0x26>
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <SPI1_IRQHandler+0x34>)
 8006ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000258 	.word	0x20000258
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <UART_GateKeeper>:
#include "UART_Gatekeeper.h"


void UART_GateKeeper(void *pvParameters)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	AccelerometerData filtered_data;
	BME_Values compensated_data;

	while(1)
	{
		gatekeeper++;
 8006b00:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <UART_GateKeeper+0x54>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3301      	adds	r3, #1
 8006b06:	4a11      	ldr	r2, [pc, #68]	; (8006b4c <UART_GateKeeper+0x54>)
 8006b08:	6013      	str	r3, [r2, #0]

		xQueueReceive(filtered_data_queue, &filtered_data, 0);
 8006b0a:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <UART_GateKeeper+0x58>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006b12:	2200      	movs	r2, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fd f849 	bl	8003bac <xQueueReceive>
		//xQueueReceive(print_i2c_data, &compensated_data, 0);

		if(filtered_data.axis == axis_to_display)
 8006b1a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <UART_GateKeeper+0x5c>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d108      	bne.n	8006b38 <UART_GateKeeper+0x40>
		{
			printf("%.2f\n\r", filtered_data.value);
 8006b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7f9 fd25 	bl	8000578 <__aeabi_f2d>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4809      	ldr	r0, [pc, #36]	; (8006b58 <UART_GateKeeper+0x60>)
 8006b34:	f000 fd3e 	bl	80075b4 <iprintf>
		}

		xQueueSend(print_data, &filtered_data, _10ms);
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <UART_GateKeeper+0x64>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	4b08      	ldr	r3, [pc, #32]	; (8006b60 <UART_GateKeeper+0x68>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006b44:	2300      	movs	r3, #0
 8006b46:	f7fc fe0b 	bl	8003760 <xQueueGenericSend>
		gatekeeper++;
 8006b4a:	e7d9      	b.n	8006b00 <UART_GateKeeper+0x8>
 8006b4c:	200002ec 	.word	0x200002ec
 8006b50:	200002c4 	.word	0x200002c4
 8006b54:	20000300 	.word	0x20000300
 8006b58:	080095b8 	.word	0x080095b8
 8006b5c:	200002c8 	.word	0x200002c8
 8006b60:	20000004 	.word	0x20000004

08006b64 <__cvt>:
 8006b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	ec55 4b10 	vmov	r4, r5, d0
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	460e      	mov	r6, r1
 8006b70:	4619      	mov	r1, r3
 8006b72:	462b      	mov	r3, r5
 8006b74:	bfbb      	ittet	lt
 8006b76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b7a:	461d      	movlt	r5, r3
 8006b7c:	2300      	movge	r3, #0
 8006b7e:	232d      	movlt	r3, #45	; 0x2d
 8006b80:	700b      	strb	r3, [r1, #0]
 8006b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b88:	4691      	mov	r9, r2
 8006b8a:	f023 0820 	bic.w	r8, r3, #32
 8006b8e:	bfbc      	itt	lt
 8006b90:	4622      	movlt	r2, r4
 8006b92:	4614      	movlt	r4, r2
 8006b94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b98:	d005      	beq.n	8006ba6 <__cvt+0x42>
 8006b9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b9e:	d100      	bne.n	8006ba2 <__cvt+0x3e>
 8006ba0:	3601      	adds	r6, #1
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	e000      	b.n	8006ba8 <__cvt+0x44>
 8006ba6:	2103      	movs	r1, #3
 8006ba8:	ab03      	add	r3, sp, #12
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	ab02      	add	r3, sp, #8
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	ec45 4b10 	vmov	d0, r4, r5
 8006bb4:	4653      	mov	r3, sl
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	f000 fe6a 	bl	8007890 <_dtoa_r>
 8006bbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	d102      	bne.n	8006bca <__cvt+0x66>
 8006bc4:	f019 0f01 	tst.w	r9, #1
 8006bc8:	d022      	beq.n	8006c10 <__cvt+0xac>
 8006bca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bce:	eb07 0906 	add.w	r9, r7, r6
 8006bd2:	d110      	bne.n	8006bf6 <__cvt+0x92>
 8006bd4:	783b      	ldrb	r3, [r7, #0]
 8006bd6:	2b30      	cmp	r3, #48	; 0x30
 8006bd8:	d10a      	bne.n	8006bf0 <__cvt+0x8c>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 ff89 	bl	8000af8 <__aeabi_dcmpeq>
 8006be6:	b918      	cbnz	r0, 8006bf0 <__cvt+0x8c>
 8006be8:	f1c6 0601 	rsb	r6, r6, #1
 8006bec:	f8ca 6000 	str.w	r6, [sl]
 8006bf0:	f8da 3000 	ldr.w	r3, [sl]
 8006bf4:	4499      	add	r9, r3
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7f9 ff7b 	bl	8000af8 <__aeabi_dcmpeq>
 8006c02:	b108      	cbz	r0, 8006c08 <__cvt+0xa4>
 8006c04:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c08:	2230      	movs	r2, #48	; 0x30
 8006c0a:	9b03      	ldr	r3, [sp, #12]
 8006c0c:	454b      	cmp	r3, r9
 8006c0e:	d307      	bcc.n	8006c20 <__cvt+0xbc>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c14:	1bdb      	subs	r3, r3, r7
 8006c16:	4638      	mov	r0, r7
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	b004      	add	sp, #16
 8006c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c20:	1c59      	adds	r1, r3, #1
 8006c22:	9103      	str	r1, [sp, #12]
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	e7f0      	b.n	8006c0a <__cvt+0xa6>

08006c28 <__exponent>:
 8006c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	bfb8      	it	lt
 8006c30:	4249      	neglt	r1, r1
 8006c32:	f803 2b02 	strb.w	r2, [r3], #2
 8006c36:	bfb4      	ite	lt
 8006c38:	222d      	movlt	r2, #45	; 0x2d
 8006c3a:	222b      	movge	r2, #43	; 0x2b
 8006c3c:	2909      	cmp	r1, #9
 8006c3e:	7042      	strb	r2, [r0, #1]
 8006c40:	dd2a      	ble.n	8006c98 <__exponent+0x70>
 8006c42:	f10d 0207 	add.w	r2, sp, #7
 8006c46:	4617      	mov	r7, r2
 8006c48:	260a      	movs	r6, #10
 8006c4a:	4694      	mov	ip, r2
 8006c4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c50:	fb06 1415 	mls	r4, r6, r5, r1
 8006c54:	3430      	adds	r4, #48	; 0x30
 8006c56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	2c63      	cmp	r4, #99	; 0x63
 8006c5e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c62:	4629      	mov	r1, r5
 8006c64:	dcf1      	bgt.n	8006c4a <__exponent+0x22>
 8006c66:	3130      	adds	r1, #48	; 0x30
 8006c68:	f1ac 0402 	sub.w	r4, ip, #2
 8006c6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c70:	1c41      	adds	r1, r0, #1
 8006c72:	4622      	mov	r2, r4
 8006c74:	42ba      	cmp	r2, r7
 8006c76:	d30a      	bcc.n	8006c8e <__exponent+0x66>
 8006c78:	f10d 0209 	add.w	r2, sp, #9
 8006c7c:	eba2 020c 	sub.w	r2, r2, ip
 8006c80:	42bc      	cmp	r4, r7
 8006c82:	bf88      	it	hi
 8006c84:	2200      	movhi	r2, #0
 8006c86:	4413      	add	r3, r2
 8006c88:	1a18      	subs	r0, r3, r0
 8006c8a:	b003      	add	sp, #12
 8006c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c96:	e7ed      	b.n	8006c74 <__exponent+0x4c>
 8006c98:	2330      	movs	r3, #48	; 0x30
 8006c9a:	3130      	adds	r1, #48	; 0x30
 8006c9c:	7083      	strb	r3, [r0, #2]
 8006c9e:	70c1      	strb	r1, [r0, #3]
 8006ca0:	1d03      	adds	r3, r0, #4
 8006ca2:	e7f1      	b.n	8006c88 <__exponent+0x60>

08006ca4 <_printf_float>:
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	ed2d 8b02 	vpush	{d8}
 8006cac:	b08d      	sub	sp, #52	; 0x34
 8006cae:	460c      	mov	r4, r1
 8006cb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	461f      	mov	r7, r3
 8006cb8:	4605      	mov	r5, r0
 8006cba:	f000 fcd9 	bl	8007670 <_localeconv_r>
 8006cbe:	f8d0 a000 	ldr.w	sl, [r0]
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	f7f9 faec 	bl	80002a0 <strlen>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	930a      	str	r3, [sp, #40]	; 0x28
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	9305      	str	r3, [sp, #20]
 8006cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006cd8:	3307      	adds	r3, #7
 8006cda:	f023 0307 	bic.w	r3, r3, #7
 8006cde:	f103 0208 	add.w	r2, r3, #8
 8006ce2:	f8c8 2000 	str.w	r2, [r8]
 8006ce6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cee:	9307      	str	r3, [sp, #28]
 8006cf0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cf4:	ee08 0a10 	vmov	s16, r0
 8006cf8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d00:	4b9e      	ldr	r3, [pc, #632]	; (8006f7c <_printf_float+0x2d8>)
 8006d02:	f04f 32ff 	mov.w	r2, #4294967295
 8006d06:	f7f9 ff29 	bl	8000b5c <__aeabi_dcmpun>
 8006d0a:	bb88      	cbnz	r0, 8006d70 <_printf_float+0xcc>
 8006d0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d10:	4b9a      	ldr	r3, [pc, #616]	; (8006f7c <_printf_float+0x2d8>)
 8006d12:	f04f 32ff 	mov.w	r2, #4294967295
 8006d16:	f7f9 ff03 	bl	8000b20 <__aeabi_dcmple>
 8006d1a:	bb48      	cbnz	r0, 8006d70 <_printf_float+0xcc>
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 fef2 	bl	8000b0c <__aeabi_dcmplt>
 8006d28:	b110      	cbz	r0, 8006d30 <_printf_float+0x8c>
 8006d2a:	232d      	movs	r3, #45	; 0x2d
 8006d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d30:	4a93      	ldr	r2, [pc, #588]	; (8006f80 <_printf_float+0x2dc>)
 8006d32:	4b94      	ldr	r3, [pc, #592]	; (8006f84 <_printf_float+0x2e0>)
 8006d34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d38:	bf94      	ite	ls
 8006d3a:	4690      	movls	r8, r2
 8006d3c:	4698      	movhi	r8, r3
 8006d3e:	2303      	movs	r3, #3
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	9b05      	ldr	r3, [sp, #20]
 8006d44:	f023 0304 	bic.w	r3, r3, #4
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	f04f 0900 	mov.w	r9, #0
 8006d4e:	9700      	str	r7, [sp, #0]
 8006d50:	4633      	mov	r3, r6
 8006d52:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d54:	4621      	mov	r1, r4
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 f9da 	bl	8007110 <_printf_common>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	f040 8090 	bne.w	8006e82 <_printf_float+0x1de>
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	b00d      	add	sp, #52	; 0x34
 8006d68:	ecbd 8b02 	vpop	{d8}
 8006d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	4649      	mov	r1, r9
 8006d78:	f7f9 fef0 	bl	8000b5c <__aeabi_dcmpun>
 8006d7c:	b140      	cbz	r0, 8006d90 <_printf_float+0xec>
 8006d7e:	464b      	mov	r3, r9
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bfbc      	itt	lt
 8006d84:	232d      	movlt	r3, #45	; 0x2d
 8006d86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d8a:	4a7f      	ldr	r2, [pc, #508]	; (8006f88 <_printf_float+0x2e4>)
 8006d8c:	4b7f      	ldr	r3, [pc, #508]	; (8006f8c <_printf_float+0x2e8>)
 8006d8e:	e7d1      	b.n	8006d34 <_printf_float+0x90>
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d96:	9206      	str	r2, [sp, #24]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	d13f      	bne.n	8006e1c <_printf_float+0x178>
 8006d9c:	2306      	movs	r3, #6
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	9b05      	ldr	r3, [sp, #20]
 8006da2:	6861      	ldr	r1, [r4, #4]
 8006da4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006da8:	2300      	movs	r3, #0
 8006daa:	9303      	str	r3, [sp, #12]
 8006dac:	ab0a      	add	r3, sp, #40	; 0x28
 8006dae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006db2:	ab09      	add	r3, sp, #36	; 0x24
 8006db4:	ec49 8b10 	vmov	d0, r8, r9
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	6022      	str	r2, [r4, #0]
 8006dbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f7ff fecf 	bl	8006b64 <__cvt>
 8006dc6:	9b06      	ldr	r3, [sp, #24]
 8006dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dca:	2b47      	cmp	r3, #71	; 0x47
 8006dcc:	4680      	mov	r8, r0
 8006dce:	d108      	bne.n	8006de2 <_printf_float+0x13e>
 8006dd0:	1cc8      	adds	r0, r1, #3
 8006dd2:	db02      	blt.n	8006dda <_printf_float+0x136>
 8006dd4:	6863      	ldr	r3, [r4, #4]
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	dd41      	ble.n	8006e5e <_printf_float+0x1ba>
 8006dda:	f1ab 0302 	sub.w	r3, fp, #2
 8006dde:	fa5f fb83 	uxtb.w	fp, r3
 8006de2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006de6:	d820      	bhi.n	8006e2a <_printf_float+0x186>
 8006de8:	3901      	subs	r1, #1
 8006dea:	465a      	mov	r2, fp
 8006dec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006df0:	9109      	str	r1, [sp, #36]	; 0x24
 8006df2:	f7ff ff19 	bl	8006c28 <__exponent>
 8006df6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006df8:	1813      	adds	r3, r2, r0
 8006dfa:	2a01      	cmp	r2, #1
 8006dfc:	4681      	mov	r9, r0
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	dc02      	bgt.n	8006e08 <_printf_float+0x164>
 8006e02:	6822      	ldr	r2, [r4, #0]
 8006e04:	07d2      	lsls	r2, r2, #31
 8006e06:	d501      	bpl.n	8006e0c <_printf_float+0x168>
 8006e08:	3301      	adds	r3, #1
 8006e0a:	6123      	str	r3, [r4, #16]
 8006e0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d09c      	beq.n	8006d4e <_printf_float+0xaa>
 8006e14:	232d      	movs	r3, #45	; 0x2d
 8006e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e1a:	e798      	b.n	8006d4e <_printf_float+0xaa>
 8006e1c:	9a06      	ldr	r2, [sp, #24]
 8006e1e:	2a47      	cmp	r2, #71	; 0x47
 8006e20:	d1be      	bne.n	8006da0 <_printf_float+0xfc>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1bc      	bne.n	8006da0 <_printf_float+0xfc>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e7b9      	b.n	8006d9e <_printf_float+0xfa>
 8006e2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e2e:	d118      	bne.n	8006e62 <_printf_float+0x1be>
 8006e30:	2900      	cmp	r1, #0
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	dd0b      	ble.n	8006e4e <_printf_float+0x1aa>
 8006e36:	6121      	str	r1, [r4, #16]
 8006e38:	b913      	cbnz	r3, 8006e40 <_printf_float+0x19c>
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	07d0      	lsls	r0, r2, #31
 8006e3e:	d502      	bpl.n	8006e46 <_printf_float+0x1a2>
 8006e40:	3301      	adds	r3, #1
 8006e42:	440b      	add	r3, r1
 8006e44:	6123      	str	r3, [r4, #16]
 8006e46:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e48:	f04f 0900 	mov.w	r9, #0
 8006e4c:	e7de      	b.n	8006e0c <_printf_float+0x168>
 8006e4e:	b913      	cbnz	r3, 8006e56 <_printf_float+0x1b2>
 8006e50:	6822      	ldr	r2, [r4, #0]
 8006e52:	07d2      	lsls	r2, r2, #31
 8006e54:	d501      	bpl.n	8006e5a <_printf_float+0x1b6>
 8006e56:	3302      	adds	r3, #2
 8006e58:	e7f4      	b.n	8006e44 <_printf_float+0x1a0>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e7f2      	b.n	8006e44 <_printf_float+0x1a0>
 8006e5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e64:	4299      	cmp	r1, r3
 8006e66:	db05      	blt.n	8006e74 <_printf_float+0x1d0>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	6121      	str	r1, [r4, #16]
 8006e6c:	07d8      	lsls	r0, r3, #31
 8006e6e:	d5ea      	bpl.n	8006e46 <_printf_float+0x1a2>
 8006e70:	1c4b      	adds	r3, r1, #1
 8006e72:	e7e7      	b.n	8006e44 <_printf_float+0x1a0>
 8006e74:	2900      	cmp	r1, #0
 8006e76:	bfd4      	ite	le
 8006e78:	f1c1 0202 	rsble	r2, r1, #2
 8006e7c:	2201      	movgt	r2, #1
 8006e7e:	4413      	add	r3, r2
 8006e80:	e7e0      	b.n	8006e44 <_printf_float+0x1a0>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	055a      	lsls	r2, r3, #21
 8006e86:	d407      	bmi.n	8006e98 <_printf_float+0x1f4>
 8006e88:	6923      	ldr	r3, [r4, #16]
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b8      	blx	r7
 8006e92:	3001      	adds	r0, #1
 8006e94:	d12c      	bne.n	8006ef0 <_printf_float+0x24c>
 8006e96:	e764      	b.n	8006d62 <_printf_float+0xbe>
 8006e98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e9c:	f240 80e0 	bls.w	8007060 <_printf_float+0x3bc>
 8006ea0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f7f9 fe26 	bl	8000af8 <__aeabi_dcmpeq>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d034      	beq.n	8006f1a <_printf_float+0x276>
 8006eb0:	4a37      	ldr	r2, [pc, #220]	; (8006f90 <_printf_float+0x2ec>)
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f43f af51 	beq.w	8006d62 <_printf_float+0xbe>
 8006ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	db02      	blt.n	8006ece <_printf_float+0x22a>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	07d8      	lsls	r0, r3, #31
 8006ecc:	d510      	bpl.n	8006ef0 <_printf_float+0x24c>
 8006ece:	ee18 3a10 	vmov	r3, s16
 8006ed2:	4652      	mov	r2, sl
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	f43f af41 	beq.w	8006d62 <_printf_float+0xbe>
 8006ee0:	f04f 0800 	mov.w	r8, #0
 8006ee4:	f104 091a 	add.w	r9, r4, #26
 8006ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eea:	3b01      	subs	r3, #1
 8006eec:	4543      	cmp	r3, r8
 8006eee:	dc09      	bgt.n	8006f04 <_printf_float+0x260>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	079b      	lsls	r3, r3, #30
 8006ef4:	f100 8107 	bmi.w	8007106 <_printf_float+0x462>
 8006ef8:	68e0      	ldr	r0, [r4, #12]
 8006efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006efc:	4298      	cmp	r0, r3
 8006efe:	bfb8      	it	lt
 8006f00:	4618      	movlt	r0, r3
 8006f02:	e730      	b.n	8006d66 <_printf_float+0xc2>
 8006f04:	2301      	movs	r3, #1
 8006f06:	464a      	mov	r2, r9
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	f43f af27 	beq.w	8006d62 <_printf_float+0xbe>
 8006f14:	f108 0801 	add.w	r8, r8, #1
 8006f18:	e7e6      	b.n	8006ee8 <_printf_float+0x244>
 8006f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dc39      	bgt.n	8006f94 <_printf_float+0x2f0>
 8006f20:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <_printf_float+0x2ec>)
 8006f22:	2301      	movs	r3, #1
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b8      	blx	r7
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	f43f af19 	beq.w	8006d62 <_printf_float+0xbe>
 8006f30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f34:	4313      	orrs	r3, r2
 8006f36:	d102      	bne.n	8006f3e <_printf_float+0x29a>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	07d9      	lsls	r1, r3, #31
 8006f3c:	d5d8      	bpl.n	8006ef0 <_printf_float+0x24c>
 8006f3e:	ee18 3a10 	vmov	r3, s16
 8006f42:	4652      	mov	r2, sl
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af09 	beq.w	8006d62 <_printf_float+0xbe>
 8006f50:	f04f 0900 	mov.w	r9, #0
 8006f54:	f104 0a1a 	add.w	sl, r4, #26
 8006f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5a:	425b      	negs	r3, r3
 8006f5c:	454b      	cmp	r3, r9
 8006f5e:	dc01      	bgt.n	8006f64 <_printf_float+0x2c0>
 8006f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f62:	e792      	b.n	8006e8a <_printf_float+0x1e6>
 8006f64:	2301      	movs	r3, #1
 8006f66:	4652      	mov	r2, sl
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	f43f aef7 	beq.w	8006d62 <_printf_float+0xbe>
 8006f74:	f109 0901 	add.w	r9, r9, #1
 8006f78:	e7ee      	b.n	8006f58 <_printf_float+0x2b4>
 8006f7a:	bf00      	nop
 8006f7c:	7fefffff 	.word	0x7fefffff
 8006f80:	080095d7 	.word	0x080095d7
 8006f84:	080095db 	.word	0x080095db
 8006f88:	080095df 	.word	0x080095df
 8006f8c:	080095e3 	.word	0x080095e3
 8006f90:	080095e7 	.word	0x080095e7
 8006f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	bfa8      	it	ge
 8006f9c:	461a      	movge	r2, r3
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	4691      	mov	r9, r2
 8006fa2:	dc37      	bgt.n	8007014 <_printf_float+0x370>
 8006fa4:	f04f 0b00 	mov.w	fp, #0
 8006fa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fac:	f104 021a 	add.w	r2, r4, #26
 8006fb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fb2:	9305      	str	r3, [sp, #20]
 8006fb4:	eba3 0309 	sub.w	r3, r3, r9
 8006fb8:	455b      	cmp	r3, fp
 8006fba:	dc33      	bgt.n	8007024 <_printf_float+0x380>
 8006fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	db3b      	blt.n	800703c <_printf_float+0x398>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	07da      	lsls	r2, r3, #31
 8006fc8:	d438      	bmi.n	800703c <_printf_float+0x398>
 8006fca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006fce:	eba2 0903 	sub.w	r9, r2, r3
 8006fd2:	9b05      	ldr	r3, [sp, #20]
 8006fd4:	1ad2      	subs	r2, r2, r3
 8006fd6:	4591      	cmp	r9, r2
 8006fd8:	bfa8      	it	ge
 8006fda:	4691      	movge	r9, r2
 8006fdc:	f1b9 0f00 	cmp.w	r9, #0
 8006fe0:	dc35      	bgt.n	800704e <_printf_float+0x3aa>
 8006fe2:	f04f 0800 	mov.w	r8, #0
 8006fe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fea:	f104 0a1a 	add.w	sl, r4, #26
 8006fee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	eba3 0309 	sub.w	r3, r3, r9
 8006ff8:	4543      	cmp	r3, r8
 8006ffa:	f77f af79 	ble.w	8006ef0 <_printf_float+0x24c>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4652      	mov	r2, sl
 8007002:	4631      	mov	r1, r6
 8007004:	4628      	mov	r0, r5
 8007006:	47b8      	blx	r7
 8007008:	3001      	adds	r0, #1
 800700a:	f43f aeaa 	beq.w	8006d62 <_printf_float+0xbe>
 800700e:	f108 0801 	add.w	r8, r8, #1
 8007012:	e7ec      	b.n	8006fee <_printf_float+0x34a>
 8007014:	4613      	mov	r3, r2
 8007016:	4631      	mov	r1, r6
 8007018:	4642      	mov	r2, r8
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	d1c0      	bne.n	8006fa4 <_printf_float+0x300>
 8007022:	e69e      	b.n	8006d62 <_printf_float+0xbe>
 8007024:	2301      	movs	r3, #1
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	9205      	str	r2, [sp, #20]
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	f43f ae97 	beq.w	8006d62 <_printf_float+0xbe>
 8007034:	9a05      	ldr	r2, [sp, #20]
 8007036:	f10b 0b01 	add.w	fp, fp, #1
 800703a:	e7b9      	b.n	8006fb0 <_printf_float+0x30c>
 800703c:	ee18 3a10 	vmov	r3, s16
 8007040:	4652      	mov	r2, sl
 8007042:	4631      	mov	r1, r6
 8007044:	4628      	mov	r0, r5
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	d1be      	bne.n	8006fca <_printf_float+0x326>
 800704c:	e689      	b.n	8006d62 <_printf_float+0xbe>
 800704e:	9a05      	ldr	r2, [sp, #20]
 8007050:	464b      	mov	r3, r9
 8007052:	4442      	add	r2, r8
 8007054:	4631      	mov	r1, r6
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	d1c1      	bne.n	8006fe2 <_printf_float+0x33e>
 800705e:	e680      	b.n	8006d62 <_printf_float+0xbe>
 8007060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007062:	2a01      	cmp	r2, #1
 8007064:	dc01      	bgt.n	800706a <_printf_float+0x3c6>
 8007066:	07db      	lsls	r3, r3, #31
 8007068:	d53a      	bpl.n	80070e0 <_printf_float+0x43c>
 800706a:	2301      	movs	r3, #1
 800706c:	4642      	mov	r2, r8
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	47b8      	blx	r7
 8007074:	3001      	adds	r0, #1
 8007076:	f43f ae74 	beq.w	8006d62 <_printf_float+0xbe>
 800707a:	ee18 3a10 	vmov	r3, s16
 800707e:	4652      	mov	r2, sl
 8007080:	4631      	mov	r1, r6
 8007082:	4628      	mov	r0, r5
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	f43f ae6b 	beq.w	8006d62 <_printf_float+0xbe>
 800708c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007090:	2200      	movs	r2, #0
 8007092:	2300      	movs	r3, #0
 8007094:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007098:	f7f9 fd2e 	bl	8000af8 <__aeabi_dcmpeq>
 800709c:	b9d8      	cbnz	r0, 80070d6 <_printf_float+0x432>
 800709e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80070a2:	f108 0201 	add.w	r2, r8, #1
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	d10e      	bne.n	80070ce <_printf_float+0x42a>
 80070b0:	e657      	b.n	8006d62 <_printf_float+0xbe>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4652      	mov	r2, sl
 80070b6:	4631      	mov	r1, r6
 80070b8:	4628      	mov	r0, r5
 80070ba:	47b8      	blx	r7
 80070bc:	3001      	adds	r0, #1
 80070be:	f43f ae50 	beq.w	8006d62 <_printf_float+0xbe>
 80070c2:	f108 0801 	add.w	r8, r8, #1
 80070c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c8:	3b01      	subs	r3, #1
 80070ca:	4543      	cmp	r3, r8
 80070cc:	dcf1      	bgt.n	80070b2 <_printf_float+0x40e>
 80070ce:	464b      	mov	r3, r9
 80070d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070d4:	e6da      	b.n	8006e8c <_printf_float+0x1e8>
 80070d6:	f04f 0800 	mov.w	r8, #0
 80070da:	f104 0a1a 	add.w	sl, r4, #26
 80070de:	e7f2      	b.n	80070c6 <_printf_float+0x422>
 80070e0:	2301      	movs	r3, #1
 80070e2:	4642      	mov	r2, r8
 80070e4:	e7df      	b.n	80070a6 <_printf_float+0x402>
 80070e6:	2301      	movs	r3, #1
 80070e8:	464a      	mov	r2, r9
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	f43f ae36 	beq.w	8006d62 <_printf_float+0xbe>
 80070f6:	f108 0801 	add.w	r8, r8, #1
 80070fa:	68e3      	ldr	r3, [r4, #12]
 80070fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070fe:	1a5b      	subs	r3, r3, r1
 8007100:	4543      	cmp	r3, r8
 8007102:	dcf0      	bgt.n	80070e6 <_printf_float+0x442>
 8007104:	e6f8      	b.n	8006ef8 <_printf_float+0x254>
 8007106:	f04f 0800 	mov.w	r8, #0
 800710a:	f104 0919 	add.w	r9, r4, #25
 800710e:	e7f4      	b.n	80070fa <_printf_float+0x456>

08007110 <_printf_common>:
 8007110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007114:	4616      	mov	r6, r2
 8007116:	4699      	mov	r9, r3
 8007118:	688a      	ldr	r2, [r1, #8]
 800711a:	690b      	ldr	r3, [r1, #16]
 800711c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007120:	4293      	cmp	r3, r2
 8007122:	bfb8      	it	lt
 8007124:	4613      	movlt	r3, r2
 8007126:	6033      	str	r3, [r6, #0]
 8007128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800712c:	4607      	mov	r7, r0
 800712e:	460c      	mov	r4, r1
 8007130:	b10a      	cbz	r2, 8007136 <_printf_common+0x26>
 8007132:	3301      	adds	r3, #1
 8007134:	6033      	str	r3, [r6, #0]
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	0699      	lsls	r1, r3, #26
 800713a:	bf42      	ittt	mi
 800713c:	6833      	ldrmi	r3, [r6, #0]
 800713e:	3302      	addmi	r3, #2
 8007140:	6033      	strmi	r3, [r6, #0]
 8007142:	6825      	ldr	r5, [r4, #0]
 8007144:	f015 0506 	ands.w	r5, r5, #6
 8007148:	d106      	bne.n	8007158 <_printf_common+0x48>
 800714a:	f104 0a19 	add.w	sl, r4, #25
 800714e:	68e3      	ldr	r3, [r4, #12]
 8007150:	6832      	ldr	r2, [r6, #0]
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	42ab      	cmp	r3, r5
 8007156:	dc26      	bgt.n	80071a6 <_printf_common+0x96>
 8007158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800715c:	1e13      	subs	r3, r2, #0
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	bf18      	it	ne
 8007162:	2301      	movne	r3, #1
 8007164:	0692      	lsls	r2, r2, #26
 8007166:	d42b      	bmi.n	80071c0 <_printf_common+0xb0>
 8007168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800716c:	4649      	mov	r1, r9
 800716e:	4638      	mov	r0, r7
 8007170:	47c0      	blx	r8
 8007172:	3001      	adds	r0, #1
 8007174:	d01e      	beq.n	80071b4 <_printf_common+0xa4>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	6922      	ldr	r2, [r4, #16]
 800717a:	f003 0306 	and.w	r3, r3, #6
 800717e:	2b04      	cmp	r3, #4
 8007180:	bf02      	ittt	eq
 8007182:	68e5      	ldreq	r5, [r4, #12]
 8007184:	6833      	ldreq	r3, [r6, #0]
 8007186:	1aed      	subeq	r5, r5, r3
 8007188:	68a3      	ldr	r3, [r4, #8]
 800718a:	bf0c      	ite	eq
 800718c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007190:	2500      	movne	r5, #0
 8007192:	4293      	cmp	r3, r2
 8007194:	bfc4      	itt	gt
 8007196:	1a9b      	subgt	r3, r3, r2
 8007198:	18ed      	addgt	r5, r5, r3
 800719a:	2600      	movs	r6, #0
 800719c:	341a      	adds	r4, #26
 800719e:	42b5      	cmp	r5, r6
 80071a0:	d11a      	bne.n	80071d8 <_printf_common+0xc8>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e008      	b.n	80071b8 <_printf_common+0xa8>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4652      	mov	r2, sl
 80071aa:	4649      	mov	r1, r9
 80071ac:	4638      	mov	r0, r7
 80071ae:	47c0      	blx	r8
 80071b0:	3001      	adds	r0, #1
 80071b2:	d103      	bne.n	80071bc <_printf_common+0xac>
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295
 80071b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071bc:	3501      	adds	r5, #1
 80071be:	e7c6      	b.n	800714e <_printf_common+0x3e>
 80071c0:	18e1      	adds	r1, r4, r3
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	2030      	movs	r0, #48	; 0x30
 80071c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ca:	4422      	add	r2, r4
 80071cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071d4:	3302      	adds	r3, #2
 80071d6:	e7c7      	b.n	8007168 <_printf_common+0x58>
 80071d8:	2301      	movs	r3, #1
 80071da:	4622      	mov	r2, r4
 80071dc:	4649      	mov	r1, r9
 80071de:	4638      	mov	r0, r7
 80071e0:	47c0      	blx	r8
 80071e2:	3001      	adds	r0, #1
 80071e4:	d0e6      	beq.n	80071b4 <_printf_common+0xa4>
 80071e6:	3601      	adds	r6, #1
 80071e8:	e7d9      	b.n	800719e <_printf_common+0x8e>
	...

080071ec <_printf_i>:
 80071ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f0:	7e0f      	ldrb	r7, [r1, #24]
 80071f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071f4:	2f78      	cmp	r7, #120	; 0x78
 80071f6:	4691      	mov	r9, r2
 80071f8:	4680      	mov	r8, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	469a      	mov	sl, r3
 80071fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007202:	d807      	bhi.n	8007214 <_printf_i+0x28>
 8007204:	2f62      	cmp	r7, #98	; 0x62
 8007206:	d80a      	bhi.n	800721e <_printf_i+0x32>
 8007208:	2f00      	cmp	r7, #0
 800720a:	f000 80d4 	beq.w	80073b6 <_printf_i+0x1ca>
 800720e:	2f58      	cmp	r7, #88	; 0x58
 8007210:	f000 80c0 	beq.w	8007394 <_printf_i+0x1a8>
 8007214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800721c:	e03a      	b.n	8007294 <_printf_i+0xa8>
 800721e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007222:	2b15      	cmp	r3, #21
 8007224:	d8f6      	bhi.n	8007214 <_printf_i+0x28>
 8007226:	a101      	add	r1, pc, #4	; (adr r1, 800722c <_printf_i+0x40>)
 8007228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800722c:	08007285 	.word	0x08007285
 8007230:	08007299 	.word	0x08007299
 8007234:	08007215 	.word	0x08007215
 8007238:	08007215 	.word	0x08007215
 800723c:	08007215 	.word	0x08007215
 8007240:	08007215 	.word	0x08007215
 8007244:	08007299 	.word	0x08007299
 8007248:	08007215 	.word	0x08007215
 800724c:	08007215 	.word	0x08007215
 8007250:	08007215 	.word	0x08007215
 8007254:	08007215 	.word	0x08007215
 8007258:	0800739d 	.word	0x0800739d
 800725c:	080072c5 	.word	0x080072c5
 8007260:	08007357 	.word	0x08007357
 8007264:	08007215 	.word	0x08007215
 8007268:	08007215 	.word	0x08007215
 800726c:	080073bf 	.word	0x080073bf
 8007270:	08007215 	.word	0x08007215
 8007274:	080072c5 	.word	0x080072c5
 8007278:	08007215 	.word	0x08007215
 800727c:	08007215 	.word	0x08007215
 8007280:	0800735f 	.word	0x0800735f
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	1d1a      	adds	r2, r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	602a      	str	r2, [r5, #0]
 800728c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007294:	2301      	movs	r3, #1
 8007296:	e09f      	b.n	80073d8 <_printf_i+0x1ec>
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	682b      	ldr	r3, [r5, #0]
 800729c:	0607      	lsls	r7, r0, #24
 800729e:	f103 0104 	add.w	r1, r3, #4
 80072a2:	6029      	str	r1, [r5, #0]
 80072a4:	d501      	bpl.n	80072aa <_printf_i+0xbe>
 80072a6:	681e      	ldr	r6, [r3, #0]
 80072a8:	e003      	b.n	80072b2 <_printf_i+0xc6>
 80072aa:	0646      	lsls	r6, r0, #25
 80072ac:	d5fb      	bpl.n	80072a6 <_printf_i+0xba>
 80072ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	da03      	bge.n	80072be <_printf_i+0xd2>
 80072b6:	232d      	movs	r3, #45	; 0x2d
 80072b8:	4276      	negs	r6, r6
 80072ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072be:	485a      	ldr	r0, [pc, #360]	; (8007428 <_printf_i+0x23c>)
 80072c0:	230a      	movs	r3, #10
 80072c2:	e012      	b.n	80072ea <_printf_i+0xfe>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	6820      	ldr	r0, [r4, #0]
 80072c8:	1d19      	adds	r1, r3, #4
 80072ca:	6029      	str	r1, [r5, #0]
 80072cc:	0605      	lsls	r5, r0, #24
 80072ce:	d501      	bpl.n	80072d4 <_printf_i+0xe8>
 80072d0:	681e      	ldr	r6, [r3, #0]
 80072d2:	e002      	b.n	80072da <_printf_i+0xee>
 80072d4:	0641      	lsls	r1, r0, #25
 80072d6:	d5fb      	bpl.n	80072d0 <_printf_i+0xe4>
 80072d8:	881e      	ldrh	r6, [r3, #0]
 80072da:	4853      	ldr	r0, [pc, #332]	; (8007428 <_printf_i+0x23c>)
 80072dc:	2f6f      	cmp	r7, #111	; 0x6f
 80072de:	bf0c      	ite	eq
 80072e0:	2308      	moveq	r3, #8
 80072e2:	230a      	movne	r3, #10
 80072e4:	2100      	movs	r1, #0
 80072e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ea:	6865      	ldr	r5, [r4, #4]
 80072ec:	60a5      	str	r5, [r4, #8]
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	bfa2      	ittt	ge
 80072f2:	6821      	ldrge	r1, [r4, #0]
 80072f4:	f021 0104 	bicge.w	r1, r1, #4
 80072f8:	6021      	strge	r1, [r4, #0]
 80072fa:	b90e      	cbnz	r6, 8007300 <_printf_i+0x114>
 80072fc:	2d00      	cmp	r5, #0
 80072fe:	d04b      	beq.n	8007398 <_printf_i+0x1ac>
 8007300:	4615      	mov	r5, r2
 8007302:	fbb6 f1f3 	udiv	r1, r6, r3
 8007306:	fb03 6711 	mls	r7, r3, r1, r6
 800730a:	5dc7      	ldrb	r7, [r0, r7]
 800730c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007310:	4637      	mov	r7, r6
 8007312:	42bb      	cmp	r3, r7
 8007314:	460e      	mov	r6, r1
 8007316:	d9f4      	bls.n	8007302 <_printf_i+0x116>
 8007318:	2b08      	cmp	r3, #8
 800731a:	d10b      	bne.n	8007334 <_printf_i+0x148>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	07de      	lsls	r6, r3, #31
 8007320:	d508      	bpl.n	8007334 <_printf_i+0x148>
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	6861      	ldr	r1, [r4, #4]
 8007326:	4299      	cmp	r1, r3
 8007328:	bfde      	ittt	le
 800732a:	2330      	movle	r3, #48	; 0x30
 800732c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007330:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007334:	1b52      	subs	r2, r2, r5
 8007336:	6122      	str	r2, [r4, #16]
 8007338:	f8cd a000 	str.w	sl, [sp]
 800733c:	464b      	mov	r3, r9
 800733e:	aa03      	add	r2, sp, #12
 8007340:	4621      	mov	r1, r4
 8007342:	4640      	mov	r0, r8
 8007344:	f7ff fee4 	bl	8007110 <_printf_common>
 8007348:	3001      	adds	r0, #1
 800734a:	d14a      	bne.n	80073e2 <_printf_i+0x1f6>
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	b004      	add	sp, #16
 8007352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f043 0320 	orr.w	r3, r3, #32
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	4833      	ldr	r0, [pc, #204]	; (800742c <_printf_i+0x240>)
 8007360:	2778      	movs	r7, #120	; 0x78
 8007362:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	6829      	ldr	r1, [r5, #0]
 800736a:	061f      	lsls	r7, r3, #24
 800736c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007370:	d402      	bmi.n	8007378 <_printf_i+0x18c>
 8007372:	065f      	lsls	r7, r3, #25
 8007374:	bf48      	it	mi
 8007376:	b2b6      	uxthmi	r6, r6
 8007378:	07df      	lsls	r7, r3, #31
 800737a:	bf48      	it	mi
 800737c:	f043 0320 	orrmi.w	r3, r3, #32
 8007380:	6029      	str	r1, [r5, #0]
 8007382:	bf48      	it	mi
 8007384:	6023      	strmi	r3, [r4, #0]
 8007386:	b91e      	cbnz	r6, 8007390 <_printf_i+0x1a4>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	f023 0320 	bic.w	r3, r3, #32
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	2310      	movs	r3, #16
 8007392:	e7a7      	b.n	80072e4 <_printf_i+0xf8>
 8007394:	4824      	ldr	r0, [pc, #144]	; (8007428 <_printf_i+0x23c>)
 8007396:	e7e4      	b.n	8007362 <_printf_i+0x176>
 8007398:	4615      	mov	r5, r2
 800739a:	e7bd      	b.n	8007318 <_printf_i+0x12c>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	6826      	ldr	r6, [r4, #0]
 80073a0:	6961      	ldr	r1, [r4, #20]
 80073a2:	1d18      	adds	r0, r3, #4
 80073a4:	6028      	str	r0, [r5, #0]
 80073a6:	0635      	lsls	r5, r6, #24
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0x1c4>
 80073ac:	6019      	str	r1, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0x1ca>
 80073b0:	0670      	lsls	r0, r6, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0x1c0>
 80073b4:	8019      	strh	r1, [r3, #0]
 80073b6:	2300      	movs	r3, #0
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	4615      	mov	r5, r2
 80073bc:	e7bc      	b.n	8007338 <_printf_i+0x14c>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	681d      	ldr	r5, [r3, #0]
 80073c6:	6862      	ldr	r2, [r4, #4]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7f8 ff18 	bl	8000200 <memchr>
 80073d0:	b108      	cbz	r0, 80073d6 <_printf_i+0x1ea>
 80073d2:	1b40      	subs	r0, r0, r5
 80073d4:	6060      	str	r0, [r4, #4]
 80073d6:	6863      	ldr	r3, [r4, #4]
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	2300      	movs	r3, #0
 80073dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e0:	e7aa      	b.n	8007338 <_printf_i+0x14c>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	462a      	mov	r2, r5
 80073e6:	4649      	mov	r1, r9
 80073e8:	4640      	mov	r0, r8
 80073ea:	47d0      	blx	sl
 80073ec:	3001      	adds	r0, #1
 80073ee:	d0ad      	beq.n	800734c <_printf_i+0x160>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	079b      	lsls	r3, r3, #30
 80073f4:	d413      	bmi.n	800741e <_printf_i+0x232>
 80073f6:	68e0      	ldr	r0, [r4, #12]
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	4298      	cmp	r0, r3
 80073fc:	bfb8      	it	lt
 80073fe:	4618      	movlt	r0, r3
 8007400:	e7a6      	b.n	8007350 <_printf_i+0x164>
 8007402:	2301      	movs	r3, #1
 8007404:	4632      	mov	r2, r6
 8007406:	4649      	mov	r1, r9
 8007408:	4640      	mov	r0, r8
 800740a:	47d0      	blx	sl
 800740c:	3001      	adds	r0, #1
 800740e:	d09d      	beq.n	800734c <_printf_i+0x160>
 8007410:	3501      	adds	r5, #1
 8007412:	68e3      	ldr	r3, [r4, #12]
 8007414:	9903      	ldr	r1, [sp, #12]
 8007416:	1a5b      	subs	r3, r3, r1
 8007418:	42ab      	cmp	r3, r5
 800741a:	dcf2      	bgt.n	8007402 <_printf_i+0x216>
 800741c:	e7eb      	b.n	80073f6 <_printf_i+0x20a>
 800741e:	2500      	movs	r5, #0
 8007420:	f104 0619 	add.w	r6, r4, #25
 8007424:	e7f5      	b.n	8007412 <_printf_i+0x226>
 8007426:	bf00      	nop
 8007428:	080095e9 	.word	0x080095e9
 800742c:	080095fa 	.word	0x080095fa

08007430 <std>:
 8007430:	2300      	movs	r3, #0
 8007432:	b510      	push	{r4, lr}
 8007434:	4604      	mov	r4, r0
 8007436:	e9c0 3300 	strd	r3, r3, [r0]
 800743a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800743e:	6083      	str	r3, [r0, #8]
 8007440:	8181      	strh	r1, [r0, #12]
 8007442:	6643      	str	r3, [r0, #100]	; 0x64
 8007444:	81c2      	strh	r2, [r0, #14]
 8007446:	6183      	str	r3, [r0, #24]
 8007448:	4619      	mov	r1, r3
 800744a:	2208      	movs	r2, #8
 800744c:	305c      	adds	r0, #92	; 0x5c
 800744e:	f000 f906 	bl	800765e <memset>
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <std+0x58>)
 8007454:	6263      	str	r3, [r4, #36]	; 0x24
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <std+0x5c>)
 8007458:	62a3      	str	r3, [r4, #40]	; 0x28
 800745a:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <std+0x60>)
 800745c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800745e:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <std+0x64>)
 8007460:	6323      	str	r3, [r4, #48]	; 0x30
 8007462:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <std+0x68>)
 8007464:	6224      	str	r4, [r4, #32]
 8007466:	429c      	cmp	r4, r3
 8007468:	d006      	beq.n	8007478 <std+0x48>
 800746a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800746e:	4294      	cmp	r4, r2
 8007470:	d002      	beq.n	8007478 <std+0x48>
 8007472:	33d0      	adds	r3, #208	; 0xd0
 8007474:	429c      	cmp	r4, r3
 8007476:	d105      	bne.n	8007484 <std+0x54>
 8007478:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800747c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007480:	f000 b96a 	b.w	8007758 <__retarget_lock_init_recursive>
 8007484:	bd10      	pop	{r4, pc}
 8007486:	bf00      	nop
 8007488:	080075d9 	.word	0x080075d9
 800748c:	080075fb 	.word	0x080075fb
 8007490:	08007633 	.word	0x08007633
 8007494:	08007657 	.word	0x08007657
 8007498:	20004c70 	.word	0x20004c70

0800749c <stdio_exit_handler>:
 800749c:	4a02      	ldr	r2, [pc, #8]	; (80074a8 <stdio_exit_handler+0xc>)
 800749e:	4903      	ldr	r1, [pc, #12]	; (80074ac <stdio_exit_handler+0x10>)
 80074a0:	4803      	ldr	r0, [pc, #12]	; (80074b0 <stdio_exit_handler+0x14>)
 80074a2:	f000 b869 	b.w	8007578 <_fwalk_sglue>
 80074a6:	bf00      	nop
 80074a8:	20000074 	.word	0x20000074
 80074ac:	08009101 	.word	0x08009101
 80074b0:	20000080 	.word	0x20000080

080074b4 <cleanup_stdio>:
 80074b4:	6841      	ldr	r1, [r0, #4]
 80074b6:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <cleanup_stdio+0x34>)
 80074b8:	4299      	cmp	r1, r3
 80074ba:	b510      	push	{r4, lr}
 80074bc:	4604      	mov	r4, r0
 80074be:	d001      	beq.n	80074c4 <cleanup_stdio+0x10>
 80074c0:	f001 fe1e 	bl	8009100 <_fflush_r>
 80074c4:	68a1      	ldr	r1, [r4, #8]
 80074c6:	4b09      	ldr	r3, [pc, #36]	; (80074ec <cleanup_stdio+0x38>)
 80074c8:	4299      	cmp	r1, r3
 80074ca:	d002      	beq.n	80074d2 <cleanup_stdio+0x1e>
 80074cc:	4620      	mov	r0, r4
 80074ce:	f001 fe17 	bl	8009100 <_fflush_r>
 80074d2:	68e1      	ldr	r1, [r4, #12]
 80074d4:	4b06      	ldr	r3, [pc, #24]	; (80074f0 <cleanup_stdio+0x3c>)
 80074d6:	4299      	cmp	r1, r3
 80074d8:	d004      	beq.n	80074e4 <cleanup_stdio+0x30>
 80074da:	4620      	mov	r0, r4
 80074dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e0:	f001 be0e 	b.w	8009100 <_fflush_r>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	bf00      	nop
 80074e8:	20004c70 	.word	0x20004c70
 80074ec:	20004cd8 	.word	0x20004cd8
 80074f0:	20004d40 	.word	0x20004d40

080074f4 <global_stdio_init.part.0>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <global_stdio_init.part.0+0x30>)
 80074f8:	4c0b      	ldr	r4, [pc, #44]	; (8007528 <global_stdio_init.part.0+0x34>)
 80074fa:	4a0c      	ldr	r2, [pc, #48]	; (800752c <global_stdio_init.part.0+0x38>)
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	4620      	mov	r0, r4
 8007500:	2200      	movs	r2, #0
 8007502:	2104      	movs	r1, #4
 8007504:	f7ff ff94 	bl	8007430 <std>
 8007508:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800750c:	2201      	movs	r2, #1
 800750e:	2109      	movs	r1, #9
 8007510:	f7ff ff8e 	bl	8007430 <std>
 8007514:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007518:	2202      	movs	r2, #2
 800751a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751e:	2112      	movs	r1, #18
 8007520:	f7ff bf86 	b.w	8007430 <std>
 8007524:	20004da8 	.word	0x20004da8
 8007528:	20004c70 	.word	0x20004c70
 800752c:	0800749d 	.word	0x0800749d

08007530 <__sfp_lock_acquire>:
 8007530:	4801      	ldr	r0, [pc, #4]	; (8007538 <__sfp_lock_acquire+0x8>)
 8007532:	f000 b912 	b.w	800775a <__retarget_lock_acquire_recursive>
 8007536:	bf00      	nop
 8007538:	20004db1 	.word	0x20004db1

0800753c <__sfp_lock_release>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__sfp_lock_release+0x8>)
 800753e:	f000 b90d 	b.w	800775c <__retarget_lock_release_recursive>
 8007542:	bf00      	nop
 8007544:	20004db1 	.word	0x20004db1

08007548 <__sinit>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	f7ff fff0 	bl	8007530 <__sfp_lock_acquire>
 8007550:	6a23      	ldr	r3, [r4, #32]
 8007552:	b11b      	cbz	r3, 800755c <__sinit+0x14>
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f7ff bff0 	b.w	800753c <__sfp_lock_release>
 800755c:	4b04      	ldr	r3, [pc, #16]	; (8007570 <__sinit+0x28>)
 800755e:	6223      	str	r3, [r4, #32]
 8007560:	4b04      	ldr	r3, [pc, #16]	; (8007574 <__sinit+0x2c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1f5      	bne.n	8007554 <__sinit+0xc>
 8007568:	f7ff ffc4 	bl	80074f4 <global_stdio_init.part.0>
 800756c:	e7f2      	b.n	8007554 <__sinit+0xc>
 800756e:	bf00      	nop
 8007570:	080074b5 	.word	0x080074b5
 8007574:	20004da8 	.word	0x20004da8

08007578 <_fwalk_sglue>:
 8007578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800757c:	4607      	mov	r7, r0
 800757e:	4688      	mov	r8, r1
 8007580:	4614      	mov	r4, r2
 8007582:	2600      	movs	r6, #0
 8007584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007588:	f1b9 0901 	subs.w	r9, r9, #1
 800758c:	d505      	bpl.n	800759a <_fwalk_sglue+0x22>
 800758e:	6824      	ldr	r4, [r4, #0]
 8007590:	2c00      	cmp	r4, #0
 8007592:	d1f7      	bne.n	8007584 <_fwalk_sglue+0xc>
 8007594:	4630      	mov	r0, r6
 8007596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800759a:	89ab      	ldrh	r3, [r5, #12]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d907      	bls.n	80075b0 <_fwalk_sglue+0x38>
 80075a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075a4:	3301      	adds	r3, #1
 80075a6:	d003      	beq.n	80075b0 <_fwalk_sglue+0x38>
 80075a8:	4629      	mov	r1, r5
 80075aa:	4638      	mov	r0, r7
 80075ac:	47c0      	blx	r8
 80075ae:	4306      	orrs	r6, r0
 80075b0:	3568      	adds	r5, #104	; 0x68
 80075b2:	e7e9      	b.n	8007588 <_fwalk_sglue+0x10>

080075b4 <iprintf>:
 80075b4:	b40f      	push	{r0, r1, r2, r3}
 80075b6:	b507      	push	{r0, r1, r2, lr}
 80075b8:	4906      	ldr	r1, [pc, #24]	; (80075d4 <iprintf+0x20>)
 80075ba:	ab04      	add	r3, sp, #16
 80075bc:	6808      	ldr	r0, [r1, #0]
 80075be:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c2:	6881      	ldr	r1, [r0, #8]
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	f001 fbfb 	bl	8008dc0 <_vfiprintf_r>
 80075ca:	b003      	add	sp, #12
 80075cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075d0:	b004      	add	sp, #16
 80075d2:	4770      	bx	lr
 80075d4:	200000cc 	.word	0x200000cc

080075d8 <__sread>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	460c      	mov	r4, r1
 80075dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e0:	f000 f86c 	bl	80076bc <_read_r>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	bfab      	itete	ge
 80075e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075ea:	89a3      	ldrhlt	r3, [r4, #12]
 80075ec:	181b      	addge	r3, r3, r0
 80075ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075f2:	bfac      	ite	ge
 80075f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075f6:	81a3      	strhlt	r3, [r4, #12]
 80075f8:	bd10      	pop	{r4, pc}

080075fa <__swrite>:
 80075fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fe:	461f      	mov	r7, r3
 8007600:	898b      	ldrh	r3, [r1, #12]
 8007602:	05db      	lsls	r3, r3, #23
 8007604:	4605      	mov	r5, r0
 8007606:	460c      	mov	r4, r1
 8007608:	4616      	mov	r6, r2
 800760a:	d505      	bpl.n	8007618 <__swrite+0x1e>
 800760c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007610:	2302      	movs	r3, #2
 8007612:	2200      	movs	r2, #0
 8007614:	f000 f840 	bl	8007698 <_lseek_r>
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800761e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007622:	81a3      	strh	r3, [r4, #12]
 8007624:	4632      	mov	r2, r6
 8007626:	463b      	mov	r3, r7
 8007628:	4628      	mov	r0, r5
 800762a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800762e:	f000 b857 	b.w	80076e0 <_write_r>

08007632 <__sseek>:
 8007632:	b510      	push	{r4, lr}
 8007634:	460c      	mov	r4, r1
 8007636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763a:	f000 f82d 	bl	8007698 <_lseek_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	bf15      	itete	ne
 8007644:	6560      	strne	r0, [r4, #84]	; 0x54
 8007646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800764a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800764e:	81a3      	strheq	r3, [r4, #12]
 8007650:	bf18      	it	ne
 8007652:	81a3      	strhne	r3, [r4, #12]
 8007654:	bd10      	pop	{r4, pc}

08007656 <__sclose>:
 8007656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765a:	f000 b80d 	b.w	8007678 <_close_r>

0800765e <memset>:
 800765e:	4402      	add	r2, r0
 8007660:	4603      	mov	r3, r0
 8007662:	4293      	cmp	r3, r2
 8007664:	d100      	bne.n	8007668 <memset+0xa>
 8007666:	4770      	bx	lr
 8007668:	f803 1b01 	strb.w	r1, [r3], #1
 800766c:	e7f9      	b.n	8007662 <memset+0x4>
	...

08007670 <_localeconv_r>:
 8007670:	4800      	ldr	r0, [pc, #0]	; (8007674 <_localeconv_r+0x4>)
 8007672:	4770      	bx	lr
 8007674:	200001c0 	.word	0x200001c0

08007678 <_close_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d06      	ldr	r5, [pc, #24]	; (8007694 <_close_r+0x1c>)
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	602b      	str	r3, [r5, #0]
 8007684:	f7f9 fdfb 	bl	800127e <_close>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_close_r+0x1a>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_close_r+0x1a>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	20004dac 	.word	0x20004dac

08007698 <_lseek_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d07      	ldr	r5, [pc, #28]	; (80076b8 <_lseek_r+0x20>)
 800769c:	4604      	mov	r4, r0
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	2200      	movs	r2, #0
 80076a4:	602a      	str	r2, [r5, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f7f9 fe10 	bl	80012cc <_lseek>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_lseek_r+0x1e>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_lseek_r+0x1e>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20004dac 	.word	0x20004dac

080076bc <_read_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4d07      	ldr	r5, [pc, #28]	; (80076dc <_read_r+0x20>)
 80076c0:	4604      	mov	r4, r0
 80076c2:	4608      	mov	r0, r1
 80076c4:	4611      	mov	r1, r2
 80076c6:	2200      	movs	r2, #0
 80076c8:	602a      	str	r2, [r5, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f7f9 fd9e 	bl	800120c <_read>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d102      	bne.n	80076da <_read_r+0x1e>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	b103      	cbz	r3, 80076da <_read_r+0x1e>
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	20004dac 	.word	0x20004dac

080076e0 <_write_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d07      	ldr	r5, [pc, #28]	; (8007700 <_write_r+0x20>)
 80076e4:	4604      	mov	r4, r0
 80076e6:	4608      	mov	r0, r1
 80076e8:	4611      	mov	r1, r2
 80076ea:	2200      	movs	r2, #0
 80076ec:	602a      	str	r2, [r5, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	f7f9 fda9 	bl	8001246 <_write>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	d102      	bne.n	80076fe <_write_r+0x1e>
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	b103      	cbz	r3, 80076fe <_write_r+0x1e>
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	20004dac 	.word	0x20004dac

08007704 <__errno>:
 8007704:	4b01      	ldr	r3, [pc, #4]	; (800770c <__errno+0x8>)
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	200000cc 	.word	0x200000cc

08007710 <__libc_init_array>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	4d0d      	ldr	r5, [pc, #52]	; (8007748 <__libc_init_array+0x38>)
 8007714:	4c0d      	ldr	r4, [pc, #52]	; (800774c <__libc_init_array+0x3c>)
 8007716:	1b64      	subs	r4, r4, r5
 8007718:	10a4      	asrs	r4, r4, #2
 800771a:	2600      	movs	r6, #0
 800771c:	42a6      	cmp	r6, r4
 800771e:	d109      	bne.n	8007734 <__libc_init_array+0x24>
 8007720:	4d0b      	ldr	r5, [pc, #44]	; (8007750 <__libc_init_array+0x40>)
 8007722:	4c0c      	ldr	r4, [pc, #48]	; (8007754 <__libc_init_array+0x44>)
 8007724:	f001 fef0 	bl	8009508 <_init>
 8007728:	1b64      	subs	r4, r4, r5
 800772a:	10a4      	asrs	r4, r4, #2
 800772c:	2600      	movs	r6, #0
 800772e:	42a6      	cmp	r6, r4
 8007730:	d105      	bne.n	800773e <__libc_init_array+0x2e>
 8007732:	bd70      	pop	{r4, r5, r6, pc}
 8007734:	f855 3b04 	ldr.w	r3, [r5], #4
 8007738:	4798      	blx	r3
 800773a:	3601      	adds	r6, #1
 800773c:	e7ee      	b.n	800771c <__libc_init_array+0xc>
 800773e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007742:	4798      	blx	r3
 8007744:	3601      	adds	r6, #1
 8007746:	e7f2      	b.n	800772e <__libc_init_array+0x1e>
 8007748:	0800994c 	.word	0x0800994c
 800774c:	0800994c 	.word	0x0800994c
 8007750:	0800994c 	.word	0x0800994c
 8007754:	08009950 	.word	0x08009950

08007758 <__retarget_lock_init_recursive>:
 8007758:	4770      	bx	lr

0800775a <__retarget_lock_acquire_recursive>:
 800775a:	4770      	bx	lr

0800775c <__retarget_lock_release_recursive>:
 800775c:	4770      	bx	lr

0800775e <memcpy>:
 800775e:	440a      	add	r2, r1
 8007760:	4291      	cmp	r1, r2
 8007762:	f100 33ff 	add.w	r3, r0, #4294967295
 8007766:	d100      	bne.n	800776a <memcpy+0xc>
 8007768:	4770      	bx	lr
 800776a:	b510      	push	{r4, lr}
 800776c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007770:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007774:	4291      	cmp	r1, r2
 8007776:	d1f9      	bne.n	800776c <memcpy+0xe>
 8007778:	bd10      	pop	{r4, pc}

0800777a <quorem>:
 800777a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777e:	6903      	ldr	r3, [r0, #16]
 8007780:	690c      	ldr	r4, [r1, #16]
 8007782:	42a3      	cmp	r3, r4
 8007784:	4607      	mov	r7, r0
 8007786:	db7e      	blt.n	8007886 <quorem+0x10c>
 8007788:	3c01      	subs	r4, #1
 800778a:	f101 0814 	add.w	r8, r1, #20
 800778e:	f100 0514 	add.w	r5, r0, #20
 8007792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800779c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077a0:	3301      	adds	r3, #1
 80077a2:	429a      	cmp	r2, r3
 80077a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80077b0:	d331      	bcc.n	8007816 <quorem+0x9c>
 80077b2:	f04f 0e00 	mov.w	lr, #0
 80077b6:	4640      	mov	r0, r8
 80077b8:	46ac      	mov	ip, r5
 80077ba:	46f2      	mov	sl, lr
 80077bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80077c0:	b293      	uxth	r3, r2
 80077c2:	fb06 e303 	mla	r3, r6, r3, lr
 80077c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077ca:	0c1a      	lsrs	r2, r3, #16
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	ebaa 0303 	sub.w	r3, sl, r3
 80077d2:	f8dc a000 	ldr.w	sl, [ip]
 80077d6:	fa13 f38a 	uxtah	r3, r3, sl
 80077da:	fb06 220e 	mla	r2, r6, lr, r2
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	9b00      	ldr	r3, [sp, #0]
 80077e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077e6:	b292      	uxth	r2, r2
 80077e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80077f4:	4581      	cmp	r9, r0
 80077f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077fa:	f84c 3b04 	str.w	r3, [ip], #4
 80077fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007802:	d2db      	bcs.n	80077bc <quorem+0x42>
 8007804:	f855 300b 	ldr.w	r3, [r5, fp]
 8007808:	b92b      	cbnz	r3, 8007816 <quorem+0x9c>
 800780a:	9b01      	ldr	r3, [sp, #4]
 800780c:	3b04      	subs	r3, #4
 800780e:	429d      	cmp	r5, r3
 8007810:	461a      	mov	r2, r3
 8007812:	d32c      	bcc.n	800786e <quorem+0xf4>
 8007814:	613c      	str	r4, [r7, #16]
 8007816:	4638      	mov	r0, r7
 8007818:	f001 f9a8 	bl	8008b6c <__mcmp>
 800781c:	2800      	cmp	r0, #0
 800781e:	db22      	blt.n	8007866 <quorem+0xec>
 8007820:	3601      	adds	r6, #1
 8007822:	4629      	mov	r1, r5
 8007824:	2000      	movs	r0, #0
 8007826:	f858 2b04 	ldr.w	r2, [r8], #4
 800782a:	f8d1 c000 	ldr.w	ip, [r1]
 800782e:	b293      	uxth	r3, r2
 8007830:	1ac3      	subs	r3, r0, r3
 8007832:	0c12      	lsrs	r2, r2, #16
 8007834:	fa13 f38c 	uxtah	r3, r3, ip
 8007838:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800783c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007840:	b29b      	uxth	r3, r3
 8007842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007846:	45c1      	cmp	r9, r8
 8007848:	f841 3b04 	str.w	r3, [r1], #4
 800784c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007850:	d2e9      	bcs.n	8007826 <quorem+0xac>
 8007852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800785a:	b922      	cbnz	r2, 8007866 <quorem+0xec>
 800785c:	3b04      	subs	r3, #4
 800785e:	429d      	cmp	r5, r3
 8007860:	461a      	mov	r2, r3
 8007862:	d30a      	bcc.n	800787a <quorem+0x100>
 8007864:	613c      	str	r4, [r7, #16]
 8007866:	4630      	mov	r0, r6
 8007868:	b003      	add	sp, #12
 800786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786e:	6812      	ldr	r2, [r2, #0]
 8007870:	3b04      	subs	r3, #4
 8007872:	2a00      	cmp	r2, #0
 8007874:	d1ce      	bne.n	8007814 <quorem+0x9a>
 8007876:	3c01      	subs	r4, #1
 8007878:	e7c9      	b.n	800780e <quorem+0x94>
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	3b04      	subs	r3, #4
 800787e:	2a00      	cmp	r2, #0
 8007880:	d1f0      	bne.n	8007864 <quorem+0xea>
 8007882:	3c01      	subs	r4, #1
 8007884:	e7eb      	b.n	800785e <quorem+0xe4>
 8007886:	2000      	movs	r0, #0
 8007888:	e7ee      	b.n	8007868 <quorem+0xee>
 800788a:	0000      	movs	r0, r0
 800788c:	0000      	movs	r0, r0
	...

08007890 <_dtoa_r>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	ed2d 8b04 	vpush	{d8-d9}
 8007898:	69c5      	ldr	r5, [r0, #28]
 800789a:	b093      	sub	sp, #76	; 0x4c
 800789c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078a0:	ec57 6b10 	vmov	r6, r7, d0
 80078a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078a8:	9107      	str	r1, [sp, #28]
 80078aa:	4604      	mov	r4, r0
 80078ac:	920a      	str	r2, [sp, #40]	; 0x28
 80078ae:	930d      	str	r3, [sp, #52]	; 0x34
 80078b0:	b975      	cbnz	r5, 80078d0 <_dtoa_r+0x40>
 80078b2:	2010      	movs	r0, #16
 80078b4:	f000 fe2a 	bl	800850c <malloc>
 80078b8:	4602      	mov	r2, r0
 80078ba:	61e0      	str	r0, [r4, #28]
 80078bc:	b920      	cbnz	r0, 80078c8 <_dtoa_r+0x38>
 80078be:	4bae      	ldr	r3, [pc, #696]	; (8007b78 <_dtoa_r+0x2e8>)
 80078c0:	21ef      	movs	r1, #239	; 0xef
 80078c2:	48ae      	ldr	r0, [pc, #696]	; (8007b7c <_dtoa_r+0x2ec>)
 80078c4:	f001 fcea 	bl	800929c <__assert_func>
 80078c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078cc:	6005      	str	r5, [r0, #0]
 80078ce:	60c5      	str	r5, [r0, #12]
 80078d0:	69e3      	ldr	r3, [r4, #28]
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	b151      	cbz	r1, 80078ec <_dtoa_r+0x5c>
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	604a      	str	r2, [r1, #4]
 80078da:	2301      	movs	r3, #1
 80078dc:	4093      	lsls	r3, r2
 80078de:	608b      	str	r3, [r1, #8]
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 ff07 	bl	80086f4 <_Bfree>
 80078e6:	69e3      	ldr	r3, [r4, #28]
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	1e3b      	subs	r3, r7, #0
 80078ee:	bfbb      	ittet	lt
 80078f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	9303      	strlt	r3, [sp, #12]
 80078f6:	2300      	movge	r3, #0
 80078f8:	2201      	movlt	r2, #1
 80078fa:	bfac      	ite	ge
 80078fc:	f8c8 3000 	strge.w	r3, [r8]
 8007900:	f8c8 2000 	strlt.w	r2, [r8]
 8007904:	4b9e      	ldr	r3, [pc, #632]	; (8007b80 <_dtoa_r+0x2f0>)
 8007906:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800790a:	ea33 0308 	bics.w	r3, r3, r8
 800790e:	d11b      	bne.n	8007948 <_dtoa_r+0xb8>
 8007910:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007912:	f242 730f 	movw	r3, #9999	; 0x270f
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800791c:	4333      	orrs	r3, r6
 800791e:	f000 8593 	beq.w	8008448 <_dtoa_r+0xbb8>
 8007922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007924:	b963      	cbnz	r3, 8007940 <_dtoa_r+0xb0>
 8007926:	4b97      	ldr	r3, [pc, #604]	; (8007b84 <_dtoa_r+0x2f4>)
 8007928:	e027      	b.n	800797a <_dtoa_r+0xea>
 800792a:	4b97      	ldr	r3, [pc, #604]	; (8007b88 <_dtoa_r+0x2f8>)
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	9800      	ldr	r0, [sp, #0]
 8007936:	b013      	add	sp, #76	; 0x4c
 8007938:	ecbd 8b04 	vpop	{d8-d9}
 800793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007940:	4b90      	ldr	r3, [pc, #576]	; (8007b84 <_dtoa_r+0x2f4>)
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	3303      	adds	r3, #3
 8007946:	e7f3      	b.n	8007930 <_dtoa_r+0xa0>
 8007948:	ed9d 7b02 	vldr	d7, [sp, #8]
 800794c:	2200      	movs	r2, #0
 800794e:	ec51 0b17 	vmov	r0, r1, d7
 8007952:	eeb0 8a47 	vmov.f32	s16, s14
 8007956:	eef0 8a67 	vmov.f32	s17, s15
 800795a:	2300      	movs	r3, #0
 800795c:	f7f9 f8cc 	bl	8000af8 <__aeabi_dcmpeq>
 8007960:	4681      	mov	r9, r0
 8007962:	b160      	cbz	r0, 800797e <_dtoa_r+0xee>
 8007964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007966:	2301      	movs	r3, #1
 8007968:	6013      	str	r3, [r2, #0]
 800796a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 8568 	beq.w	8008442 <_dtoa_r+0xbb2>
 8007972:	4b86      	ldr	r3, [pc, #536]	; (8007b8c <_dtoa_r+0x2fc>)
 8007974:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	3b01      	subs	r3, #1
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	e7da      	b.n	8007934 <_dtoa_r+0xa4>
 800797e:	aa10      	add	r2, sp, #64	; 0x40
 8007980:	a911      	add	r1, sp, #68	; 0x44
 8007982:	4620      	mov	r0, r4
 8007984:	eeb0 0a48 	vmov.f32	s0, s16
 8007988:	eef0 0a68 	vmov.f32	s1, s17
 800798c:	f001 f994 	bl	8008cb8 <__d2b>
 8007990:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007994:	4682      	mov	sl, r0
 8007996:	2d00      	cmp	r5, #0
 8007998:	d07f      	beq.n	8007a9a <_dtoa_r+0x20a>
 800799a:	ee18 3a90 	vmov	r3, s17
 800799e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80079a6:	ec51 0b18 	vmov	r0, r1, d8
 80079aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80079ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80079b6:	4619      	mov	r1, r3
 80079b8:	2200      	movs	r2, #0
 80079ba:	4b75      	ldr	r3, [pc, #468]	; (8007b90 <_dtoa_r+0x300>)
 80079bc:	f7f8 fc7c 	bl	80002b8 <__aeabi_dsub>
 80079c0:	a367      	add	r3, pc, #412	; (adr r3, 8007b60 <_dtoa_r+0x2d0>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	f7f8 fe2f 	bl	8000628 <__aeabi_dmul>
 80079ca:	a367      	add	r3, pc, #412	; (adr r3, 8007b68 <_dtoa_r+0x2d8>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f7f8 fc74 	bl	80002bc <__adddf3>
 80079d4:	4606      	mov	r6, r0
 80079d6:	4628      	mov	r0, r5
 80079d8:	460f      	mov	r7, r1
 80079da:	f7f8 fdbb 	bl	8000554 <__aeabi_i2d>
 80079de:	a364      	add	r3, pc, #400	; (adr r3, 8007b70 <_dtoa_r+0x2e0>)
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 fe20 	bl	8000628 <__aeabi_dmul>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4630      	mov	r0, r6
 80079ee:	4639      	mov	r1, r7
 80079f0:	f7f8 fc64 	bl	80002bc <__adddf3>
 80079f4:	4606      	mov	r6, r0
 80079f6:	460f      	mov	r7, r1
 80079f8:	f7f9 f8c6 	bl	8000b88 <__aeabi_d2iz>
 80079fc:	2200      	movs	r2, #0
 80079fe:	4683      	mov	fp, r0
 8007a00:	2300      	movs	r3, #0
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f9 f881 	bl	8000b0c <__aeabi_dcmplt>
 8007a0a:	b148      	cbz	r0, 8007a20 <_dtoa_r+0x190>
 8007a0c:	4658      	mov	r0, fp
 8007a0e:	f7f8 fda1 	bl	8000554 <__aeabi_i2d>
 8007a12:	4632      	mov	r2, r6
 8007a14:	463b      	mov	r3, r7
 8007a16:	f7f9 f86f 	bl	8000af8 <__aeabi_dcmpeq>
 8007a1a:	b908      	cbnz	r0, 8007a20 <_dtoa_r+0x190>
 8007a1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a20:	f1bb 0f16 	cmp.w	fp, #22
 8007a24:	d857      	bhi.n	8007ad6 <_dtoa_r+0x246>
 8007a26:	4b5b      	ldr	r3, [pc, #364]	; (8007b94 <_dtoa_r+0x304>)
 8007a28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	ec51 0b18 	vmov	r0, r1, d8
 8007a34:	f7f9 f86a 	bl	8000b0c <__aeabi_dcmplt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d04e      	beq.n	8007ada <_dtoa_r+0x24a>
 8007a3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a40:	2300      	movs	r3, #0
 8007a42:	930c      	str	r3, [sp, #48]	; 0x30
 8007a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a46:	1b5b      	subs	r3, r3, r5
 8007a48:	1e5a      	subs	r2, r3, #1
 8007a4a:	bf45      	ittet	mi
 8007a4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a50:	9305      	strmi	r3, [sp, #20]
 8007a52:	2300      	movpl	r3, #0
 8007a54:	2300      	movmi	r3, #0
 8007a56:	9206      	str	r2, [sp, #24]
 8007a58:	bf54      	ite	pl
 8007a5a:	9305      	strpl	r3, [sp, #20]
 8007a5c:	9306      	strmi	r3, [sp, #24]
 8007a5e:	f1bb 0f00 	cmp.w	fp, #0
 8007a62:	db3c      	blt.n	8007ade <_dtoa_r+0x24e>
 8007a64:	9b06      	ldr	r3, [sp, #24]
 8007a66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007a6a:	445b      	add	r3, fp
 8007a6c:	9306      	str	r3, [sp, #24]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9308      	str	r3, [sp, #32]
 8007a72:	9b07      	ldr	r3, [sp, #28]
 8007a74:	2b09      	cmp	r3, #9
 8007a76:	d868      	bhi.n	8007b4a <_dtoa_r+0x2ba>
 8007a78:	2b05      	cmp	r3, #5
 8007a7a:	bfc4      	itt	gt
 8007a7c:	3b04      	subgt	r3, #4
 8007a7e:	9307      	strgt	r3, [sp, #28]
 8007a80:	9b07      	ldr	r3, [sp, #28]
 8007a82:	f1a3 0302 	sub.w	r3, r3, #2
 8007a86:	bfcc      	ite	gt
 8007a88:	2500      	movgt	r5, #0
 8007a8a:	2501      	movle	r5, #1
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	f200 8085 	bhi.w	8007b9c <_dtoa_r+0x30c>
 8007a92:	e8df f003 	tbb	[pc, r3]
 8007a96:	3b2e      	.short	0x3b2e
 8007a98:	5839      	.short	0x5839
 8007a9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a9e:	441d      	add	r5, r3
 8007aa0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	bfc1      	itttt	gt
 8007aa8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007aac:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ab0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007ab4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ab8:	bfd6      	itet	le
 8007aba:	f1c3 0320 	rsble	r3, r3, #32
 8007abe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007ac2:	fa06 f003 	lslle.w	r0, r6, r3
 8007ac6:	f7f8 fd35 	bl	8000534 <__aeabi_ui2d>
 8007aca:	2201      	movs	r2, #1
 8007acc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ad0:	3d01      	subs	r5, #1
 8007ad2:	920e      	str	r2, [sp, #56]	; 0x38
 8007ad4:	e76f      	b.n	80079b6 <_dtoa_r+0x126>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e7b3      	b.n	8007a42 <_dtoa_r+0x1b2>
 8007ada:	900c      	str	r0, [sp, #48]	; 0x30
 8007adc:	e7b2      	b.n	8007a44 <_dtoa_r+0x1b4>
 8007ade:	9b05      	ldr	r3, [sp, #20]
 8007ae0:	eba3 030b 	sub.w	r3, r3, fp
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	f1cb 0300 	rsb	r3, fp, #0
 8007aea:	9308      	str	r3, [sp, #32]
 8007aec:	2300      	movs	r3, #0
 8007aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007af0:	e7bf      	b.n	8007a72 <_dtoa_r+0x1e2>
 8007af2:	2300      	movs	r3, #0
 8007af4:	9309      	str	r3, [sp, #36]	; 0x24
 8007af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dc52      	bgt.n	8007ba2 <_dtoa_r+0x312>
 8007afc:	2301      	movs	r3, #1
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	461a      	mov	r2, r3
 8007b04:	920a      	str	r2, [sp, #40]	; 0x28
 8007b06:	e00b      	b.n	8007b20 <_dtoa_r+0x290>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7f3      	b.n	8007af4 <_dtoa_r+0x264>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b12:	445b      	add	r3, fp
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	3301      	adds	r3, #1
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	9304      	str	r3, [sp, #16]
 8007b1c:	bfb8      	it	lt
 8007b1e:	2301      	movlt	r3, #1
 8007b20:	69e0      	ldr	r0, [r4, #28]
 8007b22:	2100      	movs	r1, #0
 8007b24:	2204      	movs	r2, #4
 8007b26:	f102 0614 	add.w	r6, r2, #20
 8007b2a:	429e      	cmp	r6, r3
 8007b2c:	d93d      	bls.n	8007baa <_dtoa_r+0x31a>
 8007b2e:	6041      	str	r1, [r0, #4]
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 fd9f 	bl	8008674 <_Balloc>
 8007b36:	9000      	str	r0, [sp, #0]
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d139      	bne.n	8007bb0 <_dtoa_r+0x320>
 8007b3c:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <_dtoa_r+0x308>)
 8007b3e:	4602      	mov	r2, r0
 8007b40:	f240 11af 	movw	r1, #431	; 0x1af
 8007b44:	e6bd      	b.n	80078c2 <_dtoa_r+0x32>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e7e1      	b.n	8007b0e <_dtoa_r+0x27e>
 8007b4a:	2501      	movs	r5, #1
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	9509      	str	r5, [sp, #36]	; 0x24
 8007b52:	f04f 33ff 	mov.w	r3, #4294967295
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2312      	movs	r3, #18
 8007b5e:	e7d1      	b.n	8007b04 <_dtoa_r+0x274>
 8007b60:	636f4361 	.word	0x636f4361
 8007b64:	3fd287a7 	.word	0x3fd287a7
 8007b68:	8b60c8b3 	.word	0x8b60c8b3
 8007b6c:	3fc68a28 	.word	0x3fc68a28
 8007b70:	509f79fb 	.word	0x509f79fb
 8007b74:	3fd34413 	.word	0x3fd34413
 8007b78:	08009618 	.word	0x08009618
 8007b7c:	0800962f 	.word	0x0800962f
 8007b80:	7ff00000 	.word	0x7ff00000
 8007b84:	08009614 	.word	0x08009614
 8007b88:	0800960b 	.word	0x0800960b
 8007b8c:	080095e8 	.word	0x080095e8
 8007b90:	3ff80000 	.word	0x3ff80000
 8007b94:	08009720 	.word	0x08009720
 8007b98:	08009687 	.word	0x08009687
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba0:	e7d7      	b.n	8007b52 <_dtoa_r+0x2c2>
 8007ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	e7ba      	b.n	8007b20 <_dtoa_r+0x290>
 8007baa:	3101      	adds	r1, #1
 8007bac:	0052      	lsls	r2, r2, #1
 8007bae:	e7ba      	b.n	8007b26 <_dtoa_r+0x296>
 8007bb0:	69e3      	ldr	r3, [r4, #28]
 8007bb2:	9a00      	ldr	r2, [sp, #0]
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	2b0e      	cmp	r3, #14
 8007bba:	f200 80a8 	bhi.w	8007d0e <_dtoa_r+0x47e>
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	f000 80a5 	beq.w	8007d0e <_dtoa_r+0x47e>
 8007bc4:	f1bb 0f00 	cmp.w	fp, #0
 8007bc8:	dd38      	ble.n	8007c3c <_dtoa_r+0x3ac>
 8007bca:	4bc0      	ldr	r3, [pc, #768]	; (8007ecc <_dtoa_r+0x63c>)
 8007bcc:	f00b 020f 	and.w	r2, fp, #15
 8007bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007bd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007bdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007be0:	d019      	beq.n	8007c16 <_dtoa_r+0x386>
 8007be2:	4bbb      	ldr	r3, [pc, #748]	; (8007ed0 <_dtoa_r+0x640>)
 8007be4:	ec51 0b18 	vmov	r0, r1, d8
 8007be8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bec:	f7f8 fe46 	bl	800087c <__aeabi_ddiv>
 8007bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bf4:	f008 080f 	and.w	r8, r8, #15
 8007bf8:	2503      	movs	r5, #3
 8007bfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007ed0 <_dtoa_r+0x640>
 8007bfe:	f1b8 0f00 	cmp.w	r8, #0
 8007c02:	d10a      	bne.n	8007c1a <_dtoa_r+0x38a>
 8007c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c08:	4632      	mov	r2, r6
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	f7f8 fe36 	bl	800087c <__aeabi_ddiv>
 8007c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c14:	e02b      	b.n	8007c6e <_dtoa_r+0x3de>
 8007c16:	2502      	movs	r5, #2
 8007c18:	e7ef      	b.n	8007bfa <_dtoa_r+0x36a>
 8007c1a:	f018 0f01 	tst.w	r8, #1
 8007c1e:	d008      	beq.n	8007c32 <_dtoa_r+0x3a2>
 8007c20:	4630      	mov	r0, r6
 8007c22:	4639      	mov	r1, r7
 8007c24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007c28:	f7f8 fcfe 	bl	8000628 <__aeabi_dmul>
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460f      	mov	r7, r1
 8007c32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007c36:	f109 0908 	add.w	r9, r9, #8
 8007c3a:	e7e0      	b.n	8007bfe <_dtoa_r+0x36e>
 8007c3c:	f000 809f 	beq.w	8007d7e <_dtoa_r+0x4ee>
 8007c40:	f1cb 0600 	rsb	r6, fp, #0
 8007c44:	4ba1      	ldr	r3, [pc, #644]	; (8007ecc <_dtoa_r+0x63c>)
 8007c46:	4fa2      	ldr	r7, [pc, #648]	; (8007ed0 <_dtoa_r+0x640>)
 8007c48:	f006 020f 	and.w	r2, r6, #15
 8007c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	ec51 0b18 	vmov	r0, r1, d8
 8007c58:	f7f8 fce6 	bl	8000628 <__aeabi_dmul>
 8007c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c60:	1136      	asrs	r6, r6, #4
 8007c62:	2300      	movs	r3, #0
 8007c64:	2502      	movs	r5, #2
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	d17e      	bne.n	8007d68 <_dtoa_r+0x4d8>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1d0      	bne.n	8007c10 <_dtoa_r+0x380>
 8007c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8084 	beq.w	8007d82 <_dtoa_r+0x4f2>
 8007c7a:	4b96      	ldr	r3, [pc, #600]	; (8007ed4 <_dtoa_r+0x644>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	f7f8 ff43 	bl	8000b0c <__aeabi_dcmplt>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d07b      	beq.n	8007d82 <_dtoa_r+0x4f2>
 8007c8a:	9b04      	ldr	r3, [sp, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d078      	beq.n	8007d82 <_dtoa_r+0x4f2>
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dd39      	ble.n	8007d0a <_dtoa_r+0x47a>
 8007c96:	4b90      	ldr	r3, [pc, #576]	; (8007ed8 <_dtoa_r+0x648>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 fcc3 	bl	8000628 <__aeabi_dmul>
 8007ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca6:	9e01      	ldr	r6, [sp, #4]
 8007ca8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007cac:	3501      	adds	r5, #1
 8007cae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7f8 fc4e 	bl	8000554 <__aeabi_i2d>
 8007cb8:	4642      	mov	r2, r8
 8007cba:	464b      	mov	r3, r9
 8007cbc:	f7f8 fcb4 	bl	8000628 <__aeabi_dmul>
 8007cc0:	4b86      	ldr	r3, [pc, #536]	; (8007edc <_dtoa_r+0x64c>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f7f8 fafa 	bl	80002bc <__adddf3>
 8007cc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	d158      	bne.n	8007d88 <_dtoa_r+0x4f8>
 8007cd6:	4b82      	ldr	r3, [pc, #520]	; (8007ee0 <_dtoa_r+0x650>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4640      	mov	r0, r8
 8007cdc:	4649      	mov	r1, r9
 8007cde:	f7f8 faeb 	bl	80002b8 <__aeabi_dsub>
 8007ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	f7f8 ff2d 	bl	8000b48 <__aeabi_dcmpgt>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f040 8296 	bne.w	8008220 <_dtoa_r+0x990>
 8007cf4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cfe:	4649      	mov	r1, r9
 8007d00:	f7f8 ff04 	bl	8000b0c <__aeabi_dcmplt>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f040 8289 	bne.w	800821c <_dtoa_r+0x98c>
 8007d0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f2c0 814e 	blt.w	8007fb2 <_dtoa_r+0x722>
 8007d16:	f1bb 0f0e 	cmp.w	fp, #14
 8007d1a:	f300 814a 	bgt.w	8007fb2 <_dtoa_r+0x722>
 8007d1e:	4b6b      	ldr	r3, [pc, #428]	; (8007ecc <_dtoa_r+0x63c>)
 8007d20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f280 80dc 	bge.w	8007ee8 <_dtoa_r+0x658>
 8007d30:	9b04      	ldr	r3, [sp, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f300 80d8 	bgt.w	8007ee8 <_dtoa_r+0x658>
 8007d38:	f040 826f 	bne.w	800821a <_dtoa_r+0x98a>
 8007d3c:	4b68      	ldr	r3, [pc, #416]	; (8007ee0 <_dtoa_r+0x650>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4640      	mov	r0, r8
 8007d42:	4649      	mov	r1, r9
 8007d44:	f7f8 fc70 	bl	8000628 <__aeabi_dmul>
 8007d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d4c:	f7f8 fef2 	bl	8000b34 <__aeabi_dcmpge>
 8007d50:	9e04      	ldr	r6, [sp, #16]
 8007d52:	4637      	mov	r7, r6
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f040 8245 	bne.w	80081e4 <_dtoa_r+0x954>
 8007d5a:	9d00      	ldr	r5, [sp, #0]
 8007d5c:	2331      	movs	r3, #49	; 0x31
 8007d5e:	f805 3b01 	strb.w	r3, [r5], #1
 8007d62:	f10b 0b01 	add.w	fp, fp, #1
 8007d66:	e241      	b.n	80081ec <_dtoa_r+0x95c>
 8007d68:	07f2      	lsls	r2, r6, #31
 8007d6a:	d505      	bpl.n	8007d78 <_dtoa_r+0x4e8>
 8007d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d70:	f7f8 fc5a 	bl	8000628 <__aeabi_dmul>
 8007d74:	3501      	adds	r5, #1
 8007d76:	2301      	movs	r3, #1
 8007d78:	1076      	asrs	r6, r6, #1
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	e773      	b.n	8007c66 <_dtoa_r+0x3d6>
 8007d7e:	2502      	movs	r5, #2
 8007d80:	e775      	b.n	8007c6e <_dtoa_r+0x3de>
 8007d82:	9e04      	ldr	r6, [sp, #16]
 8007d84:	465f      	mov	r7, fp
 8007d86:	e792      	b.n	8007cae <_dtoa_r+0x41e>
 8007d88:	9900      	ldr	r1, [sp, #0]
 8007d8a:	4b50      	ldr	r3, [pc, #320]	; (8007ecc <_dtoa_r+0x63c>)
 8007d8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d90:	4431      	add	r1, r6
 8007d92:	9102      	str	r1, [sp, #8]
 8007d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d96:	eeb0 9a47 	vmov.f32	s18, s14
 8007d9a:	eef0 9a67 	vmov.f32	s19, s15
 8007d9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007da2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007da6:	2900      	cmp	r1, #0
 8007da8:	d044      	beq.n	8007e34 <_dtoa_r+0x5a4>
 8007daa:	494e      	ldr	r1, [pc, #312]	; (8007ee4 <_dtoa_r+0x654>)
 8007dac:	2000      	movs	r0, #0
 8007dae:	f7f8 fd65 	bl	800087c <__aeabi_ddiv>
 8007db2:	ec53 2b19 	vmov	r2, r3, d9
 8007db6:	f7f8 fa7f 	bl	80002b8 <__aeabi_dsub>
 8007dba:	9d00      	ldr	r5, [sp, #0]
 8007dbc:	ec41 0b19 	vmov	d9, r0, r1
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f7f8 fee0 	bl	8000b88 <__aeabi_d2iz>
 8007dc8:	4606      	mov	r6, r0
 8007dca:	f7f8 fbc3 	bl	8000554 <__aeabi_i2d>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	f7f8 fa6f 	bl	80002b8 <__aeabi_dsub>
 8007dda:	3630      	adds	r6, #48	; 0x30
 8007ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8007de0:	ec53 2b19 	vmov	r2, r3, d9
 8007de4:	4680      	mov	r8, r0
 8007de6:	4689      	mov	r9, r1
 8007de8:	f7f8 fe90 	bl	8000b0c <__aeabi_dcmplt>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d164      	bne.n	8007eba <_dtoa_r+0x62a>
 8007df0:	4642      	mov	r2, r8
 8007df2:	464b      	mov	r3, r9
 8007df4:	4937      	ldr	r1, [pc, #220]	; (8007ed4 <_dtoa_r+0x644>)
 8007df6:	2000      	movs	r0, #0
 8007df8:	f7f8 fa5e 	bl	80002b8 <__aeabi_dsub>
 8007dfc:	ec53 2b19 	vmov	r2, r3, d9
 8007e00:	f7f8 fe84 	bl	8000b0c <__aeabi_dcmplt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f040 80b6 	bne.w	8007f76 <_dtoa_r+0x6e6>
 8007e0a:	9b02      	ldr	r3, [sp, #8]
 8007e0c:	429d      	cmp	r5, r3
 8007e0e:	f43f af7c 	beq.w	8007d0a <_dtoa_r+0x47a>
 8007e12:	4b31      	ldr	r3, [pc, #196]	; (8007ed8 <_dtoa_r+0x648>)
 8007e14:	ec51 0b19 	vmov	r0, r1, d9
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f7f8 fc05 	bl	8000628 <__aeabi_dmul>
 8007e1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <_dtoa_r+0x648>)
 8007e20:	ec41 0b19 	vmov	d9, r0, r1
 8007e24:	2200      	movs	r2, #0
 8007e26:	4640      	mov	r0, r8
 8007e28:	4649      	mov	r1, r9
 8007e2a:	f7f8 fbfd 	bl	8000628 <__aeabi_dmul>
 8007e2e:	4680      	mov	r8, r0
 8007e30:	4689      	mov	r9, r1
 8007e32:	e7c5      	b.n	8007dc0 <_dtoa_r+0x530>
 8007e34:	ec51 0b17 	vmov	r0, r1, d7
 8007e38:	f7f8 fbf6 	bl	8000628 <__aeabi_dmul>
 8007e3c:	9b02      	ldr	r3, [sp, #8]
 8007e3e:	9d00      	ldr	r5, [sp, #0]
 8007e40:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e42:	ec41 0b19 	vmov	d9, r0, r1
 8007e46:	4649      	mov	r1, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	f7f8 fe9d 	bl	8000b88 <__aeabi_d2iz>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	f7f8 fb80 	bl	8000554 <__aeabi_i2d>
 8007e54:	3630      	adds	r6, #48	; 0x30
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	f7f8 fa2b 	bl	80002b8 <__aeabi_dsub>
 8007e62:	f805 6b01 	strb.w	r6, [r5], #1
 8007e66:	9b02      	ldr	r3, [sp, #8]
 8007e68:	429d      	cmp	r5, r3
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	f04f 0200 	mov.w	r2, #0
 8007e72:	d124      	bne.n	8007ebe <_dtoa_r+0x62e>
 8007e74:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <_dtoa_r+0x654>)
 8007e76:	ec51 0b19 	vmov	r0, r1, d9
 8007e7a:	f7f8 fa1f 	bl	80002bc <__adddf3>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4640      	mov	r0, r8
 8007e84:	4649      	mov	r1, r9
 8007e86:	f7f8 fe5f 	bl	8000b48 <__aeabi_dcmpgt>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d173      	bne.n	8007f76 <_dtoa_r+0x6e6>
 8007e8e:	ec53 2b19 	vmov	r2, r3, d9
 8007e92:	4914      	ldr	r1, [pc, #80]	; (8007ee4 <_dtoa_r+0x654>)
 8007e94:	2000      	movs	r0, #0
 8007e96:	f7f8 fa0f 	bl	80002b8 <__aeabi_dsub>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	f7f8 fe33 	bl	8000b0c <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f43f af2f 	beq.w	8007d0a <_dtoa_r+0x47a>
 8007eac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007eae:	1e6b      	subs	r3, r5, #1
 8007eb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007eb6:	2b30      	cmp	r3, #48	; 0x30
 8007eb8:	d0f8      	beq.n	8007eac <_dtoa_r+0x61c>
 8007eba:	46bb      	mov	fp, r7
 8007ebc:	e04a      	b.n	8007f54 <_dtoa_r+0x6c4>
 8007ebe:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <_dtoa_r+0x648>)
 8007ec0:	f7f8 fbb2 	bl	8000628 <__aeabi_dmul>
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	e7bd      	b.n	8007e46 <_dtoa_r+0x5b6>
 8007eca:	bf00      	nop
 8007ecc:	08009720 	.word	0x08009720
 8007ed0:	080096f8 	.word	0x080096f8
 8007ed4:	3ff00000 	.word	0x3ff00000
 8007ed8:	40240000 	.word	0x40240000
 8007edc:	401c0000 	.word	0x401c0000
 8007ee0:	40140000 	.word	0x40140000
 8007ee4:	3fe00000 	.word	0x3fe00000
 8007ee8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007eec:	9d00      	ldr	r5, [sp, #0]
 8007eee:	4642      	mov	r2, r8
 8007ef0:	464b      	mov	r3, r9
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	f7f8 fcc1 	bl	800087c <__aeabi_ddiv>
 8007efa:	f7f8 fe45 	bl	8000b88 <__aeabi_d2iz>
 8007efe:	9001      	str	r0, [sp, #4]
 8007f00:	f7f8 fb28 	bl	8000554 <__aeabi_i2d>
 8007f04:	4642      	mov	r2, r8
 8007f06:	464b      	mov	r3, r9
 8007f08:	f7f8 fb8e 	bl	8000628 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 f9d0 	bl	80002b8 <__aeabi_dsub>
 8007f18:	9e01      	ldr	r6, [sp, #4]
 8007f1a:	9f04      	ldr	r7, [sp, #16]
 8007f1c:	3630      	adds	r6, #48	; 0x30
 8007f1e:	f805 6b01 	strb.w	r6, [r5], #1
 8007f22:	9e00      	ldr	r6, [sp, #0]
 8007f24:	1bae      	subs	r6, r5, r6
 8007f26:	42b7      	cmp	r7, r6
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	d134      	bne.n	8007f98 <_dtoa_r+0x708>
 8007f2e:	f7f8 f9c5 	bl	80002bc <__adddf3>
 8007f32:	4642      	mov	r2, r8
 8007f34:	464b      	mov	r3, r9
 8007f36:	4606      	mov	r6, r0
 8007f38:	460f      	mov	r7, r1
 8007f3a:	f7f8 fe05 	bl	8000b48 <__aeabi_dcmpgt>
 8007f3e:	b9c8      	cbnz	r0, 8007f74 <_dtoa_r+0x6e4>
 8007f40:	4642      	mov	r2, r8
 8007f42:	464b      	mov	r3, r9
 8007f44:	4630      	mov	r0, r6
 8007f46:	4639      	mov	r1, r7
 8007f48:	f7f8 fdd6 	bl	8000af8 <__aeabi_dcmpeq>
 8007f4c:	b110      	cbz	r0, 8007f54 <_dtoa_r+0x6c4>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	07db      	lsls	r3, r3, #31
 8007f52:	d40f      	bmi.n	8007f74 <_dtoa_r+0x6e4>
 8007f54:	4651      	mov	r1, sl
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 fbcc 	bl	80086f4 <_Bfree>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f60:	702b      	strb	r3, [r5, #0]
 8007f62:	f10b 0301 	add.w	r3, fp, #1
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f43f ace2 	beq.w	8007934 <_dtoa_r+0xa4>
 8007f70:	601d      	str	r5, [r3, #0]
 8007f72:	e4df      	b.n	8007934 <_dtoa_r+0xa4>
 8007f74:	465f      	mov	r7, fp
 8007f76:	462b      	mov	r3, r5
 8007f78:	461d      	mov	r5, r3
 8007f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f7e:	2a39      	cmp	r2, #57	; 0x39
 8007f80:	d106      	bne.n	8007f90 <_dtoa_r+0x700>
 8007f82:	9a00      	ldr	r2, [sp, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d1f7      	bne.n	8007f78 <_dtoa_r+0x6e8>
 8007f88:	9900      	ldr	r1, [sp, #0]
 8007f8a:	2230      	movs	r2, #48	; 0x30
 8007f8c:	3701      	adds	r7, #1
 8007f8e:	700a      	strb	r2, [r1, #0]
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	3201      	adds	r2, #1
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	e790      	b.n	8007eba <_dtoa_r+0x62a>
 8007f98:	4ba3      	ldr	r3, [pc, #652]	; (8008228 <_dtoa_r+0x998>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f7f8 fb44 	bl	8000628 <__aeabi_dmul>
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	460f      	mov	r7, r1
 8007fa8:	f7f8 fda6 	bl	8000af8 <__aeabi_dcmpeq>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d09e      	beq.n	8007eee <_dtoa_r+0x65e>
 8007fb0:	e7d0      	b.n	8007f54 <_dtoa_r+0x6c4>
 8007fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	f000 80ca 	beq.w	800814e <_dtoa_r+0x8be>
 8007fba:	9a07      	ldr	r2, [sp, #28]
 8007fbc:	2a01      	cmp	r2, #1
 8007fbe:	f300 80ad 	bgt.w	800811c <_dtoa_r+0x88c>
 8007fc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	f000 80a5 	beq.w	8008114 <_dtoa_r+0x884>
 8007fca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fce:	9e08      	ldr	r6, [sp, #32]
 8007fd0:	9d05      	ldr	r5, [sp, #20]
 8007fd2:	9a05      	ldr	r2, [sp, #20]
 8007fd4:	441a      	add	r2, r3
 8007fd6:	9205      	str	r2, [sp, #20]
 8007fd8:	9a06      	ldr	r2, [sp, #24]
 8007fda:	2101      	movs	r1, #1
 8007fdc:	441a      	add	r2, r3
 8007fde:	4620      	mov	r0, r4
 8007fe0:	9206      	str	r2, [sp, #24]
 8007fe2:	f000 fc3d 	bl	8008860 <__i2b>
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	b165      	cbz	r5, 8008004 <_dtoa_r+0x774>
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dd09      	ble.n	8008004 <_dtoa_r+0x774>
 8007ff0:	42ab      	cmp	r3, r5
 8007ff2:	9a05      	ldr	r2, [sp, #20]
 8007ff4:	bfa8      	it	ge
 8007ff6:	462b      	movge	r3, r5
 8007ff8:	1ad2      	subs	r2, r2, r3
 8007ffa:	9205      	str	r2, [sp, #20]
 8007ffc:	9a06      	ldr	r2, [sp, #24]
 8007ffe:	1aed      	subs	r5, r5, r3
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	9306      	str	r3, [sp, #24]
 8008004:	9b08      	ldr	r3, [sp, #32]
 8008006:	b1f3      	cbz	r3, 8008046 <_dtoa_r+0x7b6>
 8008008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 80a3 	beq.w	8008156 <_dtoa_r+0x8c6>
 8008010:	2e00      	cmp	r6, #0
 8008012:	dd10      	ble.n	8008036 <_dtoa_r+0x7a6>
 8008014:	4639      	mov	r1, r7
 8008016:	4632      	mov	r2, r6
 8008018:	4620      	mov	r0, r4
 800801a:	f000 fce1 	bl	80089e0 <__pow5mult>
 800801e:	4652      	mov	r2, sl
 8008020:	4601      	mov	r1, r0
 8008022:	4607      	mov	r7, r0
 8008024:	4620      	mov	r0, r4
 8008026:	f000 fc31 	bl	800888c <__multiply>
 800802a:	4651      	mov	r1, sl
 800802c:	4680      	mov	r8, r0
 800802e:	4620      	mov	r0, r4
 8008030:	f000 fb60 	bl	80086f4 <_Bfree>
 8008034:	46c2      	mov	sl, r8
 8008036:	9b08      	ldr	r3, [sp, #32]
 8008038:	1b9a      	subs	r2, r3, r6
 800803a:	d004      	beq.n	8008046 <_dtoa_r+0x7b6>
 800803c:	4651      	mov	r1, sl
 800803e:	4620      	mov	r0, r4
 8008040:	f000 fcce 	bl	80089e0 <__pow5mult>
 8008044:	4682      	mov	sl, r0
 8008046:	2101      	movs	r1, #1
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fc09 	bl	8008860 <__i2b>
 800804e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008050:	2b00      	cmp	r3, #0
 8008052:	4606      	mov	r6, r0
 8008054:	f340 8081 	ble.w	800815a <_dtoa_r+0x8ca>
 8008058:	461a      	mov	r2, r3
 800805a:	4601      	mov	r1, r0
 800805c:	4620      	mov	r0, r4
 800805e:	f000 fcbf 	bl	80089e0 <__pow5mult>
 8008062:	9b07      	ldr	r3, [sp, #28]
 8008064:	2b01      	cmp	r3, #1
 8008066:	4606      	mov	r6, r0
 8008068:	dd7a      	ble.n	8008160 <_dtoa_r+0x8d0>
 800806a:	f04f 0800 	mov.w	r8, #0
 800806e:	6933      	ldr	r3, [r6, #16]
 8008070:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008074:	6918      	ldr	r0, [r3, #16]
 8008076:	f000 fba5 	bl	80087c4 <__hi0bits>
 800807a:	f1c0 0020 	rsb	r0, r0, #32
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	4418      	add	r0, r3
 8008082:	f010 001f 	ands.w	r0, r0, #31
 8008086:	f000 8094 	beq.w	80081b2 <_dtoa_r+0x922>
 800808a:	f1c0 0320 	rsb	r3, r0, #32
 800808e:	2b04      	cmp	r3, #4
 8008090:	f340 8085 	ble.w	800819e <_dtoa_r+0x90e>
 8008094:	9b05      	ldr	r3, [sp, #20]
 8008096:	f1c0 001c 	rsb	r0, r0, #28
 800809a:	4403      	add	r3, r0
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	9b06      	ldr	r3, [sp, #24]
 80080a0:	4403      	add	r3, r0
 80080a2:	4405      	add	r5, r0
 80080a4:	9306      	str	r3, [sp, #24]
 80080a6:	9b05      	ldr	r3, [sp, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	dd05      	ble.n	80080b8 <_dtoa_r+0x828>
 80080ac:	4651      	mov	r1, sl
 80080ae:	461a      	mov	r2, r3
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fcef 	bl	8008a94 <__lshift>
 80080b6:	4682      	mov	sl, r0
 80080b8:	9b06      	ldr	r3, [sp, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	dd05      	ble.n	80080ca <_dtoa_r+0x83a>
 80080be:	4631      	mov	r1, r6
 80080c0:	461a      	mov	r2, r3
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 fce6 	bl	8008a94 <__lshift>
 80080c8:	4606      	mov	r6, r0
 80080ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d072      	beq.n	80081b6 <_dtoa_r+0x926>
 80080d0:	4631      	mov	r1, r6
 80080d2:	4650      	mov	r0, sl
 80080d4:	f000 fd4a 	bl	8008b6c <__mcmp>
 80080d8:	2800      	cmp	r0, #0
 80080da:	da6c      	bge.n	80081b6 <_dtoa_r+0x926>
 80080dc:	2300      	movs	r3, #0
 80080de:	4651      	mov	r1, sl
 80080e0:	220a      	movs	r2, #10
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fb28 	bl	8008738 <__multadd>
 80080e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080ee:	4682      	mov	sl, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 81b0 	beq.w	8008456 <_dtoa_r+0xbc6>
 80080f6:	2300      	movs	r3, #0
 80080f8:	4639      	mov	r1, r7
 80080fa:	220a      	movs	r2, #10
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 fb1b 	bl	8008738 <__multadd>
 8008102:	9b01      	ldr	r3, [sp, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	4607      	mov	r7, r0
 8008108:	f300 8096 	bgt.w	8008238 <_dtoa_r+0x9a8>
 800810c:	9b07      	ldr	r3, [sp, #28]
 800810e:	2b02      	cmp	r3, #2
 8008110:	dc59      	bgt.n	80081c6 <_dtoa_r+0x936>
 8008112:	e091      	b.n	8008238 <_dtoa_r+0x9a8>
 8008114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800811a:	e758      	b.n	8007fce <_dtoa_r+0x73e>
 800811c:	9b04      	ldr	r3, [sp, #16]
 800811e:	1e5e      	subs	r6, r3, #1
 8008120:	9b08      	ldr	r3, [sp, #32]
 8008122:	42b3      	cmp	r3, r6
 8008124:	bfbf      	itttt	lt
 8008126:	9b08      	ldrlt	r3, [sp, #32]
 8008128:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800812a:	9608      	strlt	r6, [sp, #32]
 800812c:	1af3      	sublt	r3, r6, r3
 800812e:	bfb4      	ite	lt
 8008130:	18d2      	addlt	r2, r2, r3
 8008132:	1b9e      	subge	r6, r3, r6
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	bfbc      	itt	lt
 8008138:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800813a:	2600      	movlt	r6, #0
 800813c:	2b00      	cmp	r3, #0
 800813e:	bfb7      	itett	lt
 8008140:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008144:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008148:	1a9d      	sublt	r5, r3, r2
 800814a:	2300      	movlt	r3, #0
 800814c:	e741      	b.n	8007fd2 <_dtoa_r+0x742>
 800814e:	9e08      	ldr	r6, [sp, #32]
 8008150:	9d05      	ldr	r5, [sp, #20]
 8008152:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008154:	e748      	b.n	8007fe8 <_dtoa_r+0x758>
 8008156:	9a08      	ldr	r2, [sp, #32]
 8008158:	e770      	b.n	800803c <_dtoa_r+0x7ac>
 800815a:	9b07      	ldr	r3, [sp, #28]
 800815c:	2b01      	cmp	r3, #1
 800815e:	dc19      	bgt.n	8008194 <_dtoa_r+0x904>
 8008160:	9b02      	ldr	r3, [sp, #8]
 8008162:	b9bb      	cbnz	r3, 8008194 <_dtoa_r+0x904>
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800816a:	b99b      	cbnz	r3, 8008194 <_dtoa_r+0x904>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008172:	0d1b      	lsrs	r3, r3, #20
 8008174:	051b      	lsls	r3, r3, #20
 8008176:	b183      	cbz	r3, 800819a <_dtoa_r+0x90a>
 8008178:	9b05      	ldr	r3, [sp, #20]
 800817a:	3301      	adds	r3, #1
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	9b06      	ldr	r3, [sp, #24]
 8008180:	3301      	adds	r3, #1
 8008182:	9306      	str	r3, [sp, #24]
 8008184:	f04f 0801 	mov.w	r8, #1
 8008188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818a:	2b00      	cmp	r3, #0
 800818c:	f47f af6f 	bne.w	800806e <_dtoa_r+0x7de>
 8008190:	2001      	movs	r0, #1
 8008192:	e774      	b.n	800807e <_dtoa_r+0x7ee>
 8008194:	f04f 0800 	mov.w	r8, #0
 8008198:	e7f6      	b.n	8008188 <_dtoa_r+0x8f8>
 800819a:	4698      	mov	r8, r3
 800819c:	e7f4      	b.n	8008188 <_dtoa_r+0x8f8>
 800819e:	d082      	beq.n	80080a6 <_dtoa_r+0x816>
 80081a0:	9a05      	ldr	r2, [sp, #20]
 80081a2:	331c      	adds	r3, #28
 80081a4:	441a      	add	r2, r3
 80081a6:	9205      	str	r2, [sp, #20]
 80081a8:	9a06      	ldr	r2, [sp, #24]
 80081aa:	441a      	add	r2, r3
 80081ac:	441d      	add	r5, r3
 80081ae:	9206      	str	r2, [sp, #24]
 80081b0:	e779      	b.n	80080a6 <_dtoa_r+0x816>
 80081b2:	4603      	mov	r3, r0
 80081b4:	e7f4      	b.n	80081a0 <_dtoa_r+0x910>
 80081b6:	9b04      	ldr	r3, [sp, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dc37      	bgt.n	800822c <_dtoa_r+0x99c>
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	dd34      	ble.n	800822c <_dtoa_r+0x99c>
 80081c2:	9b04      	ldr	r3, [sp, #16]
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	b963      	cbnz	r3, 80081e4 <_dtoa_r+0x954>
 80081ca:	4631      	mov	r1, r6
 80081cc:	2205      	movs	r2, #5
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 fab2 	bl	8008738 <__multadd>
 80081d4:	4601      	mov	r1, r0
 80081d6:	4606      	mov	r6, r0
 80081d8:	4650      	mov	r0, sl
 80081da:	f000 fcc7 	bl	8008b6c <__mcmp>
 80081de:	2800      	cmp	r0, #0
 80081e0:	f73f adbb 	bgt.w	8007d5a <_dtoa_r+0x4ca>
 80081e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e6:	9d00      	ldr	r5, [sp, #0]
 80081e8:	ea6f 0b03 	mvn.w	fp, r3
 80081ec:	f04f 0800 	mov.w	r8, #0
 80081f0:	4631      	mov	r1, r6
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 fa7e 	bl	80086f4 <_Bfree>
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	f43f aeab 	beq.w	8007f54 <_dtoa_r+0x6c4>
 80081fe:	f1b8 0f00 	cmp.w	r8, #0
 8008202:	d005      	beq.n	8008210 <_dtoa_r+0x980>
 8008204:	45b8      	cmp	r8, r7
 8008206:	d003      	beq.n	8008210 <_dtoa_r+0x980>
 8008208:	4641      	mov	r1, r8
 800820a:	4620      	mov	r0, r4
 800820c:	f000 fa72 	bl	80086f4 <_Bfree>
 8008210:	4639      	mov	r1, r7
 8008212:	4620      	mov	r0, r4
 8008214:	f000 fa6e 	bl	80086f4 <_Bfree>
 8008218:	e69c      	b.n	8007f54 <_dtoa_r+0x6c4>
 800821a:	2600      	movs	r6, #0
 800821c:	4637      	mov	r7, r6
 800821e:	e7e1      	b.n	80081e4 <_dtoa_r+0x954>
 8008220:	46bb      	mov	fp, r7
 8008222:	4637      	mov	r7, r6
 8008224:	e599      	b.n	8007d5a <_dtoa_r+0x4ca>
 8008226:	bf00      	nop
 8008228:	40240000 	.word	0x40240000
 800822c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 80c8 	beq.w	80083c4 <_dtoa_r+0xb34>
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	2d00      	cmp	r5, #0
 800823a:	dd05      	ble.n	8008248 <_dtoa_r+0x9b8>
 800823c:	4639      	mov	r1, r7
 800823e:	462a      	mov	r2, r5
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fc27 	bl	8008a94 <__lshift>
 8008246:	4607      	mov	r7, r0
 8008248:	f1b8 0f00 	cmp.w	r8, #0
 800824c:	d05b      	beq.n	8008306 <_dtoa_r+0xa76>
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fa0f 	bl	8008674 <_Balloc>
 8008256:	4605      	mov	r5, r0
 8008258:	b928      	cbnz	r0, 8008266 <_dtoa_r+0x9d6>
 800825a:	4b83      	ldr	r3, [pc, #524]	; (8008468 <_dtoa_r+0xbd8>)
 800825c:	4602      	mov	r2, r0
 800825e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008262:	f7ff bb2e 	b.w	80078c2 <_dtoa_r+0x32>
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	3202      	adds	r2, #2
 800826a:	0092      	lsls	r2, r2, #2
 800826c:	f107 010c 	add.w	r1, r7, #12
 8008270:	300c      	adds	r0, #12
 8008272:	f7ff fa74 	bl	800775e <memcpy>
 8008276:	2201      	movs	r2, #1
 8008278:	4629      	mov	r1, r5
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fc0a 	bl	8008a94 <__lshift>
 8008280:	9b00      	ldr	r3, [sp, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800828a:	4413      	add	r3, r2
 800828c:	9308      	str	r3, [sp, #32]
 800828e:	9b02      	ldr	r3, [sp, #8]
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	46b8      	mov	r8, r7
 8008296:	9306      	str	r3, [sp, #24]
 8008298:	4607      	mov	r7, r0
 800829a:	9b04      	ldr	r3, [sp, #16]
 800829c:	4631      	mov	r1, r6
 800829e:	3b01      	subs	r3, #1
 80082a0:	4650      	mov	r0, sl
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	f7ff fa69 	bl	800777a <quorem>
 80082a8:	4641      	mov	r1, r8
 80082aa:	9002      	str	r0, [sp, #8]
 80082ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082b0:	4650      	mov	r0, sl
 80082b2:	f000 fc5b 	bl	8008b6c <__mcmp>
 80082b6:	463a      	mov	r2, r7
 80082b8:	9005      	str	r0, [sp, #20]
 80082ba:	4631      	mov	r1, r6
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fc71 	bl	8008ba4 <__mdiff>
 80082c2:	68c2      	ldr	r2, [r0, #12]
 80082c4:	4605      	mov	r5, r0
 80082c6:	bb02      	cbnz	r2, 800830a <_dtoa_r+0xa7a>
 80082c8:	4601      	mov	r1, r0
 80082ca:	4650      	mov	r0, sl
 80082cc:	f000 fc4e 	bl	8008b6c <__mcmp>
 80082d0:	4602      	mov	r2, r0
 80082d2:	4629      	mov	r1, r5
 80082d4:	4620      	mov	r0, r4
 80082d6:	9209      	str	r2, [sp, #36]	; 0x24
 80082d8:	f000 fa0c 	bl	80086f4 <_Bfree>
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082e0:	9d04      	ldr	r5, [sp, #16]
 80082e2:	ea43 0102 	orr.w	r1, r3, r2
 80082e6:	9b06      	ldr	r3, [sp, #24]
 80082e8:	4319      	orrs	r1, r3
 80082ea:	d110      	bne.n	800830e <_dtoa_r+0xa7e>
 80082ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082f0:	d029      	beq.n	8008346 <_dtoa_r+0xab6>
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dd02      	ble.n	80082fe <_dtoa_r+0xa6e>
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	f883 9000 	strb.w	r9, [r3]
 8008304:	e774      	b.n	80081f0 <_dtoa_r+0x960>
 8008306:	4638      	mov	r0, r7
 8008308:	e7ba      	b.n	8008280 <_dtoa_r+0x9f0>
 800830a:	2201      	movs	r2, #1
 800830c:	e7e1      	b.n	80082d2 <_dtoa_r+0xa42>
 800830e:	9b05      	ldr	r3, [sp, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	db04      	blt.n	800831e <_dtoa_r+0xa8e>
 8008314:	9907      	ldr	r1, [sp, #28]
 8008316:	430b      	orrs	r3, r1
 8008318:	9906      	ldr	r1, [sp, #24]
 800831a:	430b      	orrs	r3, r1
 800831c:	d120      	bne.n	8008360 <_dtoa_r+0xad0>
 800831e:	2a00      	cmp	r2, #0
 8008320:	dded      	ble.n	80082fe <_dtoa_r+0xa6e>
 8008322:	4651      	mov	r1, sl
 8008324:	2201      	movs	r2, #1
 8008326:	4620      	mov	r0, r4
 8008328:	f000 fbb4 	bl	8008a94 <__lshift>
 800832c:	4631      	mov	r1, r6
 800832e:	4682      	mov	sl, r0
 8008330:	f000 fc1c 	bl	8008b6c <__mcmp>
 8008334:	2800      	cmp	r0, #0
 8008336:	dc03      	bgt.n	8008340 <_dtoa_r+0xab0>
 8008338:	d1e1      	bne.n	80082fe <_dtoa_r+0xa6e>
 800833a:	f019 0f01 	tst.w	r9, #1
 800833e:	d0de      	beq.n	80082fe <_dtoa_r+0xa6e>
 8008340:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008344:	d1d8      	bne.n	80082f8 <_dtoa_r+0xa68>
 8008346:	9a01      	ldr	r2, [sp, #4]
 8008348:	2339      	movs	r3, #57	; 0x39
 800834a:	7013      	strb	r3, [r2, #0]
 800834c:	462b      	mov	r3, r5
 800834e:	461d      	mov	r5, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008356:	2a39      	cmp	r2, #57	; 0x39
 8008358:	d06c      	beq.n	8008434 <_dtoa_r+0xba4>
 800835a:	3201      	adds	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	e747      	b.n	80081f0 <_dtoa_r+0x960>
 8008360:	2a00      	cmp	r2, #0
 8008362:	dd07      	ble.n	8008374 <_dtoa_r+0xae4>
 8008364:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008368:	d0ed      	beq.n	8008346 <_dtoa_r+0xab6>
 800836a:	9a01      	ldr	r2, [sp, #4]
 800836c:	f109 0301 	add.w	r3, r9, #1
 8008370:	7013      	strb	r3, [r2, #0]
 8008372:	e73d      	b.n	80081f0 <_dtoa_r+0x960>
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	9a08      	ldr	r2, [sp, #32]
 8008378:	f803 9c01 	strb.w	r9, [r3, #-1]
 800837c:	4293      	cmp	r3, r2
 800837e:	d043      	beq.n	8008408 <_dtoa_r+0xb78>
 8008380:	4651      	mov	r1, sl
 8008382:	2300      	movs	r3, #0
 8008384:	220a      	movs	r2, #10
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f9d6 	bl	8008738 <__multadd>
 800838c:	45b8      	cmp	r8, r7
 800838e:	4682      	mov	sl, r0
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	f04f 020a 	mov.w	r2, #10
 8008398:	4641      	mov	r1, r8
 800839a:	4620      	mov	r0, r4
 800839c:	d107      	bne.n	80083ae <_dtoa_r+0xb1e>
 800839e:	f000 f9cb 	bl	8008738 <__multadd>
 80083a2:	4680      	mov	r8, r0
 80083a4:	4607      	mov	r7, r0
 80083a6:	9b04      	ldr	r3, [sp, #16]
 80083a8:	3301      	adds	r3, #1
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	e775      	b.n	800829a <_dtoa_r+0xa0a>
 80083ae:	f000 f9c3 	bl	8008738 <__multadd>
 80083b2:	4639      	mov	r1, r7
 80083b4:	4680      	mov	r8, r0
 80083b6:	2300      	movs	r3, #0
 80083b8:	220a      	movs	r2, #10
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f9bc 	bl	8008738 <__multadd>
 80083c0:	4607      	mov	r7, r0
 80083c2:	e7f0      	b.n	80083a6 <_dtoa_r+0xb16>
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	9d00      	ldr	r5, [sp, #0]
 80083ca:	4631      	mov	r1, r6
 80083cc:	4650      	mov	r0, sl
 80083ce:	f7ff f9d4 	bl	800777a <quorem>
 80083d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80083d6:	9b00      	ldr	r3, [sp, #0]
 80083d8:	f805 9b01 	strb.w	r9, [r5], #1
 80083dc:	1aea      	subs	r2, r5, r3
 80083de:	9b01      	ldr	r3, [sp, #4]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	dd07      	ble.n	80083f4 <_dtoa_r+0xb64>
 80083e4:	4651      	mov	r1, sl
 80083e6:	2300      	movs	r3, #0
 80083e8:	220a      	movs	r2, #10
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 f9a4 	bl	8008738 <__multadd>
 80083f0:	4682      	mov	sl, r0
 80083f2:	e7ea      	b.n	80083ca <_dtoa_r+0xb3a>
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bfc8      	it	gt
 80083fa:	461d      	movgt	r5, r3
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	bfd8      	it	le
 8008400:	2501      	movle	r5, #1
 8008402:	441d      	add	r5, r3
 8008404:	f04f 0800 	mov.w	r8, #0
 8008408:	4651      	mov	r1, sl
 800840a:	2201      	movs	r2, #1
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fb41 	bl	8008a94 <__lshift>
 8008412:	4631      	mov	r1, r6
 8008414:	4682      	mov	sl, r0
 8008416:	f000 fba9 	bl	8008b6c <__mcmp>
 800841a:	2800      	cmp	r0, #0
 800841c:	dc96      	bgt.n	800834c <_dtoa_r+0xabc>
 800841e:	d102      	bne.n	8008426 <_dtoa_r+0xb96>
 8008420:	f019 0f01 	tst.w	r9, #1
 8008424:	d192      	bne.n	800834c <_dtoa_r+0xabc>
 8008426:	462b      	mov	r3, r5
 8008428:	461d      	mov	r5, r3
 800842a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800842e:	2a30      	cmp	r2, #48	; 0x30
 8008430:	d0fa      	beq.n	8008428 <_dtoa_r+0xb98>
 8008432:	e6dd      	b.n	80081f0 <_dtoa_r+0x960>
 8008434:	9a00      	ldr	r2, [sp, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d189      	bne.n	800834e <_dtoa_r+0xabe>
 800843a:	f10b 0b01 	add.w	fp, fp, #1
 800843e:	2331      	movs	r3, #49	; 0x31
 8008440:	e796      	b.n	8008370 <_dtoa_r+0xae0>
 8008442:	4b0a      	ldr	r3, [pc, #40]	; (800846c <_dtoa_r+0xbdc>)
 8008444:	f7ff ba99 	b.w	800797a <_dtoa_r+0xea>
 8008448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800844a:	2b00      	cmp	r3, #0
 800844c:	f47f aa6d 	bne.w	800792a <_dtoa_r+0x9a>
 8008450:	4b07      	ldr	r3, [pc, #28]	; (8008470 <_dtoa_r+0xbe0>)
 8008452:	f7ff ba92 	b.w	800797a <_dtoa_r+0xea>
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	dcb5      	bgt.n	80083c8 <_dtoa_r+0xb38>
 800845c:	9b07      	ldr	r3, [sp, #28]
 800845e:	2b02      	cmp	r3, #2
 8008460:	f73f aeb1 	bgt.w	80081c6 <_dtoa_r+0x936>
 8008464:	e7b0      	b.n	80083c8 <_dtoa_r+0xb38>
 8008466:	bf00      	nop
 8008468:	08009687 	.word	0x08009687
 800846c:	080095e7 	.word	0x080095e7
 8008470:	0800960b 	.word	0x0800960b

08008474 <_free_r>:
 8008474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008476:	2900      	cmp	r1, #0
 8008478:	d044      	beq.n	8008504 <_free_r+0x90>
 800847a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847e:	9001      	str	r0, [sp, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f1a1 0404 	sub.w	r4, r1, #4
 8008486:	bfb8      	it	lt
 8008488:	18e4      	addlt	r4, r4, r3
 800848a:	f000 f8e7 	bl	800865c <__malloc_lock>
 800848e:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <_free_r+0x94>)
 8008490:	9801      	ldr	r0, [sp, #4]
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	b933      	cbnz	r3, 80084a4 <_free_r+0x30>
 8008496:	6063      	str	r3, [r4, #4]
 8008498:	6014      	str	r4, [r2, #0]
 800849a:	b003      	add	sp, #12
 800849c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a0:	f000 b8e2 	b.w	8008668 <__malloc_unlock>
 80084a4:	42a3      	cmp	r3, r4
 80084a6:	d908      	bls.n	80084ba <_free_r+0x46>
 80084a8:	6825      	ldr	r5, [r4, #0]
 80084aa:	1961      	adds	r1, r4, r5
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf01      	itttt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	1949      	addeq	r1, r1, r5
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	e7ed      	b.n	8008496 <_free_r+0x22>
 80084ba:	461a      	mov	r2, r3
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	b10b      	cbz	r3, 80084c4 <_free_r+0x50>
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	d9fa      	bls.n	80084ba <_free_r+0x46>
 80084c4:	6811      	ldr	r1, [r2, #0]
 80084c6:	1855      	adds	r5, r2, r1
 80084c8:	42a5      	cmp	r5, r4
 80084ca:	d10b      	bne.n	80084e4 <_free_r+0x70>
 80084cc:	6824      	ldr	r4, [r4, #0]
 80084ce:	4421      	add	r1, r4
 80084d0:	1854      	adds	r4, r2, r1
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	6011      	str	r1, [r2, #0]
 80084d6:	d1e0      	bne.n	800849a <_free_r+0x26>
 80084d8:	681c      	ldr	r4, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	6053      	str	r3, [r2, #4]
 80084de:	440c      	add	r4, r1
 80084e0:	6014      	str	r4, [r2, #0]
 80084e2:	e7da      	b.n	800849a <_free_r+0x26>
 80084e4:	d902      	bls.n	80084ec <_free_r+0x78>
 80084e6:	230c      	movs	r3, #12
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	e7d6      	b.n	800849a <_free_r+0x26>
 80084ec:	6825      	ldr	r5, [r4, #0]
 80084ee:	1961      	adds	r1, r4, r5
 80084f0:	428b      	cmp	r3, r1
 80084f2:	bf04      	itt	eq
 80084f4:	6819      	ldreq	r1, [r3, #0]
 80084f6:	685b      	ldreq	r3, [r3, #4]
 80084f8:	6063      	str	r3, [r4, #4]
 80084fa:	bf04      	itt	eq
 80084fc:	1949      	addeq	r1, r1, r5
 80084fe:	6021      	streq	r1, [r4, #0]
 8008500:	6054      	str	r4, [r2, #4]
 8008502:	e7ca      	b.n	800849a <_free_r+0x26>
 8008504:	b003      	add	sp, #12
 8008506:	bd30      	pop	{r4, r5, pc}
 8008508:	20004db4 	.word	0x20004db4

0800850c <malloc>:
 800850c:	4b02      	ldr	r3, [pc, #8]	; (8008518 <malloc+0xc>)
 800850e:	4601      	mov	r1, r0
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	f000 b823 	b.w	800855c <_malloc_r>
 8008516:	bf00      	nop
 8008518:	200000cc 	.word	0x200000cc

0800851c <sbrk_aligned>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4e0e      	ldr	r6, [pc, #56]	; (8008558 <sbrk_aligned+0x3c>)
 8008520:	460c      	mov	r4, r1
 8008522:	6831      	ldr	r1, [r6, #0]
 8008524:	4605      	mov	r5, r0
 8008526:	b911      	cbnz	r1, 800852e <sbrk_aligned+0x12>
 8008528:	f000 fea8 	bl	800927c <_sbrk_r>
 800852c:	6030      	str	r0, [r6, #0]
 800852e:	4621      	mov	r1, r4
 8008530:	4628      	mov	r0, r5
 8008532:	f000 fea3 	bl	800927c <_sbrk_r>
 8008536:	1c43      	adds	r3, r0, #1
 8008538:	d00a      	beq.n	8008550 <sbrk_aligned+0x34>
 800853a:	1cc4      	adds	r4, r0, #3
 800853c:	f024 0403 	bic.w	r4, r4, #3
 8008540:	42a0      	cmp	r0, r4
 8008542:	d007      	beq.n	8008554 <sbrk_aligned+0x38>
 8008544:	1a21      	subs	r1, r4, r0
 8008546:	4628      	mov	r0, r5
 8008548:	f000 fe98 	bl	800927c <_sbrk_r>
 800854c:	3001      	adds	r0, #1
 800854e:	d101      	bne.n	8008554 <sbrk_aligned+0x38>
 8008550:	f04f 34ff 	mov.w	r4, #4294967295
 8008554:	4620      	mov	r0, r4
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	20004db8 	.word	0x20004db8

0800855c <_malloc_r>:
 800855c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008560:	1ccd      	adds	r5, r1, #3
 8008562:	f025 0503 	bic.w	r5, r5, #3
 8008566:	3508      	adds	r5, #8
 8008568:	2d0c      	cmp	r5, #12
 800856a:	bf38      	it	cc
 800856c:	250c      	movcc	r5, #12
 800856e:	2d00      	cmp	r5, #0
 8008570:	4607      	mov	r7, r0
 8008572:	db01      	blt.n	8008578 <_malloc_r+0x1c>
 8008574:	42a9      	cmp	r1, r5
 8008576:	d905      	bls.n	8008584 <_malloc_r+0x28>
 8008578:	230c      	movs	r3, #12
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	2600      	movs	r6, #0
 800857e:	4630      	mov	r0, r6
 8008580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008584:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008658 <_malloc_r+0xfc>
 8008588:	f000 f868 	bl	800865c <__malloc_lock>
 800858c:	f8d8 3000 	ldr.w	r3, [r8]
 8008590:	461c      	mov	r4, r3
 8008592:	bb5c      	cbnz	r4, 80085ec <_malloc_r+0x90>
 8008594:	4629      	mov	r1, r5
 8008596:	4638      	mov	r0, r7
 8008598:	f7ff ffc0 	bl	800851c <sbrk_aligned>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	4604      	mov	r4, r0
 80085a0:	d155      	bne.n	800864e <_malloc_r+0xf2>
 80085a2:	f8d8 4000 	ldr.w	r4, [r8]
 80085a6:	4626      	mov	r6, r4
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	d145      	bne.n	8008638 <_malloc_r+0xdc>
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	d048      	beq.n	8008642 <_malloc_r+0xe6>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	4631      	mov	r1, r6
 80085b4:	4638      	mov	r0, r7
 80085b6:	eb04 0903 	add.w	r9, r4, r3
 80085ba:	f000 fe5f 	bl	800927c <_sbrk_r>
 80085be:	4581      	cmp	r9, r0
 80085c0:	d13f      	bne.n	8008642 <_malloc_r+0xe6>
 80085c2:	6821      	ldr	r1, [r4, #0]
 80085c4:	1a6d      	subs	r5, r5, r1
 80085c6:	4629      	mov	r1, r5
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff ffa7 	bl	800851c <sbrk_aligned>
 80085ce:	3001      	adds	r0, #1
 80085d0:	d037      	beq.n	8008642 <_malloc_r+0xe6>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	442b      	add	r3, r5
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	f8d8 3000 	ldr.w	r3, [r8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d038      	beq.n	8008652 <_malloc_r+0xf6>
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	42a2      	cmp	r2, r4
 80085e4:	d12b      	bne.n	800863e <_malloc_r+0xe2>
 80085e6:	2200      	movs	r2, #0
 80085e8:	605a      	str	r2, [r3, #4]
 80085ea:	e00f      	b.n	800860c <_malloc_r+0xb0>
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	1b52      	subs	r2, r2, r5
 80085f0:	d41f      	bmi.n	8008632 <_malloc_r+0xd6>
 80085f2:	2a0b      	cmp	r2, #11
 80085f4:	d917      	bls.n	8008626 <_malloc_r+0xca>
 80085f6:	1961      	adds	r1, r4, r5
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	6025      	str	r5, [r4, #0]
 80085fc:	bf18      	it	ne
 80085fe:	6059      	strne	r1, [r3, #4]
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	bf08      	it	eq
 8008604:	f8c8 1000 	streq.w	r1, [r8]
 8008608:	5162      	str	r2, [r4, r5]
 800860a:	604b      	str	r3, [r1, #4]
 800860c:	4638      	mov	r0, r7
 800860e:	f104 060b 	add.w	r6, r4, #11
 8008612:	f000 f829 	bl	8008668 <__malloc_unlock>
 8008616:	f026 0607 	bic.w	r6, r6, #7
 800861a:	1d23      	adds	r3, r4, #4
 800861c:	1af2      	subs	r2, r6, r3
 800861e:	d0ae      	beq.n	800857e <_malloc_r+0x22>
 8008620:	1b9b      	subs	r3, r3, r6
 8008622:	50a3      	str	r3, [r4, r2]
 8008624:	e7ab      	b.n	800857e <_malloc_r+0x22>
 8008626:	42a3      	cmp	r3, r4
 8008628:	6862      	ldr	r2, [r4, #4]
 800862a:	d1dd      	bne.n	80085e8 <_malloc_r+0x8c>
 800862c:	f8c8 2000 	str.w	r2, [r8]
 8008630:	e7ec      	b.n	800860c <_malloc_r+0xb0>
 8008632:	4623      	mov	r3, r4
 8008634:	6864      	ldr	r4, [r4, #4]
 8008636:	e7ac      	b.n	8008592 <_malloc_r+0x36>
 8008638:	4634      	mov	r4, r6
 800863a:	6876      	ldr	r6, [r6, #4]
 800863c:	e7b4      	b.n	80085a8 <_malloc_r+0x4c>
 800863e:	4613      	mov	r3, r2
 8008640:	e7cc      	b.n	80085dc <_malloc_r+0x80>
 8008642:	230c      	movs	r3, #12
 8008644:	603b      	str	r3, [r7, #0]
 8008646:	4638      	mov	r0, r7
 8008648:	f000 f80e 	bl	8008668 <__malloc_unlock>
 800864c:	e797      	b.n	800857e <_malloc_r+0x22>
 800864e:	6025      	str	r5, [r4, #0]
 8008650:	e7dc      	b.n	800860c <_malloc_r+0xb0>
 8008652:	605b      	str	r3, [r3, #4]
 8008654:	deff      	udf	#255	; 0xff
 8008656:	bf00      	nop
 8008658:	20004db4 	.word	0x20004db4

0800865c <__malloc_lock>:
 800865c:	4801      	ldr	r0, [pc, #4]	; (8008664 <__malloc_lock+0x8>)
 800865e:	f7ff b87c 	b.w	800775a <__retarget_lock_acquire_recursive>
 8008662:	bf00      	nop
 8008664:	20004db0 	.word	0x20004db0

08008668 <__malloc_unlock>:
 8008668:	4801      	ldr	r0, [pc, #4]	; (8008670 <__malloc_unlock+0x8>)
 800866a:	f7ff b877 	b.w	800775c <__retarget_lock_release_recursive>
 800866e:	bf00      	nop
 8008670:	20004db0 	.word	0x20004db0

08008674 <_Balloc>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	69c6      	ldr	r6, [r0, #28]
 8008678:	4604      	mov	r4, r0
 800867a:	460d      	mov	r5, r1
 800867c:	b976      	cbnz	r6, 800869c <_Balloc+0x28>
 800867e:	2010      	movs	r0, #16
 8008680:	f7ff ff44 	bl	800850c <malloc>
 8008684:	4602      	mov	r2, r0
 8008686:	61e0      	str	r0, [r4, #28]
 8008688:	b920      	cbnz	r0, 8008694 <_Balloc+0x20>
 800868a:	4b18      	ldr	r3, [pc, #96]	; (80086ec <_Balloc+0x78>)
 800868c:	4818      	ldr	r0, [pc, #96]	; (80086f0 <_Balloc+0x7c>)
 800868e:	216b      	movs	r1, #107	; 0x6b
 8008690:	f000 fe04 	bl	800929c <__assert_func>
 8008694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008698:	6006      	str	r6, [r0, #0]
 800869a:	60c6      	str	r6, [r0, #12]
 800869c:	69e6      	ldr	r6, [r4, #28]
 800869e:	68f3      	ldr	r3, [r6, #12]
 80086a0:	b183      	cbz	r3, 80086c4 <_Balloc+0x50>
 80086a2:	69e3      	ldr	r3, [r4, #28]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086aa:	b9b8      	cbnz	r0, 80086dc <_Balloc+0x68>
 80086ac:	2101      	movs	r1, #1
 80086ae:	fa01 f605 	lsl.w	r6, r1, r5
 80086b2:	1d72      	adds	r2, r6, #5
 80086b4:	0092      	lsls	r2, r2, #2
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 fe0e 	bl	80092d8 <_calloc_r>
 80086bc:	b160      	cbz	r0, 80086d8 <_Balloc+0x64>
 80086be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086c2:	e00e      	b.n	80086e2 <_Balloc+0x6e>
 80086c4:	2221      	movs	r2, #33	; 0x21
 80086c6:	2104      	movs	r1, #4
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fe05 	bl	80092d8 <_calloc_r>
 80086ce:	69e3      	ldr	r3, [r4, #28]
 80086d0:	60f0      	str	r0, [r6, #12]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e4      	bne.n	80086a2 <_Balloc+0x2e>
 80086d8:	2000      	movs	r0, #0
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	6802      	ldr	r2, [r0, #0]
 80086de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086e2:	2300      	movs	r3, #0
 80086e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086e8:	e7f7      	b.n	80086da <_Balloc+0x66>
 80086ea:	bf00      	nop
 80086ec:	08009618 	.word	0x08009618
 80086f0:	08009698 	.word	0x08009698

080086f4 <_Bfree>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	69c6      	ldr	r6, [r0, #28]
 80086f8:	4605      	mov	r5, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	b976      	cbnz	r6, 800871c <_Bfree+0x28>
 80086fe:	2010      	movs	r0, #16
 8008700:	f7ff ff04 	bl	800850c <malloc>
 8008704:	4602      	mov	r2, r0
 8008706:	61e8      	str	r0, [r5, #28]
 8008708:	b920      	cbnz	r0, 8008714 <_Bfree+0x20>
 800870a:	4b09      	ldr	r3, [pc, #36]	; (8008730 <_Bfree+0x3c>)
 800870c:	4809      	ldr	r0, [pc, #36]	; (8008734 <_Bfree+0x40>)
 800870e:	218f      	movs	r1, #143	; 0x8f
 8008710:	f000 fdc4 	bl	800929c <__assert_func>
 8008714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008718:	6006      	str	r6, [r0, #0]
 800871a:	60c6      	str	r6, [r0, #12]
 800871c:	b13c      	cbz	r4, 800872e <_Bfree+0x3a>
 800871e:	69eb      	ldr	r3, [r5, #28]
 8008720:	6862      	ldr	r2, [r4, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008728:	6021      	str	r1, [r4, #0]
 800872a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	08009618 	.word	0x08009618
 8008734:	08009698 	.word	0x08009698

08008738 <__multadd>:
 8008738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873c:	690d      	ldr	r5, [r1, #16]
 800873e:	4607      	mov	r7, r0
 8008740:	460c      	mov	r4, r1
 8008742:	461e      	mov	r6, r3
 8008744:	f101 0c14 	add.w	ip, r1, #20
 8008748:	2000      	movs	r0, #0
 800874a:	f8dc 3000 	ldr.w	r3, [ip]
 800874e:	b299      	uxth	r1, r3
 8008750:	fb02 6101 	mla	r1, r2, r1, r6
 8008754:	0c1e      	lsrs	r6, r3, #16
 8008756:	0c0b      	lsrs	r3, r1, #16
 8008758:	fb02 3306 	mla	r3, r2, r6, r3
 800875c:	b289      	uxth	r1, r1
 800875e:	3001      	adds	r0, #1
 8008760:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008764:	4285      	cmp	r5, r0
 8008766:	f84c 1b04 	str.w	r1, [ip], #4
 800876a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800876e:	dcec      	bgt.n	800874a <__multadd+0x12>
 8008770:	b30e      	cbz	r6, 80087b6 <__multadd+0x7e>
 8008772:	68a3      	ldr	r3, [r4, #8]
 8008774:	42ab      	cmp	r3, r5
 8008776:	dc19      	bgt.n	80087ac <__multadd+0x74>
 8008778:	6861      	ldr	r1, [r4, #4]
 800877a:	4638      	mov	r0, r7
 800877c:	3101      	adds	r1, #1
 800877e:	f7ff ff79 	bl	8008674 <_Balloc>
 8008782:	4680      	mov	r8, r0
 8008784:	b928      	cbnz	r0, 8008792 <__multadd+0x5a>
 8008786:	4602      	mov	r2, r0
 8008788:	4b0c      	ldr	r3, [pc, #48]	; (80087bc <__multadd+0x84>)
 800878a:	480d      	ldr	r0, [pc, #52]	; (80087c0 <__multadd+0x88>)
 800878c:	21ba      	movs	r1, #186	; 0xba
 800878e:	f000 fd85 	bl	800929c <__assert_func>
 8008792:	6922      	ldr	r2, [r4, #16]
 8008794:	3202      	adds	r2, #2
 8008796:	f104 010c 	add.w	r1, r4, #12
 800879a:	0092      	lsls	r2, r2, #2
 800879c:	300c      	adds	r0, #12
 800879e:	f7fe ffde 	bl	800775e <memcpy>
 80087a2:	4621      	mov	r1, r4
 80087a4:	4638      	mov	r0, r7
 80087a6:	f7ff ffa5 	bl	80086f4 <_Bfree>
 80087aa:	4644      	mov	r4, r8
 80087ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087b0:	3501      	adds	r5, #1
 80087b2:	615e      	str	r6, [r3, #20]
 80087b4:	6125      	str	r5, [r4, #16]
 80087b6:	4620      	mov	r0, r4
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087bc:	08009687 	.word	0x08009687
 80087c0:	08009698 	.word	0x08009698

080087c4 <__hi0bits>:
 80087c4:	0c03      	lsrs	r3, r0, #16
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	b9d3      	cbnz	r3, 8008800 <__hi0bits+0x3c>
 80087ca:	0400      	lsls	r0, r0, #16
 80087cc:	2310      	movs	r3, #16
 80087ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087d2:	bf04      	itt	eq
 80087d4:	0200      	lsleq	r0, r0, #8
 80087d6:	3308      	addeq	r3, #8
 80087d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087dc:	bf04      	itt	eq
 80087de:	0100      	lsleq	r0, r0, #4
 80087e0:	3304      	addeq	r3, #4
 80087e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087e6:	bf04      	itt	eq
 80087e8:	0080      	lsleq	r0, r0, #2
 80087ea:	3302      	addeq	r3, #2
 80087ec:	2800      	cmp	r0, #0
 80087ee:	db05      	blt.n	80087fc <__hi0bits+0x38>
 80087f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80087f4:	f103 0301 	add.w	r3, r3, #1
 80087f8:	bf08      	it	eq
 80087fa:	2320      	moveq	r3, #32
 80087fc:	4618      	mov	r0, r3
 80087fe:	4770      	bx	lr
 8008800:	2300      	movs	r3, #0
 8008802:	e7e4      	b.n	80087ce <__hi0bits+0xa>

08008804 <__lo0bits>:
 8008804:	6803      	ldr	r3, [r0, #0]
 8008806:	f013 0207 	ands.w	r2, r3, #7
 800880a:	d00c      	beq.n	8008826 <__lo0bits+0x22>
 800880c:	07d9      	lsls	r1, r3, #31
 800880e:	d422      	bmi.n	8008856 <__lo0bits+0x52>
 8008810:	079a      	lsls	r2, r3, #30
 8008812:	bf49      	itett	mi
 8008814:	085b      	lsrmi	r3, r3, #1
 8008816:	089b      	lsrpl	r3, r3, #2
 8008818:	6003      	strmi	r3, [r0, #0]
 800881a:	2201      	movmi	r2, #1
 800881c:	bf5c      	itt	pl
 800881e:	6003      	strpl	r3, [r0, #0]
 8008820:	2202      	movpl	r2, #2
 8008822:	4610      	mov	r0, r2
 8008824:	4770      	bx	lr
 8008826:	b299      	uxth	r1, r3
 8008828:	b909      	cbnz	r1, 800882e <__lo0bits+0x2a>
 800882a:	0c1b      	lsrs	r3, r3, #16
 800882c:	2210      	movs	r2, #16
 800882e:	b2d9      	uxtb	r1, r3
 8008830:	b909      	cbnz	r1, 8008836 <__lo0bits+0x32>
 8008832:	3208      	adds	r2, #8
 8008834:	0a1b      	lsrs	r3, r3, #8
 8008836:	0719      	lsls	r1, r3, #28
 8008838:	bf04      	itt	eq
 800883a:	091b      	lsreq	r3, r3, #4
 800883c:	3204      	addeq	r2, #4
 800883e:	0799      	lsls	r1, r3, #30
 8008840:	bf04      	itt	eq
 8008842:	089b      	lsreq	r3, r3, #2
 8008844:	3202      	addeq	r2, #2
 8008846:	07d9      	lsls	r1, r3, #31
 8008848:	d403      	bmi.n	8008852 <__lo0bits+0x4e>
 800884a:	085b      	lsrs	r3, r3, #1
 800884c:	f102 0201 	add.w	r2, r2, #1
 8008850:	d003      	beq.n	800885a <__lo0bits+0x56>
 8008852:	6003      	str	r3, [r0, #0]
 8008854:	e7e5      	b.n	8008822 <__lo0bits+0x1e>
 8008856:	2200      	movs	r2, #0
 8008858:	e7e3      	b.n	8008822 <__lo0bits+0x1e>
 800885a:	2220      	movs	r2, #32
 800885c:	e7e1      	b.n	8008822 <__lo0bits+0x1e>
	...

08008860 <__i2b>:
 8008860:	b510      	push	{r4, lr}
 8008862:	460c      	mov	r4, r1
 8008864:	2101      	movs	r1, #1
 8008866:	f7ff ff05 	bl	8008674 <_Balloc>
 800886a:	4602      	mov	r2, r0
 800886c:	b928      	cbnz	r0, 800887a <__i2b+0x1a>
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <__i2b+0x24>)
 8008870:	4805      	ldr	r0, [pc, #20]	; (8008888 <__i2b+0x28>)
 8008872:	f240 1145 	movw	r1, #325	; 0x145
 8008876:	f000 fd11 	bl	800929c <__assert_func>
 800887a:	2301      	movs	r3, #1
 800887c:	6144      	str	r4, [r0, #20]
 800887e:	6103      	str	r3, [r0, #16]
 8008880:	bd10      	pop	{r4, pc}
 8008882:	bf00      	nop
 8008884:	08009687 	.word	0x08009687
 8008888:	08009698 	.word	0x08009698

0800888c <__multiply>:
 800888c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008890:	4691      	mov	r9, r2
 8008892:	690a      	ldr	r2, [r1, #16]
 8008894:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008898:	429a      	cmp	r2, r3
 800889a:	bfb8      	it	lt
 800889c:	460b      	movlt	r3, r1
 800889e:	460c      	mov	r4, r1
 80088a0:	bfbc      	itt	lt
 80088a2:	464c      	movlt	r4, r9
 80088a4:	4699      	movlt	r9, r3
 80088a6:	6927      	ldr	r7, [r4, #16]
 80088a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088ac:	68a3      	ldr	r3, [r4, #8]
 80088ae:	6861      	ldr	r1, [r4, #4]
 80088b0:	eb07 060a 	add.w	r6, r7, sl
 80088b4:	42b3      	cmp	r3, r6
 80088b6:	b085      	sub	sp, #20
 80088b8:	bfb8      	it	lt
 80088ba:	3101      	addlt	r1, #1
 80088bc:	f7ff feda 	bl	8008674 <_Balloc>
 80088c0:	b930      	cbnz	r0, 80088d0 <__multiply+0x44>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b44      	ldr	r3, [pc, #272]	; (80089d8 <__multiply+0x14c>)
 80088c6:	4845      	ldr	r0, [pc, #276]	; (80089dc <__multiply+0x150>)
 80088c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80088cc:	f000 fce6 	bl	800929c <__assert_func>
 80088d0:	f100 0514 	add.w	r5, r0, #20
 80088d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088d8:	462b      	mov	r3, r5
 80088da:	2200      	movs	r2, #0
 80088dc:	4543      	cmp	r3, r8
 80088de:	d321      	bcc.n	8008924 <__multiply+0x98>
 80088e0:	f104 0314 	add.w	r3, r4, #20
 80088e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088e8:	f109 0314 	add.w	r3, r9, #20
 80088ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80088f0:	9202      	str	r2, [sp, #8]
 80088f2:	1b3a      	subs	r2, r7, r4
 80088f4:	3a15      	subs	r2, #21
 80088f6:	f022 0203 	bic.w	r2, r2, #3
 80088fa:	3204      	adds	r2, #4
 80088fc:	f104 0115 	add.w	r1, r4, #21
 8008900:	428f      	cmp	r7, r1
 8008902:	bf38      	it	cc
 8008904:	2204      	movcc	r2, #4
 8008906:	9201      	str	r2, [sp, #4]
 8008908:	9a02      	ldr	r2, [sp, #8]
 800890a:	9303      	str	r3, [sp, #12]
 800890c:	429a      	cmp	r2, r3
 800890e:	d80c      	bhi.n	800892a <__multiply+0x9e>
 8008910:	2e00      	cmp	r6, #0
 8008912:	dd03      	ble.n	800891c <__multiply+0x90>
 8008914:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008918:	2b00      	cmp	r3, #0
 800891a:	d05b      	beq.n	80089d4 <__multiply+0x148>
 800891c:	6106      	str	r6, [r0, #16]
 800891e:	b005      	add	sp, #20
 8008920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008924:	f843 2b04 	str.w	r2, [r3], #4
 8008928:	e7d8      	b.n	80088dc <__multiply+0x50>
 800892a:	f8b3 a000 	ldrh.w	sl, [r3]
 800892e:	f1ba 0f00 	cmp.w	sl, #0
 8008932:	d024      	beq.n	800897e <__multiply+0xf2>
 8008934:	f104 0e14 	add.w	lr, r4, #20
 8008938:	46a9      	mov	r9, r5
 800893a:	f04f 0c00 	mov.w	ip, #0
 800893e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008942:	f8d9 1000 	ldr.w	r1, [r9]
 8008946:	fa1f fb82 	uxth.w	fp, r2
 800894a:	b289      	uxth	r1, r1
 800894c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008950:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008954:	f8d9 2000 	ldr.w	r2, [r9]
 8008958:	4461      	add	r1, ip
 800895a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800895e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008962:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008966:	b289      	uxth	r1, r1
 8008968:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800896c:	4577      	cmp	r7, lr
 800896e:	f849 1b04 	str.w	r1, [r9], #4
 8008972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008976:	d8e2      	bhi.n	800893e <__multiply+0xb2>
 8008978:	9a01      	ldr	r2, [sp, #4]
 800897a:	f845 c002 	str.w	ip, [r5, r2]
 800897e:	9a03      	ldr	r2, [sp, #12]
 8008980:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008984:	3304      	adds	r3, #4
 8008986:	f1b9 0f00 	cmp.w	r9, #0
 800898a:	d021      	beq.n	80089d0 <__multiply+0x144>
 800898c:	6829      	ldr	r1, [r5, #0]
 800898e:	f104 0c14 	add.w	ip, r4, #20
 8008992:	46ae      	mov	lr, r5
 8008994:	f04f 0a00 	mov.w	sl, #0
 8008998:	f8bc b000 	ldrh.w	fp, [ip]
 800899c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089a0:	fb09 220b 	mla	r2, r9, fp, r2
 80089a4:	4452      	add	r2, sl
 80089a6:	b289      	uxth	r1, r1
 80089a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089ac:	f84e 1b04 	str.w	r1, [lr], #4
 80089b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80089b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089b8:	f8be 1000 	ldrh.w	r1, [lr]
 80089bc:	fb09 110a 	mla	r1, r9, sl, r1
 80089c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80089c4:	4567      	cmp	r7, ip
 80089c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089ca:	d8e5      	bhi.n	8008998 <__multiply+0x10c>
 80089cc:	9a01      	ldr	r2, [sp, #4]
 80089ce:	50a9      	str	r1, [r5, r2]
 80089d0:	3504      	adds	r5, #4
 80089d2:	e799      	b.n	8008908 <__multiply+0x7c>
 80089d4:	3e01      	subs	r6, #1
 80089d6:	e79b      	b.n	8008910 <__multiply+0x84>
 80089d8:	08009687 	.word	0x08009687
 80089dc:	08009698 	.word	0x08009698

080089e0 <__pow5mult>:
 80089e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e4:	4615      	mov	r5, r2
 80089e6:	f012 0203 	ands.w	r2, r2, #3
 80089ea:	4606      	mov	r6, r0
 80089ec:	460f      	mov	r7, r1
 80089ee:	d007      	beq.n	8008a00 <__pow5mult+0x20>
 80089f0:	4c25      	ldr	r4, [pc, #148]	; (8008a88 <__pow5mult+0xa8>)
 80089f2:	3a01      	subs	r2, #1
 80089f4:	2300      	movs	r3, #0
 80089f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089fa:	f7ff fe9d 	bl	8008738 <__multadd>
 80089fe:	4607      	mov	r7, r0
 8008a00:	10ad      	asrs	r5, r5, #2
 8008a02:	d03d      	beq.n	8008a80 <__pow5mult+0xa0>
 8008a04:	69f4      	ldr	r4, [r6, #28]
 8008a06:	b97c      	cbnz	r4, 8008a28 <__pow5mult+0x48>
 8008a08:	2010      	movs	r0, #16
 8008a0a:	f7ff fd7f 	bl	800850c <malloc>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	61f0      	str	r0, [r6, #28]
 8008a12:	b928      	cbnz	r0, 8008a20 <__pow5mult+0x40>
 8008a14:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <__pow5mult+0xac>)
 8008a16:	481e      	ldr	r0, [pc, #120]	; (8008a90 <__pow5mult+0xb0>)
 8008a18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008a1c:	f000 fc3e 	bl	800929c <__assert_func>
 8008a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a24:	6004      	str	r4, [r0, #0]
 8008a26:	60c4      	str	r4, [r0, #12]
 8008a28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008a2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a30:	b94c      	cbnz	r4, 8008a46 <__pow5mult+0x66>
 8008a32:	f240 2171 	movw	r1, #625	; 0x271
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff ff12 	bl	8008860 <__i2b>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a42:	4604      	mov	r4, r0
 8008a44:	6003      	str	r3, [r0, #0]
 8008a46:	f04f 0900 	mov.w	r9, #0
 8008a4a:	07eb      	lsls	r3, r5, #31
 8008a4c:	d50a      	bpl.n	8008a64 <__pow5mult+0x84>
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4622      	mov	r2, r4
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7ff ff1a 	bl	800888c <__multiply>
 8008a58:	4639      	mov	r1, r7
 8008a5a:	4680      	mov	r8, r0
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f7ff fe49 	bl	80086f4 <_Bfree>
 8008a62:	4647      	mov	r7, r8
 8008a64:	106d      	asrs	r5, r5, #1
 8008a66:	d00b      	beq.n	8008a80 <__pow5mult+0xa0>
 8008a68:	6820      	ldr	r0, [r4, #0]
 8008a6a:	b938      	cbnz	r0, 8008a7c <__pow5mult+0x9c>
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7ff ff0b 	bl	800888c <__multiply>
 8008a76:	6020      	str	r0, [r4, #0]
 8008a78:	f8c0 9000 	str.w	r9, [r0]
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	e7e4      	b.n	8008a4a <__pow5mult+0x6a>
 8008a80:	4638      	mov	r0, r7
 8008a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a86:	bf00      	nop
 8008a88:	080097e8 	.word	0x080097e8
 8008a8c:	08009618 	.word	0x08009618
 8008a90:	08009698 	.word	0x08009698

08008a94 <__lshift>:
 8008a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a98:	460c      	mov	r4, r1
 8008a9a:	6849      	ldr	r1, [r1, #4]
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aa2:	68a3      	ldr	r3, [r4, #8]
 8008aa4:	4607      	mov	r7, r0
 8008aa6:	4691      	mov	r9, r2
 8008aa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008aac:	f108 0601 	add.w	r6, r8, #1
 8008ab0:	42b3      	cmp	r3, r6
 8008ab2:	db0b      	blt.n	8008acc <__lshift+0x38>
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7ff fddd 	bl	8008674 <_Balloc>
 8008aba:	4605      	mov	r5, r0
 8008abc:	b948      	cbnz	r0, 8008ad2 <__lshift+0x3e>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b28      	ldr	r3, [pc, #160]	; (8008b64 <__lshift+0xd0>)
 8008ac2:	4829      	ldr	r0, [pc, #164]	; (8008b68 <__lshift+0xd4>)
 8008ac4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008ac8:	f000 fbe8 	bl	800929c <__assert_func>
 8008acc:	3101      	adds	r1, #1
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	e7ee      	b.n	8008ab0 <__lshift+0x1c>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f100 0114 	add.w	r1, r0, #20
 8008ad8:	f100 0210 	add.w	r2, r0, #16
 8008adc:	4618      	mov	r0, r3
 8008ade:	4553      	cmp	r3, sl
 8008ae0:	db33      	blt.n	8008b4a <__lshift+0xb6>
 8008ae2:	6920      	ldr	r0, [r4, #16]
 8008ae4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ae8:	f104 0314 	add.w	r3, r4, #20
 8008aec:	f019 091f 	ands.w	r9, r9, #31
 8008af0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008af4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008af8:	d02b      	beq.n	8008b52 <__lshift+0xbe>
 8008afa:	f1c9 0e20 	rsb	lr, r9, #32
 8008afe:	468a      	mov	sl, r1
 8008b00:	2200      	movs	r2, #0
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	fa00 f009 	lsl.w	r0, r0, r9
 8008b08:	4310      	orrs	r0, r2
 8008b0a:	f84a 0b04 	str.w	r0, [sl], #4
 8008b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b12:	459c      	cmp	ip, r3
 8008b14:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b18:	d8f3      	bhi.n	8008b02 <__lshift+0x6e>
 8008b1a:	ebac 0304 	sub.w	r3, ip, r4
 8008b1e:	3b15      	subs	r3, #21
 8008b20:	f023 0303 	bic.w	r3, r3, #3
 8008b24:	3304      	adds	r3, #4
 8008b26:	f104 0015 	add.w	r0, r4, #21
 8008b2a:	4584      	cmp	ip, r0
 8008b2c:	bf38      	it	cc
 8008b2e:	2304      	movcc	r3, #4
 8008b30:	50ca      	str	r2, [r1, r3]
 8008b32:	b10a      	cbz	r2, 8008b38 <__lshift+0xa4>
 8008b34:	f108 0602 	add.w	r6, r8, #2
 8008b38:	3e01      	subs	r6, #1
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	612e      	str	r6, [r5, #16]
 8008b3e:	4621      	mov	r1, r4
 8008b40:	f7ff fdd8 	bl	80086f4 <_Bfree>
 8008b44:	4628      	mov	r0, r5
 8008b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b4e:	3301      	adds	r3, #1
 8008b50:	e7c5      	b.n	8008ade <__lshift+0x4a>
 8008b52:	3904      	subs	r1, #4
 8008b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b58:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b5c:	459c      	cmp	ip, r3
 8008b5e:	d8f9      	bhi.n	8008b54 <__lshift+0xc0>
 8008b60:	e7ea      	b.n	8008b38 <__lshift+0xa4>
 8008b62:	bf00      	nop
 8008b64:	08009687 	.word	0x08009687
 8008b68:	08009698 	.word	0x08009698

08008b6c <__mcmp>:
 8008b6c:	b530      	push	{r4, r5, lr}
 8008b6e:	6902      	ldr	r2, [r0, #16]
 8008b70:	690c      	ldr	r4, [r1, #16]
 8008b72:	1b12      	subs	r2, r2, r4
 8008b74:	d10e      	bne.n	8008b94 <__mcmp+0x28>
 8008b76:	f100 0314 	add.w	r3, r0, #20
 8008b7a:	3114      	adds	r1, #20
 8008b7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b8c:	42a5      	cmp	r5, r4
 8008b8e:	d003      	beq.n	8008b98 <__mcmp+0x2c>
 8008b90:	d305      	bcc.n	8008b9e <__mcmp+0x32>
 8008b92:	2201      	movs	r2, #1
 8008b94:	4610      	mov	r0, r2
 8008b96:	bd30      	pop	{r4, r5, pc}
 8008b98:	4283      	cmp	r3, r0
 8008b9a:	d3f3      	bcc.n	8008b84 <__mcmp+0x18>
 8008b9c:	e7fa      	b.n	8008b94 <__mcmp+0x28>
 8008b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba2:	e7f7      	b.n	8008b94 <__mcmp+0x28>

08008ba4 <__mdiff>:
 8008ba4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	460c      	mov	r4, r1
 8008baa:	4606      	mov	r6, r0
 8008bac:	4611      	mov	r1, r2
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4690      	mov	r8, r2
 8008bb2:	f7ff ffdb 	bl	8008b6c <__mcmp>
 8008bb6:	1e05      	subs	r5, r0, #0
 8008bb8:	d110      	bne.n	8008bdc <__mdiff+0x38>
 8008bba:	4629      	mov	r1, r5
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7ff fd59 	bl	8008674 <_Balloc>
 8008bc2:	b930      	cbnz	r0, 8008bd2 <__mdiff+0x2e>
 8008bc4:	4b3a      	ldr	r3, [pc, #232]	; (8008cb0 <__mdiff+0x10c>)
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	f240 2137 	movw	r1, #567	; 0x237
 8008bcc:	4839      	ldr	r0, [pc, #228]	; (8008cb4 <__mdiff+0x110>)
 8008bce:	f000 fb65 	bl	800929c <__assert_func>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bdc:	bfa4      	itt	ge
 8008bde:	4643      	movge	r3, r8
 8008be0:	46a0      	movge	r8, r4
 8008be2:	4630      	mov	r0, r6
 8008be4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008be8:	bfa6      	itte	ge
 8008bea:	461c      	movge	r4, r3
 8008bec:	2500      	movge	r5, #0
 8008bee:	2501      	movlt	r5, #1
 8008bf0:	f7ff fd40 	bl	8008674 <_Balloc>
 8008bf4:	b920      	cbnz	r0, 8008c00 <__mdiff+0x5c>
 8008bf6:	4b2e      	ldr	r3, [pc, #184]	; (8008cb0 <__mdiff+0x10c>)
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	f240 2145 	movw	r1, #581	; 0x245
 8008bfe:	e7e5      	b.n	8008bcc <__mdiff+0x28>
 8008c00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c04:	6926      	ldr	r6, [r4, #16]
 8008c06:	60c5      	str	r5, [r0, #12]
 8008c08:	f104 0914 	add.w	r9, r4, #20
 8008c0c:	f108 0514 	add.w	r5, r8, #20
 8008c10:	f100 0e14 	add.w	lr, r0, #20
 8008c14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c1c:	f108 0210 	add.w	r2, r8, #16
 8008c20:	46f2      	mov	sl, lr
 8008c22:	2100      	movs	r1, #0
 8008c24:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c2c:	fa11 f88b 	uxtah	r8, r1, fp
 8008c30:	b299      	uxth	r1, r3
 8008c32:	0c1b      	lsrs	r3, r3, #16
 8008c34:	eba8 0801 	sub.w	r8, r8, r1
 8008c38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c40:	fa1f f888 	uxth.w	r8, r8
 8008c44:	1419      	asrs	r1, r3, #16
 8008c46:	454e      	cmp	r6, r9
 8008c48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c4c:	f84a 3b04 	str.w	r3, [sl], #4
 8008c50:	d8e8      	bhi.n	8008c24 <__mdiff+0x80>
 8008c52:	1b33      	subs	r3, r6, r4
 8008c54:	3b15      	subs	r3, #21
 8008c56:	f023 0303 	bic.w	r3, r3, #3
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	3415      	adds	r4, #21
 8008c5e:	42a6      	cmp	r6, r4
 8008c60:	bf38      	it	cc
 8008c62:	2304      	movcc	r3, #4
 8008c64:	441d      	add	r5, r3
 8008c66:	4473      	add	r3, lr
 8008c68:	469e      	mov	lr, r3
 8008c6a:	462e      	mov	r6, r5
 8008c6c:	4566      	cmp	r6, ip
 8008c6e:	d30e      	bcc.n	8008c8e <__mdiff+0xea>
 8008c70:	f10c 0203 	add.w	r2, ip, #3
 8008c74:	1b52      	subs	r2, r2, r5
 8008c76:	f022 0203 	bic.w	r2, r2, #3
 8008c7a:	3d03      	subs	r5, #3
 8008c7c:	45ac      	cmp	ip, r5
 8008c7e:	bf38      	it	cc
 8008c80:	2200      	movcc	r2, #0
 8008c82:	4413      	add	r3, r2
 8008c84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008c88:	b17a      	cbz	r2, 8008caa <__mdiff+0x106>
 8008c8a:	6107      	str	r7, [r0, #16]
 8008c8c:	e7a4      	b.n	8008bd8 <__mdiff+0x34>
 8008c8e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c92:	fa11 f288 	uxtah	r2, r1, r8
 8008c96:	1414      	asrs	r4, r2, #16
 8008c98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c9c:	b292      	uxth	r2, r2
 8008c9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ca2:	f84e 2b04 	str.w	r2, [lr], #4
 8008ca6:	1421      	asrs	r1, r4, #16
 8008ca8:	e7e0      	b.n	8008c6c <__mdiff+0xc8>
 8008caa:	3f01      	subs	r7, #1
 8008cac:	e7ea      	b.n	8008c84 <__mdiff+0xe0>
 8008cae:	bf00      	nop
 8008cb0:	08009687 	.word	0x08009687
 8008cb4:	08009698 	.word	0x08009698

08008cb8 <__d2b>:
 8008cb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	ec59 8b10 	vmov	r8, r9, d0
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	f7ff fcd5 	bl	8008674 <_Balloc>
 8008cca:	4604      	mov	r4, r0
 8008ccc:	b930      	cbnz	r0, 8008cdc <__d2b+0x24>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b24      	ldr	r3, [pc, #144]	; (8008d64 <__d2b+0xac>)
 8008cd2:	4825      	ldr	r0, [pc, #148]	; (8008d68 <__d2b+0xb0>)
 8008cd4:	f240 310f 	movw	r1, #783	; 0x30f
 8008cd8:	f000 fae0 	bl	800929c <__assert_func>
 8008cdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ce4:	bb2d      	cbnz	r5, 8008d32 <__d2b+0x7a>
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	f1b8 0300 	subs.w	r3, r8, #0
 8008cec:	d026      	beq.n	8008d3c <__d2b+0x84>
 8008cee:	4668      	mov	r0, sp
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	f7ff fd87 	bl	8008804 <__lo0bits>
 8008cf6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cfa:	b1e8      	cbz	r0, 8008d38 <__d2b+0x80>
 8008cfc:	f1c0 0320 	rsb	r3, r0, #32
 8008d00:	fa02 f303 	lsl.w	r3, r2, r3
 8008d04:	430b      	orrs	r3, r1
 8008d06:	40c2      	lsrs	r2, r0
 8008d08:	6163      	str	r3, [r4, #20]
 8008d0a:	9201      	str	r2, [sp, #4]
 8008d0c:	9b01      	ldr	r3, [sp, #4]
 8008d0e:	61a3      	str	r3, [r4, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bf14      	ite	ne
 8008d14:	2202      	movne	r2, #2
 8008d16:	2201      	moveq	r2, #1
 8008d18:	6122      	str	r2, [r4, #16]
 8008d1a:	b1bd      	cbz	r5, 8008d4c <__d2b+0x94>
 8008d1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d20:	4405      	add	r5, r0
 8008d22:	603d      	str	r5, [r7, #0]
 8008d24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d28:	6030      	str	r0, [r6, #0]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	b003      	add	sp, #12
 8008d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d36:	e7d6      	b.n	8008ce6 <__d2b+0x2e>
 8008d38:	6161      	str	r1, [r4, #20]
 8008d3a:	e7e7      	b.n	8008d0c <__d2b+0x54>
 8008d3c:	a801      	add	r0, sp, #4
 8008d3e:	f7ff fd61 	bl	8008804 <__lo0bits>
 8008d42:	9b01      	ldr	r3, [sp, #4]
 8008d44:	6163      	str	r3, [r4, #20]
 8008d46:	3020      	adds	r0, #32
 8008d48:	2201      	movs	r2, #1
 8008d4a:	e7e5      	b.n	8008d18 <__d2b+0x60>
 8008d4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d54:	6038      	str	r0, [r7, #0]
 8008d56:	6918      	ldr	r0, [r3, #16]
 8008d58:	f7ff fd34 	bl	80087c4 <__hi0bits>
 8008d5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d60:	e7e2      	b.n	8008d28 <__d2b+0x70>
 8008d62:	bf00      	nop
 8008d64:	08009687 	.word	0x08009687
 8008d68:	08009698 	.word	0x08009698

08008d6c <__sfputc_r>:
 8008d6c:	6893      	ldr	r3, [r2, #8]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	b410      	push	{r4}
 8008d74:	6093      	str	r3, [r2, #8]
 8008d76:	da08      	bge.n	8008d8a <__sfputc_r+0x1e>
 8008d78:	6994      	ldr	r4, [r2, #24]
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	db01      	blt.n	8008d82 <__sfputc_r+0x16>
 8008d7e:	290a      	cmp	r1, #10
 8008d80:	d103      	bne.n	8008d8a <__sfputc_r+0x1e>
 8008d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d86:	f000 b9e3 	b.w	8009150 <__swbuf_r>
 8008d8a:	6813      	ldr	r3, [r2, #0]
 8008d8c:	1c58      	adds	r0, r3, #1
 8008d8e:	6010      	str	r0, [r2, #0]
 8008d90:	7019      	strb	r1, [r3, #0]
 8008d92:	4608      	mov	r0, r1
 8008d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <__sfputs_r>:
 8008d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	460f      	mov	r7, r1
 8008da0:	4614      	mov	r4, r2
 8008da2:	18d5      	adds	r5, r2, r3
 8008da4:	42ac      	cmp	r4, r5
 8008da6:	d101      	bne.n	8008dac <__sfputs_r+0x12>
 8008da8:	2000      	movs	r0, #0
 8008daa:	e007      	b.n	8008dbc <__sfputs_r+0x22>
 8008dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db0:	463a      	mov	r2, r7
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7ff ffda 	bl	8008d6c <__sfputc_r>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d1f3      	bne.n	8008da4 <__sfputs_r+0xa>
 8008dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dc0 <_vfiprintf_r>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	b09d      	sub	sp, #116	; 0x74
 8008dc8:	4614      	mov	r4, r2
 8008dca:	4698      	mov	r8, r3
 8008dcc:	4606      	mov	r6, r0
 8008dce:	b118      	cbz	r0, 8008dd8 <_vfiprintf_r+0x18>
 8008dd0:	6a03      	ldr	r3, [r0, #32]
 8008dd2:	b90b      	cbnz	r3, 8008dd8 <_vfiprintf_r+0x18>
 8008dd4:	f7fe fbb8 	bl	8007548 <__sinit>
 8008dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dda:	07d9      	lsls	r1, r3, #31
 8008ddc:	d405      	bmi.n	8008dea <_vfiprintf_r+0x2a>
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	059a      	lsls	r2, r3, #22
 8008de2:	d402      	bmi.n	8008dea <_vfiprintf_r+0x2a>
 8008de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008de6:	f7fe fcb8 	bl	800775a <__retarget_lock_acquire_recursive>
 8008dea:	89ab      	ldrh	r3, [r5, #12]
 8008dec:	071b      	lsls	r3, r3, #28
 8008dee:	d501      	bpl.n	8008df4 <_vfiprintf_r+0x34>
 8008df0:	692b      	ldr	r3, [r5, #16]
 8008df2:	b99b      	cbnz	r3, 8008e1c <_vfiprintf_r+0x5c>
 8008df4:	4629      	mov	r1, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	f000 f9e8 	bl	80091cc <__swsetup_r>
 8008dfc:	b170      	cbz	r0, 8008e1c <_vfiprintf_r+0x5c>
 8008dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e00:	07dc      	lsls	r4, r3, #31
 8008e02:	d504      	bpl.n	8008e0e <_vfiprintf_r+0x4e>
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	b01d      	add	sp, #116	; 0x74
 8008e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	0598      	lsls	r0, r3, #22
 8008e12:	d4f7      	bmi.n	8008e04 <_vfiprintf_r+0x44>
 8008e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e16:	f7fe fca1 	bl	800775c <__retarget_lock_release_recursive>
 8008e1a:	e7f3      	b.n	8008e04 <_vfiprintf_r+0x44>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e20:	2320      	movs	r3, #32
 8008e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e2a:	2330      	movs	r3, #48	; 0x30
 8008e2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008fe0 <_vfiprintf_r+0x220>
 8008e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e34:	f04f 0901 	mov.w	r9, #1
 8008e38:	4623      	mov	r3, r4
 8008e3a:	469a      	mov	sl, r3
 8008e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e40:	b10a      	cbz	r2, 8008e46 <_vfiprintf_r+0x86>
 8008e42:	2a25      	cmp	r2, #37	; 0x25
 8008e44:	d1f9      	bne.n	8008e3a <_vfiprintf_r+0x7a>
 8008e46:	ebba 0b04 	subs.w	fp, sl, r4
 8008e4a:	d00b      	beq.n	8008e64 <_vfiprintf_r+0xa4>
 8008e4c:	465b      	mov	r3, fp
 8008e4e:	4622      	mov	r2, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7ff ffa1 	bl	8008d9a <__sfputs_r>
 8008e58:	3001      	adds	r0, #1
 8008e5a:	f000 80a9 	beq.w	8008fb0 <_vfiprintf_r+0x1f0>
 8008e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e60:	445a      	add	r2, fp
 8008e62:	9209      	str	r2, [sp, #36]	; 0x24
 8008e64:	f89a 3000 	ldrb.w	r3, [sl]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 80a1 	beq.w	8008fb0 <_vfiprintf_r+0x1f0>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f04f 32ff 	mov.w	r2, #4294967295
 8008e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e78:	f10a 0a01 	add.w	sl, sl, #1
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	9307      	str	r3, [sp, #28]
 8008e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e84:	931a      	str	r3, [sp, #104]	; 0x68
 8008e86:	4654      	mov	r4, sl
 8008e88:	2205      	movs	r2, #5
 8008e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8e:	4854      	ldr	r0, [pc, #336]	; (8008fe0 <_vfiprintf_r+0x220>)
 8008e90:	f7f7 f9b6 	bl	8000200 <memchr>
 8008e94:	9a04      	ldr	r2, [sp, #16]
 8008e96:	b9d8      	cbnz	r0, 8008ed0 <_vfiprintf_r+0x110>
 8008e98:	06d1      	lsls	r1, r2, #27
 8008e9a:	bf44      	itt	mi
 8008e9c:	2320      	movmi	r3, #32
 8008e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea2:	0713      	lsls	r3, r2, #28
 8008ea4:	bf44      	itt	mi
 8008ea6:	232b      	movmi	r3, #43	; 0x2b
 8008ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eac:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb2:	d015      	beq.n	8008ee0 <_vfiprintf_r+0x120>
 8008eb4:	9a07      	ldr	r2, [sp, #28]
 8008eb6:	4654      	mov	r4, sl
 8008eb8:	2000      	movs	r0, #0
 8008eba:	f04f 0c0a 	mov.w	ip, #10
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ec4:	3b30      	subs	r3, #48	; 0x30
 8008ec6:	2b09      	cmp	r3, #9
 8008ec8:	d94d      	bls.n	8008f66 <_vfiprintf_r+0x1a6>
 8008eca:	b1b0      	cbz	r0, 8008efa <_vfiprintf_r+0x13a>
 8008ecc:	9207      	str	r2, [sp, #28]
 8008ece:	e014      	b.n	8008efa <_vfiprintf_r+0x13a>
 8008ed0:	eba0 0308 	sub.w	r3, r0, r8
 8008ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	9304      	str	r3, [sp, #16]
 8008edc:	46a2      	mov	sl, r4
 8008ede:	e7d2      	b.n	8008e86 <_vfiprintf_r+0xc6>
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	1d19      	adds	r1, r3, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	9103      	str	r1, [sp, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bfbb      	ittet	lt
 8008eec:	425b      	neglt	r3, r3
 8008eee:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef2:	9307      	strge	r3, [sp, #28]
 8008ef4:	9307      	strlt	r3, [sp, #28]
 8008ef6:	bfb8      	it	lt
 8008ef8:	9204      	strlt	r2, [sp, #16]
 8008efa:	7823      	ldrb	r3, [r4, #0]
 8008efc:	2b2e      	cmp	r3, #46	; 0x2e
 8008efe:	d10c      	bne.n	8008f1a <_vfiprintf_r+0x15a>
 8008f00:	7863      	ldrb	r3, [r4, #1]
 8008f02:	2b2a      	cmp	r3, #42	; 0x2a
 8008f04:	d134      	bne.n	8008f70 <_vfiprintf_r+0x1b0>
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	1d1a      	adds	r2, r3, #4
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	9203      	str	r2, [sp, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bfb8      	it	lt
 8008f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f16:	3402      	adds	r4, #2
 8008f18:	9305      	str	r3, [sp, #20]
 8008f1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ff0 <_vfiprintf_r+0x230>
 8008f1e:	7821      	ldrb	r1, [r4, #0]
 8008f20:	2203      	movs	r2, #3
 8008f22:	4650      	mov	r0, sl
 8008f24:	f7f7 f96c 	bl	8000200 <memchr>
 8008f28:	b138      	cbz	r0, 8008f3a <_vfiprintf_r+0x17a>
 8008f2a:	9b04      	ldr	r3, [sp, #16]
 8008f2c:	eba0 000a 	sub.w	r0, r0, sl
 8008f30:	2240      	movs	r2, #64	; 0x40
 8008f32:	4082      	lsls	r2, r0
 8008f34:	4313      	orrs	r3, r2
 8008f36:	3401      	adds	r4, #1
 8008f38:	9304      	str	r3, [sp, #16]
 8008f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3e:	4829      	ldr	r0, [pc, #164]	; (8008fe4 <_vfiprintf_r+0x224>)
 8008f40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f44:	2206      	movs	r2, #6
 8008f46:	f7f7 f95b 	bl	8000200 <memchr>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d03f      	beq.n	8008fce <_vfiprintf_r+0x20e>
 8008f4e:	4b26      	ldr	r3, [pc, #152]	; (8008fe8 <_vfiprintf_r+0x228>)
 8008f50:	bb1b      	cbnz	r3, 8008f9a <_vfiprintf_r+0x1da>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	3307      	adds	r3, #7
 8008f56:	f023 0307 	bic.w	r3, r3, #7
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f60:	443b      	add	r3, r7
 8008f62:	9309      	str	r3, [sp, #36]	; 0x24
 8008f64:	e768      	b.n	8008e38 <_vfiprintf_r+0x78>
 8008f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	2001      	movs	r0, #1
 8008f6e:	e7a6      	b.n	8008ebe <_vfiprintf_r+0xfe>
 8008f70:	2300      	movs	r3, #0
 8008f72:	3401      	adds	r4, #1
 8008f74:	9305      	str	r3, [sp, #20]
 8008f76:	4619      	mov	r1, r3
 8008f78:	f04f 0c0a 	mov.w	ip, #10
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f82:	3a30      	subs	r2, #48	; 0x30
 8008f84:	2a09      	cmp	r2, #9
 8008f86:	d903      	bls.n	8008f90 <_vfiprintf_r+0x1d0>
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d0c6      	beq.n	8008f1a <_vfiprintf_r+0x15a>
 8008f8c:	9105      	str	r1, [sp, #20]
 8008f8e:	e7c4      	b.n	8008f1a <_vfiprintf_r+0x15a>
 8008f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f94:	4604      	mov	r4, r0
 8008f96:	2301      	movs	r3, #1
 8008f98:	e7f0      	b.n	8008f7c <_vfiprintf_r+0x1bc>
 8008f9a:	ab03      	add	r3, sp, #12
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	4b12      	ldr	r3, [pc, #72]	; (8008fec <_vfiprintf_r+0x22c>)
 8008fa2:	a904      	add	r1, sp, #16
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f7fd fe7d 	bl	8006ca4 <_printf_float>
 8008faa:	4607      	mov	r7, r0
 8008fac:	1c78      	adds	r0, r7, #1
 8008fae:	d1d6      	bne.n	8008f5e <_vfiprintf_r+0x19e>
 8008fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fb2:	07d9      	lsls	r1, r3, #31
 8008fb4:	d405      	bmi.n	8008fc2 <_vfiprintf_r+0x202>
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	059a      	lsls	r2, r3, #22
 8008fba:	d402      	bmi.n	8008fc2 <_vfiprintf_r+0x202>
 8008fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fbe:	f7fe fbcd 	bl	800775c <__retarget_lock_release_recursive>
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	065b      	lsls	r3, r3, #25
 8008fc6:	f53f af1d 	bmi.w	8008e04 <_vfiprintf_r+0x44>
 8008fca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fcc:	e71c      	b.n	8008e08 <_vfiprintf_r+0x48>
 8008fce:	ab03      	add	r3, sp, #12
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	462a      	mov	r2, r5
 8008fd4:	4b05      	ldr	r3, [pc, #20]	; (8008fec <_vfiprintf_r+0x22c>)
 8008fd6:	a904      	add	r1, sp, #16
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7fe f907 	bl	80071ec <_printf_i>
 8008fde:	e7e4      	b.n	8008faa <_vfiprintf_r+0x1ea>
 8008fe0:	080097f4 	.word	0x080097f4
 8008fe4:	080097fe 	.word	0x080097fe
 8008fe8:	08006ca5 	.word	0x08006ca5
 8008fec:	08008d9b 	.word	0x08008d9b
 8008ff0:	080097fa 	.word	0x080097fa

08008ff4 <__sflush_r>:
 8008ff4:	898a      	ldrh	r2, [r1, #12]
 8008ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	0710      	lsls	r0, r2, #28
 8008ffe:	460c      	mov	r4, r1
 8009000:	d458      	bmi.n	80090b4 <__sflush_r+0xc0>
 8009002:	684b      	ldr	r3, [r1, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	dc05      	bgt.n	8009014 <__sflush_r+0x20>
 8009008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	dc02      	bgt.n	8009014 <__sflush_r+0x20>
 800900e:	2000      	movs	r0, #0
 8009010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009016:	2e00      	cmp	r6, #0
 8009018:	d0f9      	beq.n	800900e <__sflush_r+0x1a>
 800901a:	2300      	movs	r3, #0
 800901c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009020:	682f      	ldr	r7, [r5, #0]
 8009022:	6a21      	ldr	r1, [r4, #32]
 8009024:	602b      	str	r3, [r5, #0]
 8009026:	d032      	beq.n	800908e <__sflush_r+0x9a>
 8009028:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	075a      	lsls	r2, r3, #29
 800902e:	d505      	bpl.n	800903c <__sflush_r+0x48>
 8009030:	6863      	ldr	r3, [r4, #4]
 8009032:	1ac0      	subs	r0, r0, r3
 8009034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009036:	b10b      	cbz	r3, 800903c <__sflush_r+0x48>
 8009038:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800903a:	1ac0      	subs	r0, r0, r3
 800903c:	2300      	movs	r3, #0
 800903e:	4602      	mov	r2, r0
 8009040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009042:	6a21      	ldr	r1, [r4, #32]
 8009044:	4628      	mov	r0, r5
 8009046:	47b0      	blx	r6
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	d106      	bne.n	800905c <__sflush_r+0x68>
 800904e:	6829      	ldr	r1, [r5, #0]
 8009050:	291d      	cmp	r1, #29
 8009052:	d82b      	bhi.n	80090ac <__sflush_r+0xb8>
 8009054:	4a29      	ldr	r2, [pc, #164]	; (80090fc <__sflush_r+0x108>)
 8009056:	410a      	asrs	r2, r1
 8009058:	07d6      	lsls	r6, r2, #31
 800905a:	d427      	bmi.n	80090ac <__sflush_r+0xb8>
 800905c:	2200      	movs	r2, #0
 800905e:	6062      	str	r2, [r4, #4]
 8009060:	04d9      	lsls	r1, r3, #19
 8009062:	6922      	ldr	r2, [r4, #16]
 8009064:	6022      	str	r2, [r4, #0]
 8009066:	d504      	bpl.n	8009072 <__sflush_r+0x7e>
 8009068:	1c42      	adds	r2, r0, #1
 800906a:	d101      	bne.n	8009070 <__sflush_r+0x7c>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b903      	cbnz	r3, 8009072 <__sflush_r+0x7e>
 8009070:	6560      	str	r0, [r4, #84]	; 0x54
 8009072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009074:	602f      	str	r7, [r5, #0]
 8009076:	2900      	cmp	r1, #0
 8009078:	d0c9      	beq.n	800900e <__sflush_r+0x1a>
 800907a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800907e:	4299      	cmp	r1, r3
 8009080:	d002      	beq.n	8009088 <__sflush_r+0x94>
 8009082:	4628      	mov	r0, r5
 8009084:	f7ff f9f6 	bl	8008474 <_free_r>
 8009088:	2000      	movs	r0, #0
 800908a:	6360      	str	r0, [r4, #52]	; 0x34
 800908c:	e7c0      	b.n	8009010 <__sflush_r+0x1c>
 800908e:	2301      	movs	r3, #1
 8009090:	4628      	mov	r0, r5
 8009092:	47b0      	blx	r6
 8009094:	1c41      	adds	r1, r0, #1
 8009096:	d1c8      	bne.n	800902a <__sflush_r+0x36>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0c5      	beq.n	800902a <__sflush_r+0x36>
 800909e:	2b1d      	cmp	r3, #29
 80090a0:	d001      	beq.n	80090a6 <__sflush_r+0xb2>
 80090a2:	2b16      	cmp	r3, #22
 80090a4:	d101      	bne.n	80090aa <__sflush_r+0xb6>
 80090a6:	602f      	str	r7, [r5, #0]
 80090a8:	e7b1      	b.n	800900e <__sflush_r+0x1a>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b0:	81a3      	strh	r3, [r4, #12]
 80090b2:	e7ad      	b.n	8009010 <__sflush_r+0x1c>
 80090b4:	690f      	ldr	r7, [r1, #16]
 80090b6:	2f00      	cmp	r7, #0
 80090b8:	d0a9      	beq.n	800900e <__sflush_r+0x1a>
 80090ba:	0793      	lsls	r3, r2, #30
 80090bc:	680e      	ldr	r6, [r1, #0]
 80090be:	bf08      	it	eq
 80090c0:	694b      	ldreq	r3, [r1, #20]
 80090c2:	600f      	str	r7, [r1, #0]
 80090c4:	bf18      	it	ne
 80090c6:	2300      	movne	r3, #0
 80090c8:	eba6 0807 	sub.w	r8, r6, r7
 80090cc:	608b      	str	r3, [r1, #8]
 80090ce:	f1b8 0f00 	cmp.w	r8, #0
 80090d2:	dd9c      	ble.n	800900e <__sflush_r+0x1a>
 80090d4:	6a21      	ldr	r1, [r4, #32]
 80090d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090d8:	4643      	mov	r3, r8
 80090da:	463a      	mov	r2, r7
 80090dc:	4628      	mov	r0, r5
 80090de:	47b0      	blx	r6
 80090e0:	2800      	cmp	r0, #0
 80090e2:	dc06      	bgt.n	80090f2 <__sflush_r+0xfe>
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e78e      	b.n	8009010 <__sflush_r+0x1c>
 80090f2:	4407      	add	r7, r0
 80090f4:	eba8 0800 	sub.w	r8, r8, r0
 80090f8:	e7e9      	b.n	80090ce <__sflush_r+0xda>
 80090fa:	bf00      	nop
 80090fc:	dfbffffe 	.word	0xdfbffffe

08009100 <_fflush_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	690b      	ldr	r3, [r1, #16]
 8009104:	4605      	mov	r5, r0
 8009106:	460c      	mov	r4, r1
 8009108:	b913      	cbnz	r3, 8009110 <_fflush_r+0x10>
 800910a:	2500      	movs	r5, #0
 800910c:	4628      	mov	r0, r5
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	b118      	cbz	r0, 800911a <_fflush_r+0x1a>
 8009112:	6a03      	ldr	r3, [r0, #32]
 8009114:	b90b      	cbnz	r3, 800911a <_fflush_r+0x1a>
 8009116:	f7fe fa17 	bl	8007548 <__sinit>
 800911a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0f3      	beq.n	800910a <_fflush_r+0xa>
 8009122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009124:	07d0      	lsls	r0, r2, #31
 8009126:	d404      	bmi.n	8009132 <_fflush_r+0x32>
 8009128:	0599      	lsls	r1, r3, #22
 800912a:	d402      	bmi.n	8009132 <_fflush_r+0x32>
 800912c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800912e:	f7fe fb14 	bl	800775a <__retarget_lock_acquire_recursive>
 8009132:	4628      	mov	r0, r5
 8009134:	4621      	mov	r1, r4
 8009136:	f7ff ff5d 	bl	8008ff4 <__sflush_r>
 800913a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800913c:	07da      	lsls	r2, r3, #31
 800913e:	4605      	mov	r5, r0
 8009140:	d4e4      	bmi.n	800910c <_fflush_r+0xc>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	059b      	lsls	r3, r3, #22
 8009146:	d4e1      	bmi.n	800910c <_fflush_r+0xc>
 8009148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800914a:	f7fe fb07 	bl	800775c <__retarget_lock_release_recursive>
 800914e:	e7dd      	b.n	800910c <_fflush_r+0xc>

08009150 <__swbuf_r>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	460e      	mov	r6, r1
 8009154:	4614      	mov	r4, r2
 8009156:	4605      	mov	r5, r0
 8009158:	b118      	cbz	r0, 8009162 <__swbuf_r+0x12>
 800915a:	6a03      	ldr	r3, [r0, #32]
 800915c:	b90b      	cbnz	r3, 8009162 <__swbuf_r+0x12>
 800915e:	f7fe f9f3 	bl	8007548 <__sinit>
 8009162:	69a3      	ldr	r3, [r4, #24]
 8009164:	60a3      	str	r3, [r4, #8]
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	071a      	lsls	r2, r3, #28
 800916a:	d525      	bpl.n	80091b8 <__swbuf_r+0x68>
 800916c:	6923      	ldr	r3, [r4, #16]
 800916e:	b31b      	cbz	r3, 80091b8 <__swbuf_r+0x68>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	6922      	ldr	r2, [r4, #16]
 8009174:	1a98      	subs	r0, r3, r2
 8009176:	6963      	ldr	r3, [r4, #20]
 8009178:	b2f6      	uxtb	r6, r6
 800917a:	4283      	cmp	r3, r0
 800917c:	4637      	mov	r7, r6
 800917e:	dc04      	bgt.n	800918a <__swbuf_r+0x3a>
 8009180:	4621      	mov	r1, r4
 8009182:	4628      	mov	r0, r5
 8009184:	f7ff ffbc 	bl	8009100 <_fflush_r>
 8009188:	b9e0      	cbnz	r0, 80091c4 <__swbuf_r+0x74>
 800918a:	68a3      	ldr	r3, [r4, #8]
 800918c:	3b01      	subs	r3, #1
 800918e:	60a3      	str	r3, [r4, #8]
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	6022      	str	r2, [r4, #0]
 8009196:	701e      	strb	r6, [r3, #0]
 8009198:	6962      	ldr	r2, [r4, #20]
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	429a      	cmp	r2, r3
 800919e:	d004      	beq.n	80091aa <__swbuf_r+0x5a>
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	07db      	lsls	r3, r3, #31
 80091a4:	d506      	bpl.n	80091b4 <__swbuf_r+0x64>
 80091a6:	2e0a      	cmp	r6, #10
 80091a8:	d104      	bne.n	80091b4 <__swbuf_r+0x64>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7ff ffa7 	bl	8009100 <_fflush_r>
 80091b2:	b938      	cbnz	r0, 80091c4 <__swbuf_r+0x74>
 80091b4:	4638      	mov	r0, r7
 80091b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b8:	4621      	mov	r1, r4
 80091ba:	4628      	mov	r0, r5
 80091bc:	f000 f806 	bl	80091cc <__swsetup_r>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d0d5      	beq.n	8009170 <__swbuf_r+0x20>
 80091c4:	f04f 37ff 	mov.w	r7, #4294967295
 80091c8:	e7f4      	b.n	80091b4 <__swbuf_r+0x64>
	...

080091cc <__swsetup_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4b2a      	ldr	r3, [pc, #168]	; (8009278 <__swsetup_r+0xac>)
 80091d0:	4605      	mov	r5, r0
 80091d2:	6818      	ldr	r0, [r3, #0]
 80091d4:	460c      	mov	r4, r1
 80091d6:	b118      	cbz	r0, 80091e0 <__swsetup_r+0x14>
 80091d8:	6a03      	ldr	r3, [r0, #32]
 80091da:	b90b      	cbnz	r3, 80091e0 <__swsetup_r+0x14>
 80091dc:	f7fe f9b4 	bl	8007548 <__sinit>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091e6:	0718      	lsls	r0, r3, #28
 80091e8:	d422      	bmi.n	8009230 <__swsetup_r+0x64>
 80091ea:	06d9      	lsls	r1, r3, #27
 80091ec:	d407      	bmi.n	80091fe <__swsetup_r+0x32>
 80091ee:	2309      	movs	r3, #9
 80091f0:	602b      	str	r3, [r5, #0]
 80091f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	e034      	b.n	8009268 <__swsetup_r+0x9c>
 80091fe:	0758      	lsls	r0, r3, #29
 8009200:	d512      	bpl.n	8009228 <__swsetup_r+0x5c>
 8009202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009204:	b141      	cbz	r1, 8009218 <__swsetup_r+0x4c>
 8009206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800920a:	4299      	cmp	r1, r3
 800920c:	d002      	beq.n	8009214 <__swsetup_r+0x48>
 800920e:	4628      	mov	r0, r5
 8009210:	f7ff f930 	bl	8008474 <_free_r>
 8009214:	2300      	movs	r3, #0
 8009216:	6363      	str	r3, [r4, #52]	; 0x34
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	2300      	movs	r3, #0
 8009222:	6063      	str	r3, [r4, #4]
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f043 0308 	orr.w	r3, r3, #8
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	b94b      	cbnz	r3, 8009248 <__swsetup_r+0x7c>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800923a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800923e:	d003      	beq.n	8009248 <__swsetup_r+0x7c>
 8009240:	4621      	mov	r1, r4
 8009242:	4628      	mov	r0, r5
 8009244:	f000 f8b6 	bl	80093b4 <__smakebuf_r>
 8009248:	89a0      	ldrh	r0, [r4, #12]
 800924a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800924e:	f010 0301 	ands.w	r3, r0, #1
 8009252:	d00a      	beq.n	800926a <__swsetup_r+0x9e>
 8009254:	2300      	movs	r3, #0
 8009256:	60a3      	str	r3, [r4, #8]
 8009258:	6963      	ldr	r3, [r4, #20]
 800925a:	425b      	negs	r3, r3
 800925c:	61a3      	str	r3, [r4, #24]
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	b943      	cbnz	r3, 8009274 <__swsetup_r+0xa8>
 8009262:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009266:	d1c4      	bne.n	80091f2 <__swsetup_r+0x26>
 8009268:	bd38      	pop	{r3, r4, r5, pc}
 800926a:	0781      	lsls	r1, r0, #30
 800926c:	bf58      	it	pl
 800926e:	6963      	ldrpl	r3, [r4, #20]
 8009270:	60a3      	str	r3, [r4, #8]
 8009272:	e7f4      	b.n	800925e <__swsetup_r+0x92>
 8009274:	2000      	movs	r0, #0
 8009276:	e7f7      	b.n	8009268 <__swsetup_r+0x9c>
 8009278:	200000cc 	.word	0x200000cc

0800927c <_sbrk_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d06      	ldr	r5, [pc, #24]	; (8009298 <_sbrk_r+0x1c>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f7f8 f82e 	bl	80012e8 <_sbrk>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_sbrk_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_sbrk_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20004dac 	.word	0x20004dac

0800929c <__assert_func>:
 800929c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800929e:	4614      	mov	r4, r2
 80092a0:	461a      	mov	r2, r3
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <__assert_func+0x2c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4605      	mov	r5, r0
 80092a8:	68d8      	ldr	r0, [r3, #12]
 80092aa:	b14c      	cbz	r4, 80092c0 <__assert_func+0x24>
 80092ac:	4b07      	ldr	r3, [pc, #28]	; (80092cc <__assert_func+0x30>)
 80092ae:	9100      	str	r1, [sp, #0]
 80092b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092b4:	4906      	ldr	r1, [pc, #24]	; (80092d0 <__assert_func+0x34>)
 80092b6:	462b      	mov	r3, r5
 80092b8:	f000 f844 	bl	8009344 <fiprintf>
 80092bc:	f000 f8d8 	bl	8009470 <abort>
 80092c0:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <__assert_func+0x38>)
 80092c2:	461c      	mov	r4, r3
 80092c4:	e7f3      	b.n	80092ae <__assert_func+0x12>
 80092c6:	bf00      	nop
 80092c8:	200000cc 	.word	0x200000cc
 80092cc:	0800980f 	.word	0x0800980f
 80092d0:	0800981c 	.word	0x0800981c
 80092d4:	0800984a 	.word	0x0800984a

080092d8 <_calloc_r>:
 80092d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092da:	fba1 2402 	umull	r2, r4, r1, r2
 80092de:	b94c      	cbnz	r4, 80092f4 <_calloc_r+0x1c>
 80092e0:	4611      	mov	r1, r2
 80092e2:	9201      	str	r2, [sp, #4]
 80092e4:	f7ff f93a 	bl	800855c <_malloc_r>
 80092e8:	9a01      	ldr	r2, [sp, #4]
 80092ea:	4605      	mov	r5, r0
 80092ec:	b930      	cbnz	r0, 80092fc <_calloc_r+0x24>
 80092ee:	4628      	mov	r0, r5
 80092f0:	b003      	add	sp, #12
 80092f2:	bd30      	pop	{r4, r5, pc}
 80092f4:	220c      	movs	r2, #12
 80092f6:	6002      	str	r2, [r0, #0]
 80092f8:	2500      	movs	r5, #0
 80092fa:	e7f8      	b.n	80092ee <_calloc_r+0x16>
 80092fc:	4621      	mov	r1, r4
 80092fe:	f7fe f9ae 	bl	800765e <memset>
 8009302:	e7f4      	b.n	80092ee <_calloc_r+0x16>

08009304 <__ascii_mbtowc>:
 8009304:	b082      	sub	sp, #8
 8009306:	b901      	cbnz	r1, 800930a <__ascii_mbtowc+0x6>
 8009308:	a901      	add	r1, sp, #4
 800930a:	b142      	cbz	r2, 800931e <__ascii_mbtowc+0x1a>
 800930c:	b14b      	cbz	r3, 8009322 <__ascii_mbtowc+0x1e>
 800930e:	7813      	ldrb	r3, [r2, #0]
 8009310:	600b      	str	r3, [r1, #0]
 8009312:	7812      	ldrb	r2, [r2, #0]
 8009314:	1e10      	subs	r0, r2, #0
 8009316:	bf18      	it	ne
 8009318:	2001      	movne	r0, #1
 800931a:	b002      	add	sp, #8
 800931c:	4770      	bx	lr
 800931e:	4610      	mov	r0, r2
 8009320:	e7fb      	b.n	800931a <__ascii_mbtowc+0x16>
 8009322:	f06f 0001 	mvn.w	r0, #1
 8009326:	e7f8      	b.n	800931a <__ascii_mbtowc+0x16>

08009328 <__ascii_wctomb>:
 8009328:	b149      	cbz	r1, 800933e <__ascii_wctomb+0x16>
 800932a:	2aff      	cmp	r2, #255	; 0xff
 800932c:	bf85      	ittet	hi
 800932e:	238a      	movhi	r3, #138	; 0x8a
 8009330:	6003      	strhi	r3, [r0, #0]
 8009332:	700a      	strbls	r2, [r1, #0]
 8009334:	f04f 30ff 	movhi.w	r0, #4294967295
 8009338:	bf98      	it	ls
 800933a:	2001      	movls	r0, #1
 800933c:	4770      	bx	lr
 800933e:	4608      	mov	r0, r1
 8009340:	4770      	bx	lr
	...

08009344 <fiprintf>:
 8009344:	b40e      	push	{r1, r2, r3}
 8009346:	b503      	push	{r0, r1, lr}
 8009348:	4601      	mov	r1, r0
 800934a:	ab03      	add	r3, sp, #12
 800934c:	4805      	ldr	r0, [pc, #20]	; (8009364 <fiprintf+0x20>)
 800934e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009352:	6800      	ldr	r0, [r0, #0]
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	f7ff fd33 	bl	8008dc0 <_vfiprintf_r>
 800935a:	b002      	add	sp, #8
 800935c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009360:	b003      	add	sp, #12
 8009362:	4770      	bx	lr
 8009364:	200000cc 	.word	0x200000cc

08009368 <__swhatbuf_r>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	460c      	mov	r4, r1
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	2900      	cmp	r1, #0
 8009372:	b096      	sub	sp, #88	; 0x58
 8009374:	4615      	mov	r5, r2
 8009376:	461e      	mov	r6, r3
 8009378:	da0d      	bge.n	8009396 <__swhatbuf_r+0x2e>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009380:	f04f 0100 	mov.w	r1, #0
 8009384:	bf0c      	ite	eq
 8009386:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800938a:	2340      	movne	r3, #64	; 0x40
 800938c:	2000      	movs	r0, #0
 800938e:	6031      	str	r1, [r6, #0]
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	b016      	add	sp, #88	; 0x58
 8009394:	bd70      	pop	{r4, r5, r6, pc}
 8009396:	466a      	mov	r2, sp
 8009398:	f000 f848 	bl	800942c <_fstat_r>
 800939c:	2800      	cmp	r0, #0
 800939e:	dbec      	blt.n	800937a <__swhatbuf_r+0x12>
 80093a0:	9901      	ldr	r1, [sp, #4]
 80093a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80093a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80093aa:	4259      	negs	r1, r3
 80093ac:	4159      	adcs	r1, r3
 80093ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093b2:	e7eb      	b.n	800938c <__swhatbuf_r+0x24>

080093b4 <__smakebuf_r>:
 80093b4:	898b      	ldrh	r3, [r1, #12]
 80093b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093b8:	079d      	lsls	r5, r3, #30
 80093ba:	4606      	mov	r6, r0
 80093bc:	460c      	mov	r4, r1
 80093be:	d507      	bpl.n	80093d0 <__smakebuf_r+0x1c>
 80093c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	6123      	str	r3, [r4, #16]
 80093c8:	2301      	movs	r3, #1
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	b002      	add	sp, #8
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	ab01      	add	r3, sp, #4
 80093d2:	466a      	mov	r2, sp
 80093d4:	f7ff ffc8 	bl	8009368 <__swhatbuf_r>
 80093d8:	9900      	ldr	r1, [sp, #0]
 80093da:	4605      	mov	r5, r0
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff f8bd 	bl	800855c <_malloc_r>
 80093e2:	b948      	cbnz	r0, 80093f8 <__smakebuf_r+0x44>
 80093e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e8:	059a      	lsls	r2, r3, #22
 80093ea:	d4ef      	bmi.n	80093cc <__smakebuf_r+0x18>
 80093ec:	f023 0303 	bic.w	r3, r3, #3
 80093f0:	f043 0302 	orr.w	r3, r3, #2
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	e7e3      	b.n	80093c0 <__smakebuf_r+0xc>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	6020      	str	r0, [r4, #0]
 80093fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	9b00      	ldr	r3, [sp, #0]
 8009404:	6163      	str	r3, [r4, #20]
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	6120      	str	r0, [r4, #16]
 800940a:	b15b      	cbz	r3, 8009424 <__smakebuf_r+0x70>
 800940c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009410:	4630      	mov	r0, r6
 8009412:	f000 f81d 	bl	8009450 <_isatty_r>
 8009416:	b128      	cbz	r0, 8009424 <__smakebuf_r+0x70>
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f023 0303 	bic.w	r3, r3, #3
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	81a3      	strh	r3, [r4, #12]
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	431d      	orrs	r5, r3
 8009428:	81a5      	strh	r5, [r4, #12]
 800942a:	e7cf      	b.n	80093cc <__smakebuf_r+0x18>

0800942c <_fstat_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	; (800944c <_fstat_r+0x20>)
 8009430:	2300      	movs	r3, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	4611      	mov	r1, r2
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	f7f7 ff2c 	bl	8001296 <_fstat>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	d102      	bne.n	8009448 <_fstat_r+0x1c>
 8009442:	682b      	ldr	r3, [r5, #0]
 8009444:	b103      	cbz	r3, 8009448 <_fstat_r+0x1c>
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	bf00      	nop
 800944c:	20004dac 	.word	0x20004dac

08009450 <_isatty_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d06      	ldr	r5, [pc, #24]	; (800946c <_isatty_r+0x1c>)
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	602b      	str	r3, [r5, #0]
 800945c:	f7f7 ff2b 	bl	80012b6 <_isatty>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_isatty_r+0x1a>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_isatty_r+0x1a>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	20004dac 	.word	0x20004dac

08009470 <abort>:
 8009470:	b508      	push	{r3, lr}
 8009472:	2006      	movs	r0, #6
 8009474:	f000 f82c 	bl	80094d0 <raise>
 8009478:	2001      	movs	r0, #1
 800947a:	f7f7 febd 	bl	80011f8 <_exit>

0800947e <_raise_r>:
 800947e:	291f      	cmp	r1, #31
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4604      	mov	r4, r0
 8009484:	460d      	mov	r5, r1
 8009486:	d904      	bls.n	8009492 <_raise_r+0x14>
 8009488:	2316      	movs	r3, #22
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	bd38      	pop	{r3, r4, r5, pc}
 8009492:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009494:	b112      	cbz	r2, 800949c <_raise_r+0x1e>
 8009496:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800949a:	b94b      	cbnz	r3, 80094b0 <_raise_r+0x32>
 800949c:	4620      	mov	r0, r4
 800949e:	f000 f831 	bl	8009504 <_getpid_r>
 80094a2:	462a      	mov	r2, r5
 80094a4:	4601      	mov	r1, r0
 80094a6:	4620      	mov	r0, r4
 80094a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ac:	f000 b818 	b.w	80094e0 <_kill_r>
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d00a      	beq.n	80094ca <_raise_r+0x4c>
 80094b4:	1c59      	adds	r1, r3, #1
 80094b6:	d103      	bne.n	80094c0 <_raise_r+0x42>
 80094b8:	2316      	movs	r3, #22
 80094ba:	6003      	str	r3, [r0, #0]
 80094bc:	2001      	movs	r0, #1
 80094be:	e7e7      	b.n	8009490 <_raise_r+0x12>
 80094c0:	2400      	movs	r4, #0
 80094c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094c6:	4628      	mov	r0, r5
 80094c8:	4798      	blx	r3
 80094ca:	2000      	movs	r0, #0
 80094cc:	e7e0      	b.n	8009490 <_raise_r+0x12>
	...

080094d0 <raise>:
 80094d0:	4b02      	ldr	r3, [pc, #8]	; (80094dc <raise+0xc>)
 80094d2:	4601      	mov	r1, r0
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f7ff bfd2 	b.w	800947e <_raise_r>
 80094da:	bf00      	nop
 80094dc:	200000cc 	.word	0x200000cc

080094e0 <_kill_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d07      	ldr	r5, [pc, #28]	; (8009500 <_kill_r+0x20>)
 80094e4:	2300      	movs	r3, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	f7f7 fe73 	bl	80011d8 <_kill>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	d102      	bne.n	80094fc <_kill_r+0x1c>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	b103      	cbz	r3, 80094fc <_kill_r+0x1c>
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	bf00      	nop
 8009500:	20004dac 	.word	0x20004dac

08009504 <_getpid_r>:
 8009504:	f7f7 be60 	b.w	80011c8 <_getpid>

08009508 <_init>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	bf00      	nop
 800950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950e:	bc08      	pop	{r3}
 8009510:	469e      	mov	lr, r3
 8009512:	4770      	bx	lr

08009514 <_fini>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	bf00      	nop
 8009518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951a:	bc08      	pop	{r3}
 800951c:	469e      	mov	lr, r3
 800951e:	4770      	bx	lr
